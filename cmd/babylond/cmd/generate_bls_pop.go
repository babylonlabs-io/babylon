package cmd

import (
	"fmt"
	"strings"

	"github.com/cosmos/cosmos-sdk/client/flags"
	"github.com/spf13/cobra"

	"github.com/babylonlabs-io/babylon/v4/app"
	appsigner "github.com/babylonlabs-io/babylon/v4/app/signer"
	"github.com/babylonlabs-io/babylon/v4/crypto/bls12381"
	cmtcrypto "github.com/cometbft/cometbft/crypto"
)

func GenerateBlsPopCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "generate-bls-pop",
		Short: "Generate a BLS proof-of-possession for a validator",
		Long: strings.TrimSpace(`generate-bls-pop will generate a BLS proof-of-possession for a validator.

Proof-of-possession is generated by the Ed25519 and BLS private keys from the stored files, priv_validator_key.json and bls_key.json. 
This is used in 'babylond tx checkpointing create-validator' by specifying the '--bls-pop' flag.

Example:
$ babylond generate-bls-pop --home ./
`),

		RunE: func(cmd *cobra.Command, args []string) error {
			homeDir, _ := cmd.Flags().GetString(flags.FlagHome)

			ck, err := appsigner.LoadConsensusKey(homeDir)
			if err != nil {
				return fmt.Errorf("failed to load consensus key from local files")
			}

			return generateBlsPop(
				homeDir,
				ck.Comet.PrivKey,
				ck.Bls.PrivKey,
			)
		},
	}

	cmd.Flags().String(flags.FlagHome, app.DefaultNodeHome, "The node home directory")
	return cmd
}

// generateBlsPop generates a proof-of-possession for a validator
// using the consensus keys from local files
func generateBlsPop(homeDir string, cmtPrivKey cmtcrypto.PrivKey, blsPrivKey bls12381.PrivateKey) error {
	pop, err := appsigner.BuildPoP(cmtPrivKey, blsPrivKey)
	if err != nil {
		return fmt.Errorf("failed to build proof-of-possession: %w", err)
	}

	return appsigner.SaveBlsPop(
		appsigner.DefaultBlsPopFile(homeDir),
		blsPrivKey.PubKey(),
		pop,
	)
}
