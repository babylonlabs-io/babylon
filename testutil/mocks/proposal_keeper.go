// Code generated by MockGen. DO NOT EDIT.
// Source: x/checkpointing/proposal_expected_keeper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bls12381 "github.com/babylonlabs-io/babylon/crypto/bls12381"
	types "github.com/babylonlabs-io/babylon/x/checkpointing/types"
	types0 "github.com/babylonlabs-io/babylon/x/epoching/types"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	types1 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointingKeeper is a mock of CheckpointingKeeper interface.
type MockCheckpointingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointingKeeperMockRecorder
}

// MockCheckpointingKeeperMockRecorder is the mock recorder for MockCheckpointingKeeper.
type MockCheckpointingKeeperMockRecorder struct {
	mock *MockCheckpointingKeeper
}

// NewMockCheckpointingKeeper creates a new mock instance.
func NewMockCheckpointingKeeper(ctrl *gomock.Controller) *MockCheckpointingKeeper {
	mock := &MockCheckpointingKeeper{ctrl: ctrl}
	mock.recorder = &MockCheckpointingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointingKeeper) EXPECT() *MockCheckpointingKeeperMockRecorder {
	return m.recorder
}

// GetBlsPubKey mocks base method.
func (m *MockCheckpointingKeeper) GetBlsPubKey(ctx context.Context, address types1.ValAddress) (bls12381.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlsPubKey", ctx, address)
	ret0, _ := ret[0].(bls12381.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlsPubKey indicates an expected call of GetBlsPubKey.
func (mr *MockCheckpointingKeeperMockRecorder) GetBlsPubKey(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlsPubKey", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetBlsPubKey), ctx, address)
}

// GetEpoch mocks base method.
func (m *MockCheckpointingKeeper) GetEpoch(ctx context.Context) *types0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch", ctx)
	ret0, _ := ret[0].(*types0.Epoch)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockCheckpointingKeeperMockRecorder) GetEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetEpoch), ctx)
}

// GetPubKeyByConsAddr mocks base method.
func (m *MockCheckpointingKeeper) GetPubKeyByConsAddr(arg0 context.Context, arg1 types1.ConsAddress) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKeyByConsAddr", arg0, arg1)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubKeyByConsAddr indicates an expected call of GetPubKeyByConsAddr.
func (mr *MockCheckpointingKeeperMockRecorder) GetPubKeyByConsAddr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKeyByConsAddr", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetPubKeyByConsAddr), arg0, arg1)
}

// GetTotalVotingPower mocks base method.
func (m *MockCheckpointingKeeper) GetTotalVotingPower(ctx context.Context, epochNumber uint64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalVotingPower", ctx, epochNumber)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTotalVotingPower indicates an expected call of GetTotalVotingPower.
func (mr *MockCheckpointingKeeperMockRecorder) GetTotalVotingPower(ctx, epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotingPower", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetTotalVotingPower), ctx, epochNumber)
}

// GetValidatorSet mocks base method.
func (m *MockCheckpointingKeeper) GetValidatorSet(ctx context.Context, epochNumber uint64) types0.ValidatorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", ctx, epochNumber)
	ret0, _ := ret[0].(types0.ValidatorSet)
	return ret0
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockCheckpointingKeeperMockRecorder) GetValidatorSet(ctx, epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetValidatorSet), ctx, epochNumber)
}

// SealCheckpoint mocks base method.
func (m *MockCheckpointingKeeper) SealCheckpoint(ctx context.Context, ckptWithMeta *types.RawCheckpointWithMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SealCheckpoint", ctx, ckptWithMeta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SealCheckpoint indicates an expected call of SealCheckpoint.
func (mr *MockCheckpointingKeeperMockRecorder) SealCheckpoint(ctx, ckptWithMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealCheckpoint", reflect.TypeOf((*MockCheckpointingKeeper)(nil).SealCheckpoint), ctx, ckptWithMeta)
}

// VerifyBLSSig mocks base method.
func (m *MockCheckpointingKeeper) VerifyBLSSig(ctx context.Context, sig *types.BlsSig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBLSSig", ctx, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyBLSSig indicates an expected call of VerifyBLSSig.
func (mr *MockCheckpointingKeeperMockRecorder) VerifyBLSSig(ctx, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBLSSig", reflect.TypeOf((*MockCheckpointingKeeper)(nil).VerifyBLSSig), ctx, sig)
}
