{
  "swagger": "2.0",
  "info": {
    "title": "babylon/btcstkconsumer/v1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/babylon/btcstkconsumer/v1/consumer_registry_list": {
      "get": {
        "summary": "ConsumerRegistryList queries the list of consumers that are registered to Babylon",
        "operationId": "ConsumerRegistryList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstkconsumer.v1.QueryConsumerRegistryListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstkconsumer/v1/consumers_registry/{consumer_ids}": {
      "get": {
        "summary": "ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view",
        "operationId": "ConsumersRegistry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstkconsumer.v1.QueryConsumersRegistryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_ids",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstkconsumer/v1/finality_provider/{consumer_id}/{fp_btc_pk_hex}": {
      "get": {
        "summary": "FinalityProvider info about one finality provider",
        "operationId": "FinalityProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstkconsumer.v1.QueryFinalityProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_id",
            "description": "consumer id is the consumer id this finality provider is registered to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fp_btc_pk_hex",
            "description": "fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstkconsumer/v1/finality_provider_consumer/{fp_btc_pk_hex}": {
      "get": {
        "summary": "FinalityProviderConsumer info about one finality provider's consumer id",
        "operationId": "FinalityProviderConsumer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstkconsumer.v1.QueryFinalityProviderConsumerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "fp_btc_pk_hex",
            "description": "fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstkconsumer/v1/finality_providers/{consumer_id}": {
      "get": {
        "summary": "FinalityProviders queries all finality providers for a given consumer",
        "operationId": "FinalityProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstkconsumer.v1.QueryFinalityProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstkconsumer/v1/params": {
      "get": {
        "summary": "Parameters queries the parameters of the module.",
        "operationId": "Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstkconsumer.v1.QueryParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "babylon.btcstaking.v1.BTCSigType": {
      "type": "string",
      "enum": [
        "BIP340",
        "BIP322",
        "ECDSA"
      ],
      "default": "BIP340",
      "description": "- BIP340: BIP340 means the btc_sig will follow the BIP-340 encoding\n - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding\n - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding\nref: https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331",
      "title": "BTCSigType indicates the type of btc_sig in a pop"
    },
    "babylon.btcstaking.v1.ProofOfPossessionBTC": {
      "type": "object",
      "properties": {
        "btc_sig_type": {
          "$ref": "#/definitions/babylon.btcstaking.v1.BTCSigType",
          "title": "btc_sig_type indicates the type of btc_sig in the pop"
        },
        "btc_sig": {
          "type": "string",
          "format": "byte",
          "title": "btc_sig is the signature generated via sign(sk_btc, babylon_staker_address)\nthe signature follows encoding in either BIP-340 spec or BIP-322 spec"
        }
      },
      "title": "ProofOfPossessionBTC is the proof of possession that a Babylon\naddress and a Bitcoin secp256k1 secret key are held by the same\nperson"
    },
    "babylon.btcstkconsumer.v1.ConsumerRegister": {
      "type": "object",
      "properties": {
        "consumer_id": {
          "type": "string",
          "title": "consumer_id is the ID of the consumer\n- for Cosmos SDK chains, the consumer ID will be the IBC client ID\n- for ETH L2 chains, the consumer ID will be the chain ID of the ETH L2\n  chain"
        },
        "consumer_name": {
          "type": "string",
          "title": "consumer_name is the name of the consumer"
        },
        "consumer_description": {
          "type": "string",
          "title": "consumer_description is a description for the consumer (can be empty)"
        },
        "cosmos_consumer_metadata": {
          "$ref": "#/definitions/babylon.btcstkconsumer.v1.CosmosConsumerMetadata"
        },
        "eth_l2_consumer_metadata": {
          "$ref": "#/definitions/babylon.btcstkconsumer.v1.ETHL2ConsumerMetadata"
        }
      },
      "title": "ConsumerRegister is the registration information of a consumer"
    },
    "babylon.btcstkconsumer.v1.CosmosConsumerMetadata": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "title": "channel_id defines the IBC channel ID for the consumer chain"
        }
      },
      "title": "CosmosConsumerMetadata is the metadata for the Cosmos integration"
    },
    "babylon.btcstkconsumer.v1.ETHL2ConsumerMetadata": {
      "type": "object",
      "properties": {
        "finality_contract_address": {
          "type": "string",
          "title": "finality_contract_address is the address of the finality contract for\nthe ETH L2 integration"
        }
      },
      "title": "ETHL2ConsumerMetadata is the metadata for the ETH L2 integration"
    },
    "babylon.btcstkconsumer.v1.FinalityProviderResponse": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
          "description": "description defines the description terms for the finality provider."
        },
        "commission": {
          "type": "string",
          "description": "commission defines the commission rate of the finality provider."
        },
        "addr": {
          "type": "string",
          "title": "babylon_pk is the Babylon secp256k1 PK of this finality provider"
        },
        "btc_pk": {
          "type": "string",
          "format": "byte",
          "title": "btc_pk is the Bitcoin secp256k1 PK of this finality provider\nthe PK follows encoding in BIP-340 spec"
        },
        "pop": {
          "$ref": "#/definitions/babylon.btcstaking.v1.ProofOfPossessionBTC",
          "title": "pop is the proof of possession of babylon_pk and btc_pk"
        },
        "slashed_babylon_height": {
          "type": "string",
          "format": "uint64",
          "title": "slashed_babylon_height indicates the Babylon height when\nthe finality provider is slashed.\nif it's 0 then the finality provider is not slashed"
        },
        "slashed_btc_height": {
          "type": "integer",
          "format": "int64",
          "title": "slashed_btc_height indicates the BTC height when\nthe finality provider is slashed.\nif it's 0 then the finality provider is not slashed"
        },
        "height": {
          "type": "string",
          "format": "uint64",
          "title": "height is the queried Babylon height"
        },
        "voting_power": {
          "type": "string",
          "format": "uint64",
          "title": "voting_power is the voting power of this finality provider at the given height"
        },
        "consumer_id": {
          "type": "string",
          "title": "consumer_id is the consumer id this finality provider is registered to"
        }
      },
      "description": "FinalityProviderResponse defines a finality provider with voting power information."
    },
    "babylon.btcstkconsumer.v1.Params": {
      "type": "object",
      "properties": {
        "permissioned_integration": {
          "type": "boolean",
          "description": "permissioned_integration is a flag to enable permissioned integration, i.e.,\nrequiring governance proposal to approve new integrations."
        }
      },
      "description": "Params defines the parameters for the module."
    },
    "babylon.btcstkconsumer.v1.QueryConsumerRegistryListResponse": {
      "type": "object",
      "properties": {
        "consumer_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer_ids are IDs of the consumers in ascending alphabetical order"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "title": "pagination defines the pagination in the response"
        }
      },
      "title": "QueryConsumerRegistryListResponse is response type for the Query/ConsumerRegistryList RPC method"
    },
    "babylon.btcstkconsumer.v1.QueryConsumersRegistryResponse": {
      "type": "object",
      "properties": {
        "consumers_register": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstkconsumer.v1.ConsumerRegister"
          }
        }
      },
      "description": "QueryConsumersRegistryResponse is response type for the Query/ConsumersRegistry RPC method."
    },
    "babylon.btcstkconsumer.v1.QueryFinalityProviderConsumerResponse": {
      "type": "object",
      "properties": {
        "consumer_id": {
          "type": "string"
        }
      },
      "title": "QueryFinalityProviderConsumerResponse returns the CZ finality provier consumer id"
    },
    "babylon.btcstkconsumer.v1.QueryFinalityProviderResponse": {
      "type": "object",
      "properties": {
        "finality_provider": {
          "$ref": "#/definitions/babylon.btcstkconsumer.v1.FinalityProviderResponse",
          "title": "finality_provider contains the FinalityProvider"
        }
      },
      "title": "QueryFinalityProviderResponse contains information about a finality provider"
    },
    "babylon.btcstkconsumer.v1.QueryFinalityProvidersResponse": {
      "type": "object",
      "properties": {
        "finality_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstkconsumer.v1.FinalityProviderResponse"
          },
          "title": "finality_providers contains all the finality providers"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryFinalityProvidersResponse is the response type for the\nQuery/FinalityProviders RPC method."
    },
    "babylon.btcstkconsumer.v1.QueryParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/babylon.btcstkconsumer.v1.Params",
          "description": "params holds all the parameters of this module."
        }
      },
      "description": "QueryParamsResponse is response type for the Query/Params RPC method."
    },
    "cosmos.base.query.v1beta1.PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "count_total": {
          "type": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
        },
        "reverse": {
          "type": "boolean",
          "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "cosmos.base.query.v1beta1.PageResponse": {
      "type": "object",
      "properties": {
        "next_key": {
          "type": "string",
          "format": "byte",
          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results."
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
    },
    "cosmos.staking.v1beta1.Description": {
      "type": "object",
      "properties": {
        "moniker": {
          "type": "string",
          "description": "moniker defines a human-readable name for the validator."
        },
        "identity": {
          "type": "string",
          "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
        },
        "website": {
          "type": "string",
          "description": "website defines an optional website link."
        },
        "security_contact": {
          "type": "string",
          "description": "security_contact defines an optional email for security contact."
        },
        "details": {
          "type": "string",
          "description": "details define other optional details."
        }
      },
      "description": "Description defines a validator description."
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
