{
  "swagger": "2.0",
  "info": {
    "title": "babylon/zoneconcierge/v1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/babylon/zoneconcierge/v1/chain_info/{consumer_id}/header/{height}": {
      "get": {
        "summary": "Header queries the CZ header and fork headers at a given height.",
        "operationId": "Header",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryHeaderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/chains": {
      "get": {
        "summary": "ChainList queries the list of chains that checkpoint to Babylon",
        "operationId": "ChainList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryChainListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/chains_info": {
      "get": {
        "summary": "ChainsInfo queries the latest info for a given list of chains in Babylon's view",
        "operationId": "ChainsInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryChainsInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/epoch_chains_info": {
      "get": {
        "summary": "EpochChainsInfo queries the latest info for a list of chains\nin a given epoch in Babylon's view",
        "operationId": "EpochChainsInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryEpochChainsInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch_num",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "consumer_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/finalized_chain_info/{consumer_id}/height/{height}": {
      "get": {
        "summary": "FinalizedChainInfoUntilHeight queries the BTC-finalised info no later than\nthe provided CZ height, with proofs",
        "operationId": "FinalizedChainInfoUntilHeight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryFinalizedChainInfoUntilHeightResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_id",
            "description": "consumer_id is the ID of the CZ",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "height",
            "description": "height is the height of the CZ chain\nsuch that the returned finalised chain info will be no later than this\nheight",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "prove",
            "description": "prove indicates whether the querier wants to get proofs of this timestamp.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/finalized_chains_info": {
      "get": {
        "summary": "FinalizedChainsInfo queries the BTC-finalised info of chains with given IDs, with proofs",
        "operationId": "FinalizedChainsInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryFinalizedChainsInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_ids",
            "description": "consumer_ids is the list of ids of CZs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "prove",
            "description": "prove indicates whether the querier wants to get proofs of this timestamp.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/headers/{consumer_id}": {
      "get": {
        "summary": "ListHeaders queries the headers of a chain in Babylon's view, with\npagination support",
        "operationId": "ListHeaders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryListHeadersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/headers/{consumer_id}/epochs/{epoch_num}": {
      "get": {
        "summary": "ListEpochHeaders queries the headers of a chain timestamped in a given\nepoch of Babylon, with pagination support",
        "operationId": "ListEpochHeaders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryListEpochHeadersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "epoch_num",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/zoneconcierge/v1/params": {
      "get": {
        "summary": "Params queries the parameters of the module.",
        "operationId": "Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.zoneconcierge.v1.QueryParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "babylon.btccheckpoint.v1.SubmissionKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btccheckpoint.v1.TransactionKey"
          }
        }
      },
      "title": "Checkpoint can be composed from multiple transactions, so to identify whole\nsubmission we need list of transaction keys.\nEach submission can generally be identified by this list of (txIdx,\nblockHash) tuples. Note: this could possibly be optimized as if transactions\nwere in one block they would have the same block hash and different indexes,\nbut each blockhash is only 33 (1  byte for prefix encoding and 32 byte hash),\nso there should be other strong arguments for this optimization"
    },
    "babylon.btccheckpoint.v1.TransactionInfo": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/babylon.btccheckpoint.v1.TransactionKey",
          "description": "key is the position (txIdx, blockHash) of this tx on BTC blockchain\nAlthough it is already a part of SubmissionKey, we store it here again\nto make TransactionInfo self-contained.\nFor example, storing the key allows TransactionInfo to not relay on\nthe fact that TransactionInfo will be ordered in the same order as\nTransactionKeys in SubmissionKey."
        },
        "transaction": {
          "type": "string",
          "format": "byte",
          "title": "transaction is the full transaction in bytes"
        },
        "proof": {
          "type": "string",
          "format": "byte",
          "title": "proof is the Merkle proof that this tx is included in the position in `key`\nTODO: maybe it could use here better format as we already processed and\nvalidated the proof?"
        }
      },
      "title": "TransactionInfo is the info of a tx on Bitcoin,\nincluding\n- the position of the tx on BTC blockchain\n- the full tx content\n- the Merkle proof that this tx is on the above position"
    },
    "babylon.btccheckpoint.v1.TransactionKey": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "hash": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Each provided OP_RETURN transaction can be identified by hash of block in\nwhich transaction was included and transaction index in the block"
    },
    "babylon.checkpointing.v1.RawCheckpoint": {
      "type": "object",
      "properties": {
        "epoch_num": {
          "type": "string",
          "format": "uint64",
          "title": "epoch_num defines the epoch number the raw checkpoint is for"
        },
        "block_hash": {
          "type": "string",
          "format": "byte",
          "title": "block_hash defines the 'BlockID.Hash', which is the hash of\nthe block that individual BLS sigs are signed on"
        },
        "bitmap": {
          "type": "string",
          "format": "byte",
          "title": "bitmap defines the bitmap that indicates the signers of the BLS multi sig"
        },
        "bls_multi_sig": {
          "type": "string",
          "format": "byte",
          "title": "bls_multi_sig defines the multi sig that is aggregated from individual BLS\nsigs"
        }
      },
      "title": "RawCheckpoint wraps the BLS multi sig with metadata"
    },
    "babylon.checkpointing.v1.ValidatorWithBlsKey": {
      "type": "object",
      "properties": {
        "validator_address": {
          "type": "string",
          "title": "validator_address is the address of the validator"
        },
        "bls_pub_key": {
          "type": "string",
          "format": "byte",
          "title": "bls_pub_key is the BLS public key of the validator"
        },
        "voting_power": {
          "type": "string",
          "format": "uint64",
          "title": "voting_power is the voting power of the validator at the given epoch"
        }
      },
      "title": "ValidatorWithBlsKey couples validator address, voting power, and its bls\npublic key"
    },
    "babylon.epoching.v1.Epoch": {
      "type": "object",
      "properties": {
        "epoch_number": {
          "type": "string",
          "format": "uint64",
          "title": "epoch_number is the number of this epoch"
        },
        "current_epoch_interval": {
          "type": "string",
          "format": "uint64",
          "title": "current_epoch_interval is the epoch interval at the time of this epoch"
        },
        "first_block_height": {
          "type": "string",
          "format": "uint64",
          "title": "first_block_height is the height of the first block in this epoch"
        },
        "last_block_time": {
          "type": "string",
          "format": "date-time",
          "description": "last_block_time is the time of the last block in this epoch.\nBabylon needs to remember the last header's time of each epoch to complete\nunbonding validators/delegations when a previous epoch's checkpoint is\nfinalised. The last_block_time field is nil in the epoch's beginning, and\nis set upon the end of this epoch."
        },
        "sealer_app_hash": {
          "type": "string",
          "format": "byte",
          "title": "sealer is the last block of the sealed epoch\nsealer_app_hash points to the sealer but stored in the 1st header\nof the next epoch"
        },
        "sealer_block_hash": {
          "type": "string",
          "format": "byte",
          "title": "sealer_block_hash is the hash of the sealer\nthe validator set has generated a BLS multisig on the hash,\ni.e., hash of the last block in the epoch"
        }
      },
      "title": "Epoch is a structure that contains the metadata of an epoch"
    },
    "babylon.zoneconcierge.v1.ChainInfo": {
      "type": "object",
      "properties": {
        "consumer_id": {
          "type": "string",
          "title": "consumer_id is the ID of the consumer"
        },
        "latest_header": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.IndexedHeader",
          "title": "latest_header is the latest header in CZ's canonical chain"
        },
        "latest_forks": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.Forks",
          "title": "latest_forks is the latest forks, formed as a series of IndexedHeader (from\nlow to high)"
        },
        "timestamped_headers_count": {
          "type": "string",
          "format": "uint64",
          "title": "timestamped_headers_count is the number of timestamped headers in CZ's\ncanonical chain"
        }
      },
      "title": "ChainInfo is the information of a CZ"
    },
    "babylon.zoneconcierge.v1.FinalizedChainInfo": {
      "type": "object",
      "properties": {
        "consumer_id": {
          "type": "string",
          "title": "consumer_id is the ID of the consumer"
        },
        "finalized_chain_info": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.ChainInfo",
          "title": "finalized_chain_info is the info of the CZ"
        },
        "epoch_info": {
          "$ref": "#/definitions/babylon.epoching.v1.Epoch",
          "title": "epoch_info is the metadata of the last BTC-finalised epoch"
        },
        "raw_checkpoint": {
          "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpoint",
          "title": "raw_checkpoint is the raw checkpoint of this epoch"
        },
        "btc_submission_key": {
          "$ref": "#/definitions/babylon.btccheckpoint.v1.SubmissionKey",
          "title": "btc_submission_key is position of two BTC txs that include the raw\ncheckpoint of this epoch"
        },
        "proof": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.ProofFinalizedChainInfo",
          "title": "proof is the proof that the chain info is finalized"
        }
      },
      "title": "FinalizedChainInfo is the information of a CZ that is BTC-finalised"
    },
    "babylon.zoneconcierge.v1.Forks": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.zoneconcierge.v1.IndexedHeader"
          },
          "title": "blocks is the list of non-canonical indexed headers at the same height"
        }
      },
      "description": "Forks is a list of non-canonical `IndexedHeader`s at the same height.\nFor example, assuming the following blockchain\n```\nA \u003c- B \u003c- C \u003c- D \u003c- E\n           \\ -- D1\n           \\ -- D2\n```\nThen the fork will be {[D1, D2]} where each item is in struct `IndexedBlock`.\n\nNote that each `IndexedHeader` in the fork should have a valid quorum\ncertificate. Such forks exist since Babylon considers CZs might have\ndishonest majority. Also note that the IBC-Go implementation will only\nconsider the first header in a fork valid, since the subsequent headers\ncannot be verified without knowing the validator set in the previous header."
    },
    "babylon.zoneconcierge.v1.IndexedHeader": {
      "type": "object",
      "properties": {
        "consumer_id": {
          "type": "string",
          "title": "consumer_id is the unique ID of the consumer"
        },
        "hash": {
          "type": "string",
          "format": "byte",
          "title": "hash is the hash of this header"
        },
        "height": {
          "type": "string",
          "format": "uint64",
          "title": "height is the height of this header on CZ ledger\n(hash, height) jointly provides the position of the header on CZ ledger"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "time is the timestamp of this header on CZ ledger\nit is needed for CZ to unbond all mature validators/delegations\nbefore this timestamp when this header is BTC-finalised"
        },
        "babylon_header_hash": {
          "type": "string",
          "format": "byte",
          "title": "babylon_header_hash is the hash of the babylon block that includes this CZ\nheader"
        },
        "babylon_header_height": {
          "type": "string",
          "format": "uint64",
          "title": "babylon_header_height is the height of the babylon block that includes this CZ\nheader"
        },
        "babylon_epoch": {
          "type": "string",
          "format": "uint64",
          "title": "epoch is the epoch number of this header on Babylon ledger"
        },
        "babylon_tx_hash": {
          "type": "string",
          "format": "byte",
          "title": "babylon_tx_hash is the hash of the tx that includes this header\n(babylon_block_height, babylon_tx_hash) jointly provides the position of\nthe header on Babylon ledger"
        }
      },
      "title": "IndexedHeader is the metadata of a CZ header"
    },
    "babylon.zoneconcierge.v1.Params": {
      "type": "object",
      "properties": {
        "ibc_packet_timeout_seconds": {
          "type": "integer",
          "format": "int64",
          "title": "ibc_packet_timeout_seconds is the time period after which an unrelayed \nIBC packet becomes timeout, measured in seconds"
        }
      },
      "description": "Params defines the parameters for the module."
    },
    "babylon.zoneconcierge.v1.ProofEpochSealed": {
      "type": "object",
      "properties": {
        "validator_set": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.checkpointing.v1.ValidatorWithBlsKey"
          },
          "title": "validator_set is the validator set of the sealed epoch\nThis validator set has generated a BLS multisig on `app_hash` of\nthe sealer header"
        },
        "proof_epoch_info": {
          "$ref": "#/definitions/tendermint.crypto.ProofOps",
          "title": "proof_epoch_info is the Merkle proof that the epoch's metadata is committed\nto `app_hash` of the sealer header"
        },
        "proof_epoch_val_set": {
          "$ref": "#/definitions/tendermint.crypto.ProofOps",
          "title": "proof_epoch_info is the Merkle proof that the epoch's validator set is\ncommitted to `app_hash` of the sealer header"
        }
      },
      "title": "ProofEpochSealed is the proof that an epoch is sealed by the sealer header,\ni.e., the 2nd header of the next epoch With the access of metadata\n- Metadata of this epoch, which includes the sealer header\n- Raw checkpoint of this epoch\nThe verifier can perform the following verification rules:\n- The raw checkpoint's `app_hash` is same as in the sealer header\n- More than 2/3 (in voting power) validators in the validator set of this\nepoch have signed `app_hash` of the sealer header\n- The epoch metadata is committed to the `app_hash` of the sealer header\n- The validator set is committed to the `app_hash` of the sealer header"
    },
    "babylon.zoneconcierge.v1.ProofFinalizedChainInfo": {
      "type": "object",
      "properties": {
        "proof_cz_header_in_epoch": {
          "$ref": "#/definitions/tendermint.crypto.ProofOps",
          "title": "proof_cz_header_in_epoch is the proof that the CZ header is timestamped\nwithin a certain epoch"
        },
        "proof_epoch_sealed": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.ProofEpochSealed",
          "title": "proof_epoch_sealed is the proof that the epoch is sealed"
        },
        "proof_epoch_submitted": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btccheckpoint.v1.TransactionInfo"
          },
          "title": "proof_epoch_submitted is the proof that the epoch's checkpoint is included\nin BTC ledger It is the two TransactionInfo in the best (i.e., earliest)\ncheckpoint submission"
        }
      },
      "title": "ProofFinalizedChainInfo is a set of proofs that attest a chain info is\nBTC-finalised"
    },
    "babylon.zoneconcierge.v1.QueryChainListResponse": {
      "type": "object",
      "properties": {
        "consumer_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer_ids are IDs of the chains in ascending alphabetical order"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "title": "pagination defines the pagination in the response"
        }
      },
      "title": "QueryChainListResponse is response type for the Query/ChainList RPC method"
    },
    "babylon.zoneconcierge.v1.QueryChainsInfoResponse": {
      "type": "object",
      "properties": {
        "chains_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.zoneconcierge.v1.ChainInfo"
          }
        }
      },
      "description": "QueryChainsInfoResponse is response type for the Query/ChainsInfo RPC method."
    },
    "babylon.zoneconcierge.v1.QueryEpochChainsInfoResponse": {
      "type": "object",
      "properties": {
        "chains_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.zoneconcierge.v1.ChainInfo"
          },
          "title": "chain_info is the info of the CZ"
        }
      },
      "description": "QueryEpochChainsInfoResponse is response type for the Query/EpochChainsInfo RPC\nmethod."
    },
    "babylon.zoneconcierge.v1.QueryFinalizedChainInfoUntilHeightResponse": {
      "type": "object",
      "properties": {
        "finalized_chain_info": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.ChainInfo",
          "title": "finalized_chain_info is the info of the CZ"
        },
        "epoch_info": {
          "$ref": "#/definitions/babylon.epoching.v1.Epoch",
          "title": "epoch_info is the metadata of the last BTC-finalised epoch"
        },
        "raw_checkpoint": {
          "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpoint",
          "title": "raw_checkpoint is the raw checkpoint of this epoch"
        },
        "btc_submission_key": {
          "$ref": "#/definitions/babylon.btccheckpoint.v1.SubmissionKey",
          "title": "btc_submission_key is position of two BTC txs that include the raw\ncheckpoint of this epoch"
        },
        "proof": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.ProofFinalizedChainInfo",
          "title": "proof is the proof that the chain info is finalized"
        }
      },
      "description": "QueryFinalizedChainInfoUntilHeightResponse is response type for the\nQuery/FinalizedChainInfoUntilHeight RPC method."
    },
    "babylon.zoneconcierge.v1.QueryFinalizedChainsInfoResponse": {
      "type": "object",
      "properties": {
        "finalized_chains_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.zoneconcierge.v1.FinalizedChainInfo"
          }
        }
      },
      "description": "QueryFinalizedChainsInfoResponse is response type for the\nQuery/FinalizedChainsInfo RPC method."
    },
    "babylon.zoneconcierge.v1.QueryHeaderResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.IndexedHeader"
        },
        "fork_headers": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.Forks"
        }
      },
      "description": "QueryHeaderResponse is response type for the Query/Header RPC method."
    },
    "babylon.zoneconcierge.v1.QueryListEpochHeadersResponse": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.zoneconcierge.v1.IndexedHeader"
          },
          "title": "headers is the list of headers"
        }
      },
      "description": "QueryListEpochHeadersResponse is response type for the Query/ListEpochHeaders\nRPC method."
    },
    "babylon.zoneconcierge.v1.QueryListHeadersResponse": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.zoneconcierge.v1.IndexedHeader"
          },
          "title": "headers is the list of headers"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "title": "pagination defines the pagination in the response"
        }
      },
      "description": "QueryListHeadersResponse is response type for the Query/ListHeaders RPC\nmethod."
    },
    "babylon.zoneconcierge.v1.QueryParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/babylon.zoneconcierge.v1.Params",
          "description": "params holds all the parameters of this module."
        }
      },
      "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
    },
    "cosmos.base.query.v1beta1.PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "count_total": {
          "type": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
        },
        "reverse": {
          "type": "boolean",
          "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "cosmos.base.query.v1beta1.PageResponse": {
      "type": "object",
      "properties": {
        "next_key": {
          "type": "string",
          "format": "byte",
          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results."
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "tendermint.crypto.ProofOp": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "key": {
          "type": "string",
          "format": "byte"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "ProofOp defines an operation used for calculating Merkle root\nThe data could be arbitrary format, providing nessecary data\nfor example neighbouring node hash"
    },
    "tendermint.crypto.ProofOps": {
      "type": "object",
      "properties": {
        "ops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tendermint.crypto.ProofOp"
          }
        }
      },
      "title": "ProofOps is Merkle proof defined by the list of ProofOps"
    }
  }
}
