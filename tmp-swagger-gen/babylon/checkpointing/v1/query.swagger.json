{
  "swagger": "2.0",
  "info": {
    "title": "babylon/checkpointing/v1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/babylon/checkpointing/v1/bls_public_keys/{epoch_num}": {
      "get": {
        "summary": "BlsPublicKeyList queries a list of bls public keys of the validators at a\ngiven epoch number.",
        "operationId": "BlsPublicKeyList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryBlsPublicKeyListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch_num",
            "description": "epoch_num defines the epoch for the queried bls public keys",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/checkpointing/v1/epochs/{epoch_num}/status": {
      "get": {
        "summary": "EpochStatus queries the status of the checkpoint at a given epoch",
        "operationId": "EpochStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryEpochStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch_num",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/checkpointing/v1/epochs:status_count": {
      "get": {
        "summary": "RecentEpochStatusCount queries the number of epochs with each status in\nrecent epochs",
        "operationId": "RecentEpochStatusCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryRecentEpochStatusCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch_count",
            "description": "epoch_count is the number of the most recent epochs to include in the\naggregation.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/checkpointing/v1/last_raw_checkpoint/{status}": {
      "get": {
        "summary": "LastCheckpointWithStatus queries the last checkpoint with a given status or\na more matured status",
        "operationId": "LastCheckpointWithStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryLastCheckpointWithStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "CKPT_STATUS_ACCUMULATING",
              "CKPT_STATUS_SEALED",
              "CKPT_STATUS_SUBMITTED",
              "CKPT_STATUS_CONFIRMED",
              "CKPT_STATUS_FINALIZED"
            ]
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/checkpointing/v1/raw_checkpoint/{epoch_num}": {
      "get": {
        "summary": "RawCheckpoint queries a checkpoints at a given epoch number.",
        "operationId": "RawCheckpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryRawCheckpointResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch_num",
            "description": "epoch_num defines the epoch for the queried checkpoint",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/checkpointing/v1/raw_checkpoints": {
      "get": {
        "summary": "RawCheckpoints queries checkpoints for a epoch range specified in pagination params.",
        "operationId": "RawCheckpoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryRawCheckpointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/checkpointing/v1/raw_checkpoints/{status}": {
      "get": {
        "summary": "RawCheckpointList queries all checkpoints that match the given status.",
        "operationId": "RawCheckpointList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.checkpointing.v1.QueryRawCheckpointListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "description": "status defines the status of the raw checkpoints of the query",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "CKPT_STATUS_ACCUMULATING",
              "CKPT_STATUS_SEALED",
              "CKPT_STATUS_SUBMITTED",
              "CKPT_STATUS_CONFIRMED",
              "CKPT_STATUS_FINALIZED"
            ]
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "babylon.checkpointing.v1.BlsPublicKeyListResponse": {
      "type": "object",
      "properties": {
        "validator_address": {
          "type": "string",
          "title": "validator_address is the address of the validator"
        },
        "bls_pub_key_hex": {
          "type": "string",
          "title": "bls_pub_key is the BLS public key of the validator"
        },
        "voting_power": {
          "type": "string",
          "format": "uint64",
          "title": "voting_power is the voting power of the validator at the given epoch"
        }
      },
      "title": "BlsPublicKeyListResponse couples validator address, voting power, and its bls\npublic key"
    },
    "babylon.checkpointing.v1.CheckpointStateUpdateResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/babylon.checkpointing.v1.CheckpointStatus",
          "title": "state defines the event of a state transition towards this state"
        },
        "status_desc": {
          "type": "string",
          "description": "status_desc represents the description of status enum."
        },
        "block_height": {
          "type": "string",
          "format": "uint64",
          "title": "block_height is the height of the Babylon block that triggers the state\nupdate"
        },
        "block_time": {
          "type": "string",
          "format": "date-time",
          "title": "block_time is the timestamp in the Babylon block that triggers the state\nupdate"
        }
      },
      "description": "CheckpointStateUpdateResponse defines a state transition on the checkpoint."
    },
    "babylon.checkpointing.v1.CheckpointStatus": {
      "type": "string",
      "enum": [
        "CKPT_STATUS_ACCUMULATING",
        "CKPT_STATUS_SEALED",
        "CKPT_STATUS_SUBMITTED",
        "CKPT_STATUS_CONFIRMED",
        "CKPT_STATUS_FINALIZED"
      ],
      "default": "CKPT_STATUS_ACCUMULATING",
      "description": "CheckpointStatus is the status of a checkpoint.\n\n - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.\n - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.\n - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.\n - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.\n - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC."
    },
    "babylon.checkpointing.v1.QueryBlsPublicKeyListResponse": {
      "type": "object",
      "properties": {
        "validator_with_bls_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.checkpointing.v1.BlsPublicKeyListResponse"
          }
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryBlsPublicKeyListResponse is the response type for the\nQuery/BlsPublicKeys RPC method."
    },
    "babylon.checkpointing.v1.QueryEpochStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/babylon.checkpointing.v1.CheckpointStatus"
        }
      },
      "description": "QueryEpochStatusResponse is the response type for the Query/EpochStatus\nRPC method."
    },
    "babylon.checkpointing.v1.QueryLastCheckpointWithStatusResponse": {
      "type": "object",
      "properties": {
        "raw_checkpoint": {
          "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpointResponse"
        }
      },
      "description": "QueryLastCheckpointWithStatusResponse is the response type for the\nQuery/LastCheckpointWithStatus RPC method."
    },
    "babylon.checkpointing.v1.QueryRawCheckpointListResponse": {
      "type": "object",
      "properties": {
        "raw_checkpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpointWithMetaResponse"
          },
          "title": "the order is going from the newest to oldest based on the epoch number"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryRawCheckpointListResponse is the response type for the\nQuery/RawCheckpoints RPC method."
    },
    "babylon.checkpointing.v1.QueryRawCheckpointResponse": {
      "type": "object",
      "properties": {
        "raw_checkpoint": {
          "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpointWithMetaResponse"
        }
      },
      "description": "QueryRawCheckpointResponse is the response type for the Query/RawCheckpoint\nRPC method."
    },
    "babylon.checkpointing.v1.QueryRawCheckpointsResponse": {
      "type": "object",
      "properties": {
        "raw_checkpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpointWithMetaResponse"
          },
          "title": "the order is going from the newest to oldest based on the epoch number"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryRawCheckpointsResponse is the response type for the Query/RawCheckpoints\nRPC method."
    },
    "babylon.checkpointing.v1.QueryRecentEpochStatusCountResponse": {
      "type": "object",
      "properties": {
        "tip_epoch": {
          "type": "string",
          "format": "uint64"
        },
        "epoch_count": {
          "type": "string",
          "format": "uint64"
        },
        "status_count": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "description": "QueryRecentEpochStatusCountResponse is the response type for the\nQuery/EpochStatusCount RPC method."
    },
    "babylon.checkpointing.v1.RawCheckpointResponse": {
      "type": "object",
      "properties": {
        "epoch_num": {
          "type": "string",
          "format": "uint64",
          "title": "epoch_num defines the epoch number the raw checkpoint is for"
        },
        "block_hash_hex": {
          "type": "string",
          "title": "block_hash_hex defines the 'BlockID.Hash', which is the hash of\nthe block that individual BLS sigs are signed on as hex string"
        },
        "bitmap": {
          "type": "string",
          "format": "byte",
          "title": "bitmap defines the bitmap that indicates the signers of the BLS multi sig"
        },
        "bls_multi_sig": {
          "type": "string",
          "format": "byte",
          "title": "bls_multi_sig defines the multi sig that is aggregated from individual BLS\nsigs"
        }
      },
      "title": "RawCheckpointResponse wraps the BLS multi sig with metadata"
    },
    "babylon.checkpointing.v1.RawCheckpointWithMetaResponse": {
      "type": "object",
      "properties": {
        "ckpt": {
          "$ref": "#/definitions/babylon.checkpointing.v1.RawCheckpointResponse"
        },
        "status": {
          "$ref": "#/definitions/babylon.checkpointing.v1.CheckpointStatus",
          "title": "status defines the status of the checkpoint"
        },
        "status_desc": {
          "type": "string",
          "description": "status_desc represents the description of status enum."
        },
        "bls_aggr_pk": {
          "type": "string",
          "format": "byte",
          "title": "bls_aggr_pk defines the aggregated BLS public key"
        },
        "power_sum": {
          "type": "string",
          "format": "uint64",
          "title": "power_sum defines the accumulated voting power for the checkpoint"
        },
        "lifecycle": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.checkpointing.v1.CheckpointStateUpdateResponse"
          },
          "description": "lifecycle defines the lifecycle of this checkpoint, i.e., each state\ntransition and the time (in both timestamp and block height) of this\ntransition."
        }
      },
      "description": "RawCheckpointWithMetaResponse wraps the raw checkpoint with metadata."
    },
    "cosmos.base.query.v1beta1.PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "count_total": {
          "type": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
        },
        "reverse": {
          "type": "boolean",
          "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "cosmos.base.query.v1beta1.PageResponse": {
      "type": "object",
      "properties": {
        "next_key": {
          "type": "string",
          "format": "byte",
          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results."
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
