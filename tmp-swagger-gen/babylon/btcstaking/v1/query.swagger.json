{
  "swagger": "2.0",
  "info": {
    "title": "babylon/btcstaking/v1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/babylon/btcstaking/v1/btc_delegation/{staking_tx_hash_hex}": {
      "get": {
        "summary": "BTCDelegation retrieves delegation by corresponding staking tx hash",
        "operationId": "BTCDelegation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryBTCDelegationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "staking_tx_hash_hex",
            "description": "Hash of staking transaction in btc format",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/btc_delegations/{status}": {
      "get": {
        "summary": "BTCDelegations queries all BTC delegations under a given status",
        "operationId": "BTCDelegations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryBTCDelegationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "description": "status is the queried status for BTC delegations",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "PENDING",
              "VERIFIED",
              "ACTIVE",
              "UNBONDED",
              "EXPIRED",
              "ANY"
            ]
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/finality_providers": {
      "get": {
        "summary": "FinalityProviders queries all finality providers",
        "operationId": "FinalityProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryFinalityProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/finality_providers/{fp_btc_pk_hex}/delegations": {
      "get": {
        "summary": "FinalityProviderDelegations queries all BTC delegations of the given finality provider",
        "operationId": "FinalityProviderDelegations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryFinalityProviderDelegationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "fp_btc_pk_hex",
            "description": "fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality providerthat\nthis BTC delegation delegates to\nthe PK follows encoding in BIP-340 spec",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/finality_providers/{fp_btc_pk_hex}/finality_provider": {
      "get": {
        "summary": "FinalityProvider info about one finality provider",
        "operationId": "FinalityProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryFinalityProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "fp_btc_pk_hex",
            "description": "fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/params": {
      "get": {
        "summary": "Parameters queries the parameters of the module.",
        "operationId": "Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/params/btc_height/{btc_height}": {
      "get": {
        "summary": "ParamsByBTCHeight queries the parameters of the module for a specific BTC height",
        "operationId": "ParamsByBTCHeight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryParamsByBTCHeightResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "btc_height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/babylon/btcstaking/v1/params/{version}": {
      "get": {
        "summary": "ParamsByVersion queries the parameters of the module for a specific version of past params.",
        "operationId": "ParamsByVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/babylon.btcstaking.v1.QueryParamsByVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "babylon.btcstaking.v1.BTCDelegationResponse": {
      "type": "object",
      "properties": {
        "staker_addr": {
          "type": "string",
          "description": "staker_addr is the address to receive rewards from BTC delegation."
        },
        "btc_pk": {
          "type": "string",
          "format": "byte",
          "title": "btc_pk is the Bitcoin secp256k1 PK of this BTC delegation\nthe PK follows encoding in BIP-340 spec"
        },
        "fp_btc_pk_list": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that\nthis BTC delegation delegates to"
        },
        "staking_time": {
          "type": "integer",
          "format": "int64",
          "title": "staking_time is the number of blocks for which the delegation is locked on BTC chain"
        },
        "start_height": {
          "type": "integer",
          "format": "int64",
          "title": "start_height is the start BTC height of the BTC delegation\nit is the start BTC height of the timelock"
        },
        "end_height": {
          "type": "integer",
          "format": "int64",
          "title": "end_height is the end height of the BTC delegation\nit is the end BTC height of the timelock - w"
        },
        "total_sat": {
          "type": "string",
          "format": "uint64",
          "title": "total_sat is the total amount of BTC stakes in this delegation\nquantified in satoshi"
        },
        "staking_tx_hex": {
          "type": "string",
          "title": "staking_tx_hex is the hex string of staking tx"
        },
        "slashing_tx_hex": {
          "type": "string",
          "title": "slashing_tx_hex is the hex string of slashing tx"
        },
        "delegator_slash_sig_hex": {
          "type": "string",
          "description": "delegator_slash_sig_hex is the signature on the slashing tx\nby the delegator (i.e., SK corresponding to btc_pk) as string hex.\nIt will be a part of the witness for the staking tx output."
        },
        "covenant_sigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.CovenantAdaptorSignatures"
          },
          "description": "covenant_sigs is a list of adaptor signatures on the slashing tx\nby each covenant member\nIt will be a part of the witness for the staking tx output."
        },
        "staking_output_idx": {
          "type": "integer",
          "format": "int64",
          "title": "staking_output_idx is the index of the staking output in the staking tx"
        },
        "active": {
          "type": "boolean",
          "title": "whether this delegation is active"
        },
        "status_desc": {
          "type": "string",
          "description": "descriptive status of current delegation."
        },
        "unbonding_time": {
          "type": "integer",
          "format": "int64",
          "title": "unbonding_time used in unbonding output timelock path and in slashing transactions\nchange outputs"
        },
        "undelegation_response": {
          "$ref": "#/definitions/babylon.btcstaking.v1.BTCUndelegationResponse",
          "description": "undelegation_response is the undelegation info of this delegation."
        },
        "params_version": {
          "type": "integer",
          "format": "int64",
          "title": "params version used to validate delegation"
        }
      },
      "description": "BTCDelegationResponse is the client needed information from a BTCDelegation with the current status based on parameters."
    },
    "babylon.btcstaking.v1.BTCDelegationStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "VERIFIED",
        "ACTIVE",
        "UNBONDED",
        "EXPIRED",
        "ANY"
      ],
      "default": "PENDING",
      "description": "BTCDelegationStatus is the status of a delegation.\nThere are two possible valid state transition paths for a BTC delegation:\n- PENDING -\u003e VERIFIED -\u003e ACTIVE -\u003e UNBONDED -\u003e EXPIRED\n- PENDING -\u003e VERIFIED -\u003e ACTIVE -\u003e UNBONDED/EXPIRED\nand one invalid state transition path:\n- PENDING -\u003e VERIFIED -\u003e UNBONDED i.e the staker unbonded before\nactivating delegation on Babylon chain.\nIn valid transition paths, the delegation becomes UNBONDED when:\n- either the staking transaction timelock expires\n- or the staker requests early undelegation through MsgBTCUndelegate message.\n\n - PENDING: PENDING defines a delegation that is waiting for covenant signatures.\n - VERIFIED: VERIFIED defines a delegation that has covenant signatures but is not yet\nincluded in the BTC chain.\n - ACTIVE: ACTIVE defines a delegation that has voting power\n - UNBONDED: UNBONDED defines a delegation no longer has voting power\nby receiving unbonding tx with signatures from staker and covenant committee\n - EXPIRED: EXPIRED defines a delegation no longer has voting power\nfor reaching the end of staking transaction timelock\n - ANY: ANY is any of the above status"
    },
    "babylon.btcstaking.v1.BTCDelegatorDelegationsResponse": {
      "type": "object",
      "properties": {
        "dels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.BTCDelegationResponse"
          }
        }
      },
      "description": "BTCDelegatorDelegationsResponse is a collection of BTC delegations responses from the same delegator."
    },
    "babylon.btcstaking.v1.BTCSigType": {
      "type": "string",
      "enum": [
        "BIP340",
        "BIP322",
        "ECDSA"
      ],
      "default": "BIP340",
      "description": "- BIP340: BIP340 means the btc_sig will follow the BIP-340 encoding\n - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding\n - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding\nref: https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331",
      "title": "BTCSigType indicates the type of btc_sig in a pop"
    },
    "babylon.btcstaking.v1.BTCUndelegationResponse": {
      "type": "object",
      "properties": {
        "unbonding_tx_hex": {
          "type": "string",
          "description": "unbonding_tx is the transaction which will transfer the funds from staking\noutput to unbonding output. Unbonding output will usually have lower timelock\nthan staking output. The unbonding tx as string hex."
        },
        "covenant_unbonding_sig_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.SignatureInfo"
          },
          "title": "covenant_unbonding_sig_list is the list of signatures on the unbonding tx\nby covenant members"
        },
        "slashing_tx_hex": {
          "type": "string",
          "title": "slashingTxHex is the hex string of slashing tx"
        },
        "delegator_slashing_sig_hex": {
          "type": "string",
          "description": "delegator_slashing_sig is the signature on the slashing tx\nby the delegator (i.e., SK corresponding to btc_pk).\nIt will be a part of the witness for the unbonding tx output.\nThe delegator slashing sig as string hex."
        },
        "covenant_slashing_sigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.CovenantAdaptorSignatures"
          },
          "description": "covenant_slashing_sigs is a list of adaptor signatures on the\nunbonding slashing tx by each covenant member\nIt will be a part of the witness for the staking tx output."
        },
        "delegator_unbonding_info_response": {
          "$ref": "#/definitions/babylon.btcstaking.v1.DelegatorUnbondingInfoResponse",
          "title": "btc_undelegation_info contains all necessary info about the transaction\nwhich spent the staking output"
        }
      },
      "title": "BTCUndelegationResponse provides all necessary info about the undeleagation"
    },
    "babylon.btcstaking.v1.CovenantAdaptorSignatures": {
      "type": "object",
      "properties": {
        "cov_pk": {
          "type": "string",
          "format": "byte",
          "title": "cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature"
        },
        "adaptor_sigs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key"
        }
      },
      "title": "CovenantAdaptorSignatures is a list adaptor signatures signed by the\ncovenant with different finality provider's public keys as encryption keys"
    },
    "babylon.btcstaking.v1.DelegatorUnbondingInfoResponse": {
      "type": "object",
      "properties": {
        "spend_stake_tx_hex": {
          "type": "string",
          "title": "spend_stake_tx_hex is the transaction which spent the staking output. It is\nfilled only if the spend_stake_tx_hex is different than the unbonding_tx_hex"
        }
      },
      "title": "DelegatorUnbondingInfoResponse provides all necessary info about transaction\nwhich spent the staking output"
    },
    "babylon.btcstaking.v1.FinalityProviderResponse": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
          "description": "description defines the description terms for the finality provider."
        },
        "commission": {
          "type": "string",
          "description": "commission defines the commission rate of the finality provider."
        },
        "addr": {
          "type": "string",
          "description": "addr is the address to receive commission from delegations."
        },
        "btc_pk": {
          "type": "string",
          "format": "byte",
          "title": "btc_pk is the Bitcoin secp256k1 PK of this finality provider\nthe PK follows encoding in BIP-340 spec"
        },
        "pop": {
          "$ref": "#/definitions/babylon.btcstaking.v1.ProofOfPossessionBTC",
          "description": "pop is the proof of possession of the BTC_PK by the fp addr.\nEssentially is the signature where the BTC SK sigs the fp addr."
        },
        "slashed_babylon_height": {
          "type": "string",
          "format": "uint64",
          "title": "slashed_babylon_height indicates the Babylon height when\nthe finality provider is slashed.\nif it's 0 then the finality provider is not slashed"
        },
        "slashed_btc_height": {
          "type": "integer",
          "format": "int64",
          "title": "slashed_btc_height indicates the BTC height when\nthe finality provider is slashed.\nif it's 0 then the finality provider is not slashed"
        },
        "height": {
          "type": "string",
          "format": "uint64",
          "title": "height is the queried Babylon height"
        },
        "jailed": {
          "type": "boolean",
          "title": "jailed defines whether the finality provider is jailed"
        },
        "highest_voted_height": {
          "type": "integer",
          "format": "int64",
          "title": "highest_voted_height is the highest height for which the\nfinality provider has voted"
        }
      },
      "description": "FinalityProviderResponse defines a finality provider with voting power information."
    },
    "babylon.btcstaking.v1.Params": {
      "type": "object",
      "properties": {
        "covenant_pks": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "PARAMETERS COVERING STAKING\ncovenant_pks is the list of public keys held by the covenant committee\neach PK follows encoding in BIP-340 spec on Bitcoin"
        },
        "covenant_quorum": {
          "type": "integer",
          "format": "int64",
          "title": "covenant_quorum is the minimum number of signatures needed for the covenant\nmultisignature"
        },
        "min_staking_value_sat": {
          "type": "string",
          "format": "int64",
          "title": "min_staking_value_sat is the minimum of satoshis locked in staking output"
        },
        "max_staking_value_sat": {
          "type": "string",
          "format": "int64",
          "title": "max_staking_value_sat is the maximum of satoshis locked in staking output"
        },
        "min_staking_time_blocks": {
          "type": "integer",
          "format": "int64",
          "title": "min_staking_time is the minimum lock time specified in staking output script"
        },
        "max_staking_time_blocks": {
          "type": "integer",
          "format": "int64",
          "title": "max_staking_time_blocks is the maximum lock time time specified in staking output script"
        },
        "slashing_pk_script": {
          "type": "string",
          "format": "byte",
          "title": "PARAMETERS COVERING SLASHING\nslashing_pk_script is the pk_script expected in slashing output ie. the first\noutput of slashing transaction"
        },
        "min_slashing_tx_fee_sat": {
          "type": "string",
          "format": "int64",
          "title": "min_slashing_tx_fee_sat is the minimum amount of tx fee (quantified\nin Satoshi) needed for the pre-signed slashing tx. It covers both:\nstaking slashing transaction and unbonding slashing transaction"
        },
        "slashing_rate": {
          "type": "string",
          "title": "slashing_rate determines the portion of the staked amount to be slashed,\nexpressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2 decimal\nplaces"
        },
        "unbonding_time_blocks": {
          "type": "integer",
          "format": "int64",
          "title": "PARAMETERS COVERING UNBONDING\nunbonding_time is the exact unbonding time required from unbonding transaction\nit must be larger than `checkpoint_finalization_timeout` from `btccheckpoint` module"
        },
        "unbonding_fee_sat": {
          "type": "string",
          "format": "int64",
          "title": "unbonding_fee exact fee required for unbonding transaction"
        },
        "min_commission_rate": {
          "type": "string",
          "title": "PARAMETERS COVERING FINALITY PROVIDERS\nmin_commission_rate is the chain-wide minimum commission rate that a finality provider\ncan charge their delegators expressed as a decimal (e.g., 0.5 for 50%). Maximal precion\nis 2 decimal places"
        },
        "delegation_creation_base_gas_fee": {
          "type": "string",
          "format": "uint64",
          "title": "base gas fee for delegation creation"
        },
        "allow_list_expiration_height": {
          "type": "string",
          "format": "uint64",
          "title": "allow_list_expiration_height is the height at which the allow list expires\ni.e all staking transactions are allowed to enter Babylon chain afterwards\nsetting it to 0 means allow list is disabled"
        },
        "btc_activation_height": {
          "type": "integer",
          "format": "int64",
          "title": "btc_activation_height is the btc height from which parameters are activated (inclusive)"
        }
      },
      "description": "Params defines the parameters for the module."
    },
    "babylon.btcstaking.v1.ProofOfPossessionBTC": {
      "type": "object",
      "properties": {
        "btc_sig_type": {
          "$ref": "#/definitions/babylon.btcstaking.v1.BTCSigType",
          "title": "btc_sig_type indicates the type of btc_sig in the pop"
        },
        "btc_sig": {
          "type": "string",
          "format": "byte",
          "title": "btc_sig is the signature generated via sign(sk_btc, babylon_staker_address)\nthe signature follows encoding in either BIP-340 spec or BIP-322 spec"
        }
      },
      "title": "ProofOfPossessionBTC is the proof of possession that a Babylon\naddress and a Bitcoin secp256k1 secret key are held by the same\nperson"
    },
    "babylon.btcstaking.v1.QueryBTCDelegationResponse": {
      "type": "object",
      "properties": {
        "btc_delegation": {
          "$ref": "#/definitions/babylon.btcstaking.v1.BTCDelegationResponse",
          "description": "BTCDelegation represents the client needed information of an BTCDelegation."
        }
      },
      "title": "QueryBTCDelegationResponse is response type matching QueryBTCDelegationRequest\nand containing BTC delegation information"
    },
    "babylon.btcstaking.v1.QueryBTCDelegationsResponse": {
      "type": "object",
      "properties": {
        "btc_delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.BTCDelegationResponse"
          },
          "title": "btc_delegations contains all the queried BTC delegations under the given status"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryBTCDelegationsResponse is the response type for the\nQuery/BTCDelegations RPC method."
    },
    "babylon.btcstaking.v1.QueryFinalityProviderDelegationsResponse": {
      "type": "object",
      "properties": {
        "btc_delegator_delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.BTCDelegatorDelegationsResponse"
          },
          "description": "btc_delegator_delegations contains all the queried BTC delegations."
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryFinalityProviderDelegationsResponse is the response type for the\nQuery/FinalityProviderDelegations RPC method."
    },
    "babylon.btcstaking.v1.QueryFinalityProviderResponse": {
      "type": "object",
      "properties": {
        "finality_provider": {
          "$ref": "#/definitions/babylon.btcstaking.v1.FinalityProviderResponse",
          "title": "finality_provider contains the FinalityProvider"
        }
      },
      "title": "QueryFinalityProviderResponse contains information about a finality provider"
    },
    "babylon.btcstaking.v1.QueryFinalityProvidersResponse": {
      "type": "object",
      "properties": {
        "finality_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/babylon.btcstaking.v1.FinalityProviderResponse"
          },
          "title": "finality_providers contains all the finality providers"
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "description": "QueryFinalityProvidersResponse is the response type for the\nQuery/FinalityProviders RPC method."
    },
    "babylon.btcstaking.v1.QueryParamsByBTCHeightResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/babylon.btcstaking.v1.Params",
          "description": "params holds all the parameters of this module."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "title": "version is the version of the params for the given BTC height"
        }
      },
      "description": "QueryParamsByBTCHeightResponse is response type for the Query/QueryParamsByBTCHeightResponse RPC method."
    },
    "babylon.btcstaking.v1.QueryParamsByVersionResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/babylon.btcstaking.v1.Params",
          "description": "params holds all the parameters of this module."
        }
      },
      "description": "QueryParamsResponse is response type for the Query/Params RPC method."
    },
    "babylon.btcstaking.v1.QueryParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/babylon.btcstaking.v1.Params",
          "description": "params holds all the parameters of this module."
        }
      },
      "description": "QueryParamsResponse is response type for the Query/Params RPC method."
    },
    "babylon.btcstaking.v1.SignatureInfo": {
      "type": "object",
      "properties": {
        "pk": {
          "type": "string",
          "format": "byte"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK"
    },
    "cosmos.base.query.v1beta1.PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "count_total": {
          "type": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
        },
        "reverse": {
          "type": "boolean",
          "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "cosmos.base.query.v1beta1.PageResponse": {
      "type": "object",
      "properties": {
        "next_key": {
          "type": "string",
          "format": "byte",
          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results."
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
    },
    "cosmos.staking.v1beta1.Description": {
      "type": "object",
      "properties": {
        "moniker": {
          "type": "string",
          "description": "moniker defines a human-readable name for the validator."
        },
        "identity": {
          "type": "string",
          "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
        },
        "website": {
          "type": "string",
          "description": "website defines an optional website link."
        },
        "security_contact": {
          "type": "string",
          "description": "security_contact defines an optional email for security contact."
        },
        "details": {
          "type": "string",
          "description": "details define other optional details."
        }
      },
      "description": "Description defines a validator description."
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
