// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/costaking/v1/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCostakersAddRewards is the event emitted when new rewards are given to costakers.
type EventCostakersAddRewards struct {
	// AddRewards are the coins added to the current coostaker reward tracker pool.
	AddRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=add_rewards,json=addRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"add_rewards"`
	// CurrentRewards are the reward coins available for this period.
	CurrentRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=current_rewards,json=currentRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_rewards"`
	// CurrentPeriod is the period where the rewards are being added.
	CurrentPeriod uint64 `protobuf:"varint,3,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`
	// CurrentTotalScore is the total amount of score in which the rewards will be
	// equaly distributed.
	CurrentTotalScore cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=current_total_score,json=currentTotalScore,proto3,customtype=cosmossdk.io/math.Int" json:"current_total_score"`
}

func (m *EventCostakersAddRewards) Reset()         { *m = EventCostakersAddRewards{} }
func (m *EventCostakersAddRewards) String() string { return proto.CompactTextString(m) }
func (*EventCostakersAddRewards) ProtoMessage()    {}
func (*EventCostakersAddRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f93d1d46922f20e, []int{0}
}
func (m *EventCostakersAddRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCostakersAddRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCostakersAddRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCostakersAddRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCostakersAddRewards.Merge(m, src)
}
func (m *EventCostakersAddRewards) XXX_Size() int {
	return m.Size()
}
func (m *EventCostakersAddRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCostakersAddRewards.DiscardUnknown(m)
}

var xxx_messageInfo_EventCostakersAddRewards proto.InternalMessageInfo

func (m *EventCostakersAddRewards) GetAddRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AddRewards
	}
	return nil
}

func (m *EventCostakersAddRewards) GetCurrentRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentRewards
	}
	return nil
}

func (m *EventCostakersAddRewards) GetCurrentPeriod() uint64 {
	if m != nil {
		return m.CurrentPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*EventCostakersAddRewards)(nil), "babylon.costaking.v1.EventCostakersAddRewards")
}

func init() { proto.RegisterFile("babylon/costaking/v1/events.proto", fileDescriptor_1f93d1d46922f20e) }

var fileDescriptor_1f93d1d46922f20e = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0xed, 0x82, 0x7a, 0x58, 0xfa, 0x47, 0xa5, 0x54, 0x32, 0x1c, 0x0c, 0xad, 0x54, 0xc9,
	0x52, 0xc5, 0x6e, 0xdd, 0x56, 0xbd, 0x17, 0xd4, 0x03, 0x37, 0xe4, 0xf6, 0xd4, 0x1e, 0xac, 0xb5,
	0x77, 0x65, 0x2c, 0xcc, 0x0e, 0xda, 0x5d, 0x9c, 0x70, 0xcd, 0x13, 0xe4, 0x39, 0x72, 0xce, 0x43,
	0x70, 0x44, 0x39, 0x45, 0x39, 0x90, 0x08, 0x5e, 0x24, 0xb2, 0xbd, 0x26, 0x3c, 0x40, 0x4e, 0xf6,
	0xf7, 0xf9, 0x9b, 0xf9, 0xcd, 0xc8, 0x83, 0x3e, 0x46, 0x34, 0x5a, 0x67, 0x20, 0x48, 0x0c, 0x4a,
	0xd3, 0x79, 0x2a, 0x12, 0x92, 0xfb, 0x84, 0xe7, 0x5c, 0x68, 0x85, 0x97, 0x12, 0x34, 0xb4, 0x3b,
	0x26, 0x82, 0x8f, 0x11, 0x9c, 0xfb, 0xbd, 0x6e, 0x0c, 0x6a, 0x01, 0x2a, 0x2c, 0x33, 0xa4, 0x12,
	0x55, 0x41, 0xcf, 0xad, 0x14, 0x89, 0xa8, 0xe2, 0x24, 0xf7, 0x23, 0xae, 0xa9, 0x4f, 0x62, 0x48,
	0x85, 0xf9, 0xde, 0x49, 0x20, 0x81, 0xaa, 0xae, 0x78, 0xab, 0xdc, 0x4f, 0x17, 0x0d, 0xe4, 0xfc,
	0x2e, 0xb8, 0xe3, 0x12, 0xc3, 0xa5, 0xfa, 0xc5, 0x58, 0xc0, 0xcf, 0xa8, 0x64, 0xaa, 0x9d, 0xa1,
	0x16, 0x65, 0x2c, 0x94, 0x95, 0x74, 0xec, 0x41, 0xc3, 0x6b, 0x7d, 0xeb, 0x62, 0x83, 0x2d, 0x40,
	0xd8, 0x80, 0xf0, 0x18, 0x52, 0x31, 0xfa, 0xba, 0xd9, 0xf5, 0xad, 0xab, 0xfb, 0xbe, 0x97, 0xa4,
	0x7a, 0xb6, 0x8a, 0x70, 0x0c, 0x0b, 0x33, 0xa3, 0x79, 0x0c, 0x15, 0x9b, 0x13, 0xbd, 0x5e, 0x72,
	0x55, 0x16, 0xa8, 0x00, 0xd1, 0x27, 0x9a, 0x46, 0x6f, 0xe3, 0x95, 0x94, 0x5c, 0xe8, 0x23, 0xf1,
	0xc5, 0xf3, 0x13, 0xdf, 0x18, 0x46, 0x4d, 0xfd, 0x8c, 0x6a, 0x27, 0x5c, 0x72, 0x99, 0x02, 0x73,
	0x1a, 0x03, 0xdb, 0x6b, 0x06, 0xaf, 0x8d, 0x3b, 0x2d, 0xcd, 0xf6, 0x7f, 0xf4, 0xbe, 0x8e, 0x69,
	0xd0, 0x34, 0x0b, 0x55, 0x0c, 0x92, 0x3b, 0xcd, 0x81, 0xed, 0xbd, 0x1a, 0x7d, 0x29, 0xa6, 0xb8,
	0xdb, 0xf5, 0x3f, 0x54, 0x4c, 0xc5, 0xe6, 0x38, 0x05, 0xb2, 0xa0, 0x7a, 0x86, 0x27, 0x42, 0xdf,
	0x5c, 0x0f, 0x91, 0x59, 0x60, 0x22, 0x74, 0xf0, 0xce, 0xf4, 0xf9, 0x5b, 0xb4, 0xf9, 0x53, 0x74,
	0x19, 0x4d, 0x37, 0x7b, 0xd7, 0xde, 0xee, 0x5d, 0xfb, 0x61, 0xef, 0xda, 0x97, 0x07, 0xd7, 0xda,
	0x1e, 0x5c, 0xeb, 0xf6, 0xe0, 0x5a, 0xff, 0x7e, 0x9e, 0xec, 0x65, 0x0e, 0x22, 0xa3, 0x91, 0x1a,
	0xa6, 0x50, 0x4b, 0x92, 0xff, 0x20, 0xe7, 0x27, 0x77, 0x54, 0xee, 0x1a, 0xbd, 0x2c, 0xff, 0xee,
	0xf7, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xe3, 0x3a, 0x01, 0x69, 0x02, 0x00, 0x00,
}

func (m *EventCostakersAddRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCostakersAddRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCostakersAddRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentTotalScore.Size()
		i -= size
		if _, err := m.CurrentTotalScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.CurrentPeriod != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentPeriod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AddRewards) > 0 {
		for iNdEx := len(m.AddRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCostakersAddRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddRewards) > 0 {
		for _, e := range m.AddRewards {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.CurrentPeriod != 0 {
		n += 1 + sovEvents(uint64(m.CurrentPeriod))
	}
	l = m.CurrentTotalScore.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCostakersAddRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCostakersAddRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCostakersAddRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddRewards = append(m.AddRewards, types.Coin{})
			if err := m.AddRewards[len(m.AddRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.Coin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPeriod", wireType)
			}
			m.CurrentPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTotalScore", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentTotalScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
