// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/costaking/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// Params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCostakerRewardsTrackerRequest is the request type for the
// Query/CostakerRewardsTracker RPC method.
type QueryCostakerRewardsTrackerRequest struct {
	// costakerAddress defines the delegator address to query for.
	CostakerAddress string `protobuf:"bytes,1,opt,name=costaker_address,json=costakerAddress,proto3" json:"costaker_address,omitempty"`
}

func (m *QueryCostakerRewardsTrackerRequest) Reset()         { *m = QueryCostakerRewardsTrackerRequest{} }
func (m *QueryCostakerRewardsTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCostakerRewardsTrackerRequest) ProtoMessage()    {}
func (*QueryCostakerRewardsTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{2}
}
func (m *QueryCostakerRewardsTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCostakerRewardsTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCostakerRewardsTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCostakerRewardsTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCostakerRewardsTrackerRequest.Merge(m, src)
}
func (m *QueryCostakerRewardsTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCostakerRewardsTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCostakerRewardsTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCostakerRewardsTrackerRequest proto.InternalMessageInfo

// QueryCostakerRewardsTrackerResponse is the response type for the
// Query/CostakerRewardsTracker RPC method.
type QueryCostakerRewardsTrackerResponse struct {
	// StartPeriodCumulativeReward the starting period the costaker
	// made his last withdraw of costaking rewards or modified his active staking
	// amount of satoshis or baby.
	StartPeriodCumulativeReward uint64 `protobuf:"varint,1,opt,name=start_period_cumulative_reward,json=startPeriodCumulativeReward,proto3" json:"start_period_cumulative_reward,omitempty"`
	// ActiveSatoshis is the total amount of active satoshi delegated
	// from this costaker babylon address.
	ActiveSatoshis cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=active_satoshis,json=activeSatoshis,proto3,customtype=cosmossdk.io/math.Int" json:"active_satoshis"`
	// ActiveBaby is the total amount of active baby delegated
	// from this costaker babylon address.
	ActiveBaby cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=active_baby,json=activeBaby,proto3,customtype=cosmossdk.io/math.Int" json:"active_baby"`
	// TotalScore is the total amount of calculated score
	// of this costaker.
	TotalScore cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_score,json=totalScore,proto3,customtype=cosmossdk.io/math.Int" json:"total_score"`
}

func (m *QueryCostakerRewardsTrackerResponse) Reset()         { *m = QueryCostakerRewardsTrackerResponse{} }
func (m *QueryCostakerRewardsTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCostakerRewardsTrackerResponse) ProtoMessage()    {}
func (*QueryCostakerRewardsTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{3}
}
func (m *QueryCostakerRewardsTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCostakerRewardsTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCostakerRewardsTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCostakerRewardsTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCostakerRewardsTrackerResponse.Merge(m, src)
}
func (m *QueryCostakerRewardsTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCostakerRewardsTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCostakerRewardsTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCostakerRewardsTrackerResponse proto.InternalMessageInfo

// QueryCurrentRewardsRequest is request type for the Query/CurrentRewards RPC
// method.
type QueryCurrentRewardsRequest struct {
}

func (m *QueryCurrentRewardsRequest) Reset()         { *m = QueryCurrentRewardsRequest{} }
func (m *QueryCurrentRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentRewardsRequest) ProtoMessage()    {}
func (*QueryCurrentRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{4}
}
func (m *QueryCurrentRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentRewardsRequest.Merge(m, src)
}
func (m *QueryCurrentRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentRewardsRequest proto.InternalMessageInfo

// QueryCurrentRewardsResponse is response type for the Query/CurrentRewards RPC
// method.
type QueryCurrentRewardsResponse struct {
	// Rewards is the current rewards for the single pool of rewards for all the
	// costakers for the whole chain. If some action happens of satoshi or baby
	// staked or is unbonded or withdraw of the rewards available, this current
	// period is sent to an HistoricalRewards and a new period is created and
	// the rewards property is zerod out.
	// Note: This rewards have increased simulated decimals (10^20) to increase
	// precision when calculating the rewards per score and protect against
	// math overflow issues. The decimals are removed prior to sending out
	// to the incentives gauge.
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
	// Period stores the current period that serves as a reference for
	// creating new historical rewards and correlate with
	// CostakerRewardsTracker StartPeriodCumulativeReward.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// TotalScore is the total amount of score calulated over
	// all the stakers score in the chain.
	TotalScore cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_score,json=totalScore,proto3,customtype=cosmossdk.io/math.Int" json:"total_score"`
}

func (m *QueryCurrentRewardsResponse) Reset()         { *m = QueryCurrentRewardsResponse{} }
func (m *QueryCurrentRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentRewardsResponse) ProtoMessage()    {}
func (*QueryCurrentRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{5}
}
func (m *QueryCurrentRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentRewardsResponse.Merge(m, src)
}
func (m *QueryCurrentRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentRewardsResponse proto.InternalMessageInfo

// QueryHistoricalRewardsRequest is request type for the Query/HistoricalRewards
// RPC method.
type QueryHistoricalRewardsRequest struct {
	// Period is the historical period which the HistoricalRewards was stored.
	Period uint64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *QueryHistoricalRewardsRequest) Reset()         { *m = QueryHistoricalRewardsRequest{} }
func (m *QueryHistoricalRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalRewardsRequest) ProtoMessage()    {}
func (*QueryHistoricalRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{6}
}
func (m *QueryHistoricalRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalRewardsRequest.Merge(m, src)
}
func (m *QueryHistoricalRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalRewardsRequest proto.InternalMessageInfo

// QueryHistoricalRewardsResponse is response type for the
// Query/HistoricalRewards RPC method.
type QueryHistoricalRewardsResponse struct {
	// CumulativeRewardsPerScore is the cumulative rewards of that period.
	// This coins will aways increase the value, never reduced, it always
	// accumulates and when the cumulative rewards will be used to distribute
	// rewards, 2 periods will be loaded, calculate the difference and multiplied
	// by the total score amount of each staker
	CumulativeRewardsPerScore github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=cumulative_rewards_per_score,json=cumulativeRewardsPerScore,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"cumulative_rewards_per_score"`
}

func (m *QueryHistoricalRewardsResponse) Reset()         { *m = QueryHistoricalRewardsResponse{} }
func (m *QueryHistoricalRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalRewardsResponse) ProtoMessage()    {}
func (*QueryHistoricalRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e71aa2f7fa447c3, []int{7}
}
func (m *QueryHistoricalRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalRewardsResponse.Merge(m, src)
}
func (m *QueryHistoricalRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalRewardsResponse proto.InternalMessageInfo

func (m *QueryHistoricalRewardsResponse) GetCumulativeRewardsPerScore() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CumulativeRewardsPerScore
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.costaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.costaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCostakerRewardsTrackerRequest)(nil), "babylon.costaking.v1.QueryCostakerRewardsTrackerRequest")
	proto.RegisterType((*QueryCostakerRewardsTrackerResponse)(nil), "babylon.costaking.v1.QueryCostakerRewardsTrackerResponse")
	proto.RegisterType((*QueryCurrentRewardsRequest)(nil), "babylon.costaking.v1.QueryCurrentRewardsRequest")
	proto.RegisterType((*QueryCurrentRewardsResponse)(nil), "babylon.costaking.v1.QueryCurrentRewardsResponse")
	proto.RegisterType((*QueryHistoricalRewardsRequest)(nil), "babylon.costaking.v1.QueryHistoricalRewardsRequest")
	proto.RegisterType((*QueryHistoricalRewardsResponse)(nil), "babylon.costaking.v1.QueryHistoricalRewardsResponse")
}

func init() { proto.RegisterFile("babylon/costaking/v1/query.proto", fileDescriptor_7e71aa2f7fa447c3) }

var fileDescriptor_7e71aa2f7fa447c3 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x31, 0x4f, 0x1b, 0x49,
	0x18, 0xf5, 0x82, 0xf1, 0xdd, 0x0d, 0x27, 0xb8, 0x9b, 0xf3, 0x21, 0x63, 0x7c, 0x6b, 0xe4, 0x23,
	0x8a, 0xa3, 0xc8, 0x3b, 0x18, 0x50, 0x14, 0xe8, 0xb0, 0x53, 0x84, 0x28, 0x85, 0x59, 0xa8, 0xd2,
	0x58, 0xb3, 0xeb, 0x91, 0xbd, 0xc2, 0xde, 0x31, 0x33, 0x63, 0x27, 0x16, 0xa2, 0x49, 0x9a, 0x14,
	0x29, 0x22, 0xe5, 0x0f, 0x50, 0xa4, 0x4a, 0x93, 0x86, 0x26, 0xff, 0x80, 0x22, 0x05, 0x22, 0x4d,
	0x92, 0x82, 0x44, 0x10, 0x45, 0xf9, 0x01, 0xf9, 0x01, 0xd1, 0xce, 0x8c, 0x1d, 0x03, 0x8b, 0x15,
	0x50, 0x52, 0xc1, 0xce, 0xbc, 0xf7, 0xe6, 0x7d, 0x6f, 0xbe, 0xf9, 0x0c, 0xa6, 0x1d, 0xec, 0x74,
	0xea, 0xd4, 0x47, 0x2e, 0xe5, 0x02, 0x6f, 0x78, 0x7e, 0x15, 0xb5, 0xf3, 0x68, 0xb3, 0x45, 0x58,
	0xc7, 0x6a, 0x32, 0x2a, 0x28, 0x8c, 0x6b, 0x84, 0xd5, 0x43, 0x58, 0xed, 0x7c, 0x32, 0x5e, 0xa5,
	0x55, 0x2a, 0x01, 0x28, 0xf8, 0x4f, 0x61, 0x93, 0xa9, 0x2a, 0xa5, 0xd5, 0x3a, 0x41, 0xb8, 0xe9,
	0x21, 0xec, 0xfb, 0x54, 0x60, 0xe1, 0x51, 0x9f, 0xeb, 0xdd, 0x49, 0x97, 0xf2, 0x06, 0xe5, 0x65,
	0x45, 0x53, 0x1f, 0x7a, 0x6b, 0x26, 0xd4, 0xc6, 0xf7, 0x13, 0x15, 0xca, 0x54, 0x1c, 0xe4, 0x60,
	0x4e, 0x50, 0x3b, 0xef, 0x10, 0x81, 0x03, 0x90, 0xe7, 0xab, 0xfd, 0x4c, 0x1c, 0xc0, 0xd5, 0xc0,
	0x79, 0x09, 0x33, 0xdc, 0xe0, 0x36, 0xd9, 0x6c, 0x11, 0x2e, 0x32, 0xab, 0xe0, 0x9f, 0x13, 0xab,
	0xbc, 0x49, 0x7d, 0x4e, 0xe0, 0x12, 0x88, 0x35, 0xe5, 0x4a, 0xc2, 0x98, 0x36, 0xb2, 0xa3, 0x73,
	0x29, 0x2b, 0xac, 0x50, 0x4b, 0xb1, 0x0a, 0xd1, 0xbd, 0xc3, 0x74, 0xc4, 0xd6, 0x8c, 0x0c, 0x07,
	0x19, 0x29, 0x59, 0x94, 0x48, 0xc2, 0x6c, 0x72, 0x1f, 0xb3, 0x0a, 0x5f, 0x67, 0xd8, 0x95, 0x5f,
	0xf2, 0x60, 0x58, 0x04, 0x7f, 0xb9, 0x1a, 0x50, 0xc6, 0x95, 0x0a, 0x23, 0x5c, 0x9d, 0xf5, 0x47,
	0x21, 0x71, 0xb0, 0x9b, 0x8b, 0xeb, 0x00, 0x96, 0xd5, 0xce, 0x9a, 0x60, 0x9e, 0x5f, 0xb5, 0xc7,
	0xbb, 0x0c, 0xbd, 0xbc, 0xf4, 0xfb, 0xe3, 0x9d, 0x74, 0xe4, 0xcb, 0x4e, 0x3a, 0x92, 0xf9, 0x3c,
	0x04, 0xfe, 0x1f, 0x78, 0xaa, 0x2e, 0xac, 0x08, 0x4c, 0x2e, 0x30, 0x13, 0xe5, 0x26, 0x61, 0x1e,
	0xad, 0x94, 0xdd, 0x56, 0xa3, 0x55, 0xc7, 0xc2, 0x6b, 0x93, 0x32, 0x93, 0x0c, 0x69, 0x22, 0x6a,
	0x4f, 0x49, 0x54, 0x49, 0x82, 0x8a, 0x3d, 0x8c, 0x12, 0x85, 0xeb, 0x60, 0x1c, 0xbb, 0x92, 0xc3,
	0xb1, 0xa0, 0xbc, 0xe6, 0xf1, 0xc4, 0xd0, 0xb4, 0x91, 0xfd, 0xb3, 0x70, 0x3d, 0x08, 0xe2, 0xfd,
	0x61, 0xfa, 0x5f, 0x65, 0x9f, 0x57, 0x36, 0x2c, 0x8f, 0xa2, 0x06, 0x16, 0x35, 0x6b, 0xc5, 0x17,
	0x07, 0xbb, 0x39, 0xa0, 0xeb, 0x5a, 0xf1, 0x85, 0x3d, 0xa6, 0x34, 0xd6, 0xb4, 0x04, 0xbc, 0x0b,
	0x46, 0xb5, 0x6a, 0x90, 0x75, 0x62, 0xf8, 0xe2, 0x8a, 0x40, 0xf1, 0x0b, 0xd8, 0xe9, 0x04, 0x6a,
	0x82, 0x0a, 0x5c, 0x2f, 0x73, 0x97, 0x32, 0x92, 0x88, 0x5e, 0x42, 0x4d, 0xf2, 0xd7, 0x02, 0x7a,
	0x5f, 0xd0, 0x29, 0x90, 0x54, 0x39, 0xb7, 0x18, 0x23, 0xbe, 0xd0, 0x31, 0x77, 0xdb, 0xe9, 0xab,
	0x01, 0xa6, 0x42, 0xb7, 0x75, 0xfc, 0x04, 0xfc, 0xa6, 0x62, 0x0e, 0x2e, 0x7b, 0x38, 0x3b, 0x3a,
	0x37, 0x69, 0xe9, 0x13, 0x83, 0xb6, 0xb5, 0x74, 0xdb, 0x5a, 0x45, 0xea, 0xf9, 0x85, 0xd9, 0xc0,
	0xec, 0x8b, 0x0f, 0xe9, 0x6c, 0xd5, 0x13, 0xb5, 0x96, 0x63, 0xb9, 0xb4, 0xa1, 0xdf, 0x85, 0xfe,
	0x93, 0xe3, 0x95, 0x0d, 0x24, 0x3a, 0x4d, 0xc2, 0x25, 0x81, 0xdb, 0x5d, 0x6d, 0x38, 0x01, 0x62,
	0xea, 0x7e, 0xe5, 0xbd, 0x44, 0x6d, 0xfd, 0x75, 0x3a, 0x94, 0xe1, 0x9f, 0x15, 0xca, 0x32, 0xf8,
	0x4f, 0x56, 0x7d, 0xdb, 0xe3, 0x82, 0x32, 0xcf, 0xc5, 0xf5, 0x93, 0xb9, 0xf4, 0x19, 0x32, 0xfa,
	0x0d, 0xf5, 0x49, 0xbc, 0x34, 0x80, 0x79, 0x9e, 0x86, 0x0e, 0xef, 0x89, 0x01, 0x52, 0x67, 0xfa,
	0x95, 0x07, 0x9d, 0xac, 0xeb, 0xf9, 0x05, 0x91, 0x4e, 0xba, 0xa7, 0x9a, 0x9f, 0x97, 0x08, 0x93,
	0xe5, 0xcf, 0xbd, 0x1e, 0x01, 0x23, 0xd2, 0x31, 0x7c, 0x64, 0x80, 0x98, 0x1a, 0x05, 0x30, 0x1b,
	0x3e, 0x28, 0xce, 0x4e, 0x9e, 0xe4, 0xb5, 0x1f, 0x40, 0xaa, 0xc2, 0x33, 0x33, 0x0f, 0xdf, 0x7c,
	0x7a, 0x36, 0x64, 0xc2, 0x14, 0x0a, 0x9d, 0x84, 0x6a, 0xee, 0xc0, 0x77, 0x06, 0x98, 0x08, 0x7f,
	0xfd, 0xf0, 0xe6, 0x80, 0xb3, 0x06, 0x8e, 0xa9, 0xe4, 0xe2, 0x25, 0x98, 0xda, 0xf5, 0x1d, 0xe9,
	0xfa, 0x16, 0x2c, 0xa0, 0x01, 0xf3, 0x9b, 0x30, 0x8e, 0xb6, 0x4e, 0x0f, 0xc2, 0x6d, 0xd4, 0xbd,
	0x5b, 0xa1, 0x0b, 0x78, 0x65, 0x80, 0xbf, 0xcf, 0x34, 0x06, 0x9c, 0x1f, 0x60, 0xee, 0xbc, 0x56,
	0x4c, 0x2e, 0x5c, 0x8c, 0xa4, 0x8b, 0x59, 0x94, 0xc5, 0xcc, 0xc3, 0x7c, 0x78, 0x31, 0xb5, 0x1e,
	0xb1, 0xdb, 0x96, 0x68, 0x4b, 0xb5, 0xf8, 0x36, 0x7c, 0x6e, 0x80, 0xb1, 0x93, 0xe3, 0x00, 0xce,
	0x0e, 0x4a, 0x35, 0x6c, 0xb0, 0x24, 0xf3, 0x17, 0x60, 0x68, 0xcb, 0x39, 0x69, 0xf9, 0x2a, 0xbc,
	0x72, 0x4e, 0xfe, 0x8a, 0xd5, 0xf5, 0x5b, 0x28, 0xed, 0x1d, 0x99, 0xc6, 0xfe, 0x91, 0x69, 0x7c,
	0x3c, 0x32, 0x8d, 0xa7, 0xc7, 0x66, 0x64, 0xff, 0xd8, 0x8c, 0xbc, 0x3d, 0x36, 0x23, 0xf7, 0x6e,
	0xf4, 0xbd, 0x16, 0x2d, 0x55, 0xc7, 0x0e, 0xcf, 0x79, 0xb4, 0xa7, 0xdc, 0x5e, 0x40, 0x0f, 0xfa,
	0xe4, 0xe5, 0x0b, 0x72, 0x62, 0xf2, 0x87, 0x77, 0xfe, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f,
	0xd5, 0xf7, 0x3c, 0x47, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CostakerRewardsTracker queries the costaker reward tracker.
	CostakerRewardsTracker(ctx context.Context, in *QueryCostakerRewardsTrackerRequest, opts ...grpc.CallOption) (*QueryCostakerRewardsTrackerResponse, error)
	// HistoricalRewards queries the historical rewards structure per period for
	// costaking single pool.
	HistoricalRewards(ctx context.Context, in *QueryHistoricalRewardsRequest, opts ...grpc.CallOption) (*QueryHistoricalRewardsResponse, error)
	// CurrentRewards queries the current rewards structure for costaking single
	// pool.
	CurrentRewards(ctx context.Context, in *QueryCurrentRewardsRequest, opts ...grpc.CallOption) (*QueryCurrentRewardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.costaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CostakerRewardsTracker(ctx context.Context, in *QueryCostakerRewardsTrackerRequest, opts ...grpc.CallOption) (*QueryCostakerRewardsTrackerResponse, error) {
	out := new(QueryCostakerRewardsTrackerResponse)
	err := c.cc.Invoke(ctx, "/babylon.costaking.v1.Query/CostakerRewardsTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalRewards(ctx context.Context, in *QueryHistoricalRewardsRequest, opts ...grpc.CallOption) (*QueryHistoricalRewardsResponse, error) {
	out := new(QueryHistoricalRewardsResponse)
	err := c.cc.Invoke(ctx, "/babylon.costaking.v1.Query/HistoricalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentRewards(ctx context.Context, in *QueryCurrentRewardsRequest, opts ...grpc.CallOption) (*QueryCurrentRewardsResponse, error) {
	out := new(QueryCurrentRewardsResponse)
	err := c.cc.Invoke(ctx, "/babylon.costaking.v1.Query/CurrentRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// CostakerRewardsTracker queries the costaker reward tracker.
	CostakerRewardsTracker(context.Context, *QueryCostakerRewardsTrackerRequest) (*QueryCostakerRewardsTrackerResponse, error)
	// HistoricalRewards queries the historical rewards structure per period for
	// costaking single pool.
	HistoricalRewards(context.Context, *QueryHistoricalRewardsRequest) (*QueryHistoricalRewardsResponse, error)
	// CurrentRewards queries the current rewards structure for costaking single
	// pool.
	CurrentRewards(context.Context, *QueryCurrentRewardsRequest) (*QueryCurrentRewardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CostakerRewardsTracker(ctx context.Context, req *QueryCostakerRewardsTrackerRequest) (*QueryCostakerRewardsTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CostakerRewardsTracker not implemented")
}
func (*UnimplementedQueryServer) HistoricalRewards(ctx context.Context, req *QueryHistoricalRewardsRequest) (*QueryHistoricalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalRewards not implemented")
}
func (*UnimplementedQueryServer) CurrentRewards(ctx context.Context, req *QueryCurrentRewardsRequest) (*QueryCurrentRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentRewards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.costaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CostakerRewardsTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCostakerRewardsTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CostakerRewardsTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.costaking.v1.Query/CostakerRewardsTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CostakerRewardsTracker(ctx, req.(*QueryCostakerRewardsTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.costaking.v1.Query/HistoricalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalRewards(ctx, req.(*QueryHistoricalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.costaking.v1.Query/CurrentRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentRewards(ctx, req.(*QueryCurrentRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.costaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CostakerRewardsTracker",
			Handler:    _Query_CostakerRewardsTracker_Handler,
		},
		{
			MethodName: "HistoricalRewards",
			Handler:    _Query_HistoricalRewards_Handler,
		},
		{
			MethodName: "CurrentRewards",
			Handler:    _Query_CurrentRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/costaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCostakerRewardsTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCostakerRewardsTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCostakerRewardsTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CostakerAddress) > 0 {
		i -= len(m.CostakerAddress)
		copy(dAtA[i:], m.CostakerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CostakerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCostakerRewardsTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCostakerRewardsTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCostakerRewardsTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalScore.Size()
		i -= size
		if _, err := m.TotalScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ActiveBaby.Size()
		i -= size
		if _, err := m.ActiveBaby.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ActiveSatoshis.Size()
		i -= size
		if _, err := m.ActiveSatoshis.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.StartPeriodCumulativeReward != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartPeriodCumulativeReward))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalScore.Size()
		i -= size
		if _, err := m.TotalScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeRewardsPerScore) > 0 {
		for iNdEx := len(m.CumulativeRewardsPerScore) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardsPerScore[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCostakerRewardsTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CostakerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCostakerRewardsTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartPeriodCumulativeReward != 0 {
		n += 1 + sovQuery(uint64(m.StartPeriodCumulativeReward))
	}
	l = m.ActiveSatoshis.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ActiveBaby.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalScore.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	l = m.TotalScore.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryHistoricalRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	return n
}

func (m *QueryHistoricalRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardsPerScore) > 0 {
		for _, e := range m.CumulativeRewardsPerScore {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCostakerRewardsTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCostakerRewardsTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCostakerRewardsTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CostakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCostakerRewardsTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCostakerRewardsTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCostakerRewardsTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPeriodCumulativeReward", wireType)
			}
			m.StartPeriodCumulativeReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPeriodCumulativeReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSatoshis", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveSatoshis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBaby", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveBaby.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardsPerScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardsPerScore = append(m.CumulativeRewardsPerScore, types.Coin{})
			if err := m.CumulativeRewardsPerScore[len(m.CumulativeRewardsPerScore)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
