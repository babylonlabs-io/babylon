// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/costaking/v1/rewards.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HistoricalRewards represents the cumulative rewards ratio of
// the pool of costakers per score in that period. The period is ommited here
// and should be part of the key used to store this structure. Key: Prefix +
// Period.
type HistoricalRewards struct {
	// CumulativeRewardsPerScore is the cumulative rewards of that period.
	// This coins will aways increase the value, never reduced, it always
	// accumulates and when the cumulative rewards will be used to distribute
	// rewards, 2 periods will be loaded, calculate the difference and multiplied
	// by the total score amount of each staker
	// https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
	CumulativeRewardsPerScore github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=cumulative_rewards_per_score,json=cumulativeRewardsPerScore,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"cumulative_rewards_per_score"`
}

func (m *HistoricalRewards) Reset()         { *m = HistoricalRewards{} }
func (m *HistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewards) ProtoMessage()    {}
func (*HistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c033891939e67316, []int{0}
}
func (m *HistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewards.Merge(m, src)
}
func (m *HistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewards proto.InternalMessageInfo

func (m *HistoricalRewards) GetCumulativeRewardsPerScore() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CumulativeRewardsPerScore
	}
	return nil
}

// CurrentRewards represents the current rewards of the pool of costakers.
// Note: This rewards are for the stakers that have BTC delegations and BABY
// delegations.
// Key: Prefix. Since this will be a single pool of rewards for the entire chain
// a single CurrentRewards structure is necessary.
type CurrentRewards struct {
	// Rewards is the current rewards for the single pool of rewards for all the
	// costakers for the whole chain. If some action happens of satoshi or baby
	// staked or is unbonded or withdraw of the rewards available, this current
	// period is sent to an HistoricalRewards and a new period is created and
	// the rewards property is zerod out.
	// Note: This rewards have increased simulated decimals (10^20) to increase
	// precision when calculating the rewards per score and protect against
	// math overflow issues. The decimals are removed prior to sending out
	// to the incentives gauge.
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
	// Period stores the current period that serves as a reference for
	// creating new historical rewards and correlate with
	// CostakerRewardsTracker StartPeriodCumulativeReward.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// TotalScore is the total amount of score calulated over
	// all the stakers score in the chain.
	TotalScore cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_score,json=totalScore,proto3,customtype=cosmossdk.io/math.Int" json:"total_score"`
}

func (m *CurrentRewards) Reset()         { *m = CurrentRewards{} }
func (m *CurrentRewards) String() string { return proto.CompactTextString(m) }
func (*CurrentRewards) ProtoMessage()    {}
func (*CurrentRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c033891939e67316, []int{1}
}
func (m *CurrentRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentRewards.Merge(m, src)
}
func (m *CurrentRewards) XXX_Size() int {
	return m.Size()
}
func (m *CurrentRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentRewards.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentRewards proto.InternalMessageInfo

func (m *CurrentRewards) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *CurrentRewards) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

// CostakerRewardsTracker represents the structure that holds information
// from the last time this staker withdraw the costaking rewards or modified
// his active staked amount of baby or satoshis.
// The babylon address of the staker is ommitted here but should be part of the
// key used to store this structure.
// Key: Prefix + costaker babylon address.
type CostakerRewardsTracker struct {
	// StartPeriodCumulativeReward the starting period the costaker
	// made his last withdraw of costaking rewards or modified his active staking
	// amount of satoshis or baby.
	StartPeriodCumulativeReward uint64 `protobuf:"varint,1,opt,name=start_period_cumulative_reward,json=startPeriodCumulativeReward,proto3" json:"start_period_cumulative_reward,omitempty"`
	// ActiveSatoshis is the total amount of active satoshi delegated
	// from this costaker babylon address.
	ActiveSatoshis cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=active_satoshis,json=activeSatoshis,proto3,customtype=cosmossdk.io/math.Int" json:"active_satoshis"`
	// ActiveBaby is the total amount of active baby delegated
	// from this costaker babylon address.
	ActiveBaby cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=active_baby,json=activeBaby,proto3,customtype=cosmossdk.io/math.Int" json:"active_baby"`
	// TotalScore is the total amount of calculated score
	// of this costaker.
	TotalScore cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_score,json=totalScore,proto3,customtype=cosmossdk.io/math.Int" json:"total_score"`
}

func (m *CostakerRewardsTracker) Reset()         { *m = CostakerRewardsTracker{} }
func (m *CostakerRewardsTracker) String() string { return proto.CompactTextString(m) }
func (*CostakerRewardsTracker) ProtoMessage()    {}
func (*CostakerRewardsTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_c033891939e67316, []int{2}
}
func (m *CostakerRewardsTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CostakerRewardsTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CostakerRewardsTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CostakerRewardsTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CostakerRewardsTracker.Merge(m, src)
}
func (m *CostakerRewardsTracker) XXX_Size() int {
	return m.Size()
}
func (m *CostakerRewardsTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_CostakerRewardsTracker.DiscardUnknown(m)
}

var xxx_messageInfo_CostakerRewardsTracker proto.InternalMessageInfo

func (m *CostakerRewardsTracker) GetStartPeriodCumulativeReward() uint64 {
	if m != nil {
		return m.StartPeriodCumulativeReward
	}
	return 0
}

func init() {
	proto.RegisterType((*HistoricalRewards)(nil), "babylon.costaking.v1.HistoricalRewards")
	proto.RegisterType((*CurrentRewards)(nil), "babylon.costaking.v1.CurrentRewards")
	proto.RegisterType((*CostakerRewardsTracker)(nil), "babylon.costaking.v1.CostakerRewardsTracker")
}

func init() {
	proto.RegisterFile("babylon/costaking/v1/rewards.proto", fileDescriptor_c033891939e67316)
}

var fileDescriptor_c033891939e67316 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x8d, 0xdb, 0xaa, 0x48, 0x2e, 0x2a, 0x62, 0x55, 0xaa, 0xa4, 0xa0, 0x4d, 0x94, 0x53, 0x24,
	0x14, 0x9b, 0x00, 0xe2, 0x03, 0xb2, 0x17, 0x2a, 0x71, 0x88, 0xd2, 0x9e, 0xb8, 0xac, 0xbc, 0x8e,
	0x95, 0x58, 0xd9, 0xec, 0x44, 0xb6, 0x77, 0x21, 0xff, 0xc0, 0x81, 0x6f, 0xe0, 0xc8, 0x99, 0x8f,
	0xe8, 0x8d, 0x8a, 0x13, 0x42, 0xa2, 0xa0, 0xe4, 0x47, 0xd0, 0xda, 0x13, 0xa8, 0xca, 0x09, 0x10,
	0xa7, 0x5d, 0xcb, 0x6f, 0xde, 0x7b, 0xf3, 0x3c, 0x43, 0xbb, 0x99, 0xc8, 0x56, 0x39, 0x14, 0x5c,
	0x82, 0x75, 0x62, 0xae, 0x8b, 0x29, 0xaf, 0x06, 0xdc, 0xa8, 0x57, 0xc2, 0x4c, 0x2c, 0x5b, 0x1a,
	0x70, 0x10, 0x1d, 0x21, 0x86, 0xfd, 0xc4, 0xb0, 0x6a, 0x70, 0x72, 0x34, 0x85, 0x29, 0x78, 0x00,
	0xaf, 0xff, 0x02, 0xf6, 0x24, 0x96, 0x60, 0x17, 0x60, 0x79, 0x26, 0xac, 0xe2, 0xd5, 0x20, 0x53,
	0x4e, 0x0c, 0xb8, 0x04, 0x5d, 0xe0, 0x7d, 0x2b, 0xdc, 0xa7, 0xa1, 0x30, 0x1c, 0xc2, 0x55, 0xf7,
	0x1d, 0xa1, 0x77, 0x9f, 0x6b, 0xeb, 0xc0, 0x68, 0x29, 0xf2, 0x71, 0xb0, 0x10, 0xbd, 0x21, 0xf4,
	0x81, 0x2c, 0x17, 0x65, 0x2e, 0x9c, 0xae, 0x54, 0x8a, 0xce, 0xd2, 0xa5, 0x32, 0xa9, 0x95, 0x60,
	0x54, 0x93, 0x74, 0x76, 0x7b, 0x07, 0x8f, 0x5b, 0x0c, 0xb9, 0x6a, 0x61, 0x86, 0xc2, 0x2c, 0x01,
	0x5d, 0x0c, 0x1f, 0x5d, 0x5c, 0xb5, 0x1b, 0xef, 0xbf, 0xb5, 0x7b, 0x53, 0xed, 0x66, 0x65, 0xc6,
	0x24, 0x2c, 0x50, 0x18, 0x3f, 0x7d, 0x3b, 0x99, 0x73, 0xb7, 0x5a, 0x2a, 0xeb, 0x0b, 0xec, 0xb8,
	0xf5, 0x4b, 0x10, 0x6d, 0x8c, 0x94, 0x39, 0xab, 0xd5, 0xba, 0x5f, 0x09, 0x3d, 0x4c, 0x4a, 0x63,
	0x54, 0xe1, 0xb6, 0x0e, 0x15, 0xbd, 0x85, 0xae, 0xfe, 0x87, 0x97, 0x2d, 0x77, 0x74, 0x4c, 0xf7,
	0x97, 0xca, 0x68, 0x98, 0x34, 0x77, 0x3a, 0xa4, 0xb7, 0x37, 0xc6, 0x53, 0xf4, 0x82, 0x1e, 0x38,
	0x70, 0x22, 0xc7, 0x38, 0x76, 0x3b, 0xa4, 0x77, 0x7b, 0xf8, 0xb0, 0xd6, 0xf9, 0x72, 0xd5, 0xbe,
	0x17, 0x58, 0xed, 0x64, 0xce, 0x34, 0xf0, 0x85, 0x70, 0x33, 0x76, 0x5a, 0xb8, 0x4f, 0x1f, 0xfa,
	0x14, 0x2d, 0x9e, 0x16, 0x6e, 0x4c, 0x7d, 0x7d, 0xe8, 0xef, 0xe3, 0x0e, 0x3d, 0x4e, 0xfc, 0x33,
	0x2b, 0x83, 0x0d, 0x9e, 0x1b, 0x21, 0xe7, 0xca, 0x44, 0x09, 0x8d, 0xad, 0x13, 0xc6, 0xa5, 0x41,
	0x38, 0xfd, 0xed, 0x55, 0x9a, 0xc4, 0x1b, 0xbb, 0xef, 0x51, 0x23, 0x0f, 0x4a, 0x6e, 0x04, 0x19,
	0x9d, 0xd3, 0x3b, 0x42, 0xfa, 0x1a, 0x2b, 0x1c, 0xd8, 0x99, 0xb6, 0xbe, 0x9d, 0x3f, 0x74, 0x7c,
	0x18, 0x38, 0xce, 0x90, 0xa2, 0xce, 0x00, 0x59, 0xeb, 0x51, 0xfd, 0xab, 0x0c, 0x42, 0xfd, 0x50,
	0x64, 0xab, 0x9b, 0x89, 0xee, 0xfd, 0x53, 0xa2, 0xc3, 0xd1, 0xc5, 0x3a, 0x26, 0x97, 0xeb, 0x98,
	0x7c, 0x5f, 0xc7, 0xe4, 0xed, 0x26, 0x6e, 0x5c, 0x6e, 0xe2, 0xc6, 0xe7, 0x4d, 0xdc, 0x78, 0xf9,
	0xec, 0xda, 0x10, 0xe0, 0x8a, 0xe5, 0x22, 0xb3, 0x7d, 0x0d, 0xdb, 0x23, 0xaf, 0x9e, 0xf2, 0xd7,
	0xd7, 0x56, 0xd3, 0x0f, 0x46, 0xb6, 0xef, 0xf7, 0xe5, 0xc9, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x65, 0xa3, 0x95, 0x49, 0xbc, 0x03, 0x00, 0x00,
}

func (m *HistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeRewardsPerScore) > 0 {
		for iNdEx := len(m.CumulativeRewardsPerScore) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardsPerScore[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CurrentRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalScore.Size()
		i -= size
		if _, err := m.TotalScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CostakerRewardsTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CostakerRewardsTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CostakerRewardsTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalScore.Size()
		i -= size
		if _, err := m.TotalScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ActiveBaby.Size()
		i -= size
		if _, err := m.ActiveBaby.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ActiveSatoshis.Size()
		i -= size
		if _, err := m.ActiveSatoshis.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.StartPeriodCumulativeReward != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.StartPeriodCumulativeReward))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardsPerScore) > 0 {
		for _, e := range m.CumulativeRewardsPerScore {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	return n
}

func (m *CurrentRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovRewards(uint64(m.Period))
	}
	l = m.TotalScore.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func (m *CostakerRewardsTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartPeriodCumulativeReward != 0 {
		n += 1 + sovRewards(uint64(m.StartPeriodCumulativeReward))
	}
	l = m.ActiveSatoshis.Size()
	n += 1 + l + sovRewards(uint64(l))
	l = m.ActiveBaby.Size()
	n += 1 + l + sovRewards(uint64(l))
	l = m.TotalScore.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func sovRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewards(x uint64) (n int) {
	return sovRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardsPerScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardsPerScore = append(m.CumulativeRewardsPerScore, types.Coin{})
			if err := m.CumulativeRewardsPerScore[len(m.CumulativeRewardsPerScore)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CostakerRewardsTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CostakerRewardsTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CostakerRewardsTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPeriodCumulativeReward", wireType)
			}
			m.StartPeriodCumulativeReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPeriodCumulativeReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSatoshis", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveSatoshis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBaby", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveBaby.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewards = fmt.Errorf("proto: unexpected end of group")
)
