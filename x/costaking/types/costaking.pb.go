// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/costaking/v1/costaking.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// CostakingPortion is the portion of rewards that goes to costakers
	// NOTE: This portion of costakers is taken after the incentive module
	// takes part of the fee_collector to give out to BTC stakers.
	CostakingPortion cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=costaking_portion,json=costakingPortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"costaking_portion"`
	// ScoreRatioBtcByBaby defines the amount of ubbn necessary for the
	// sats staked to count as score in the formula.
	// score: min(costakers_sats_staked, (costakers_ubbn_staked /
	// score_ratio_btc_by_baby))
	ScoreRatioBtcByBaby cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=score_ratio_btc_by_baby,json=scoreRatioBtcByBaby,proto3,customtype=cosmossdk.io/math.Int" json:"score_ratio_btc_by_baby"`
	// ValidatorsPortion is the portion of rewards that goes to Babylon Validators
	// NOTE: This portion of validators is taken after the incentive module
	// takes part of the fee_collector balance to give out to validators that
	// correctly voted.
	ValidatorsPortion cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=validators_portion,json=validatorsPortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validators_portion"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ebc90d718f5cee, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Validator is a message that denotes a validator
type Validator struct {
	// addr is the validator's address (in sdk.ValAddress)
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	Tokens cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=tokens,proto3,customtype=cosmossdk.io/math.Int" json:"tokens"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ebc90d718f5cee, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

// ValidatorSet is a message that denotes a set of validators
type ValidatorSet struct {
	// validators is the list of all validators and their delegated tokens.
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *ValidatorSet) Reset()         { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()    {}
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ebc90d718f5cee, []int{2}
}
func (m *ValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSet.Merge(m, src)
}
func (m *ValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSet proto.InternalMessageInfo

func (m *ValidatorSet) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "babylon.costaking.v1.Params")
	proto.RegisterType((*Validator)(nil), "babylon.costaking.v1.Validator")
	proto.RegisterType((*ValidatorSet)(nil), "babylon.costaking.v1.ValidatorSet")
}

func init() {
	proto.RegisterFile("babylon/costaking/v1/costaking.proto", fileDescriptor_e3ebc90d718f5cee)
}

var fileDescriptor_e3ebc90d718f5cee = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x93, 0xf6, 0x4f, 0xa1, 0xfb, 0xef, 0xc1, 0xae, 0x15, 0x6b, 0x85, 0xb4, 0x14, 0x0f,
	0x05, 0x69, 0x42, 0x55, 0xbc, 0x0a, 0xb1, 0x97, 0x82, 0x60, 0x89, 0xe0, 0xc1, 0x83, 0x71, 0x77,
	0x13, 0xd2, 0xd0, 0x26, 0x53, 0xb2, 0x6b, 0x30, 0x6f, 0xe1, 0x8b, 0x78, 0xf3, 0x21, 0x7a, 0x2c,
	0x9e, 0xc4, 0x43, 0x91, 0xf6, 0x45, 0xa4, 0x49, 0x9a, 0x14, 0xf4, 0xd4, 0xdb, 0x4c, 0x66, 0xbe,
	0xdf, 0xe4, 0x5b, 0x3e, 0x74, 0x42, 0x09, 0x8d, 0x26, 0xe0, 0x6b, 0x0c, 0xb8, 0x20, 0x63, 0xd7,
	0x77, 0xb4, 0xb0, 0x97, 0x37, 0xea, 0x34, 0x00, 0x01, 0xb8, 0x96, 0x6e, 0xa9, 0xf9, 0x20, 0xec,
	0x35, 0x6a, 0x0e, 0x38, 0x10, 0x2f, 0x68, 0xeb, 0x2a, 0xd9, 0x6d, 0x1c, 0x31, 0xe0, 0x1e, 0x70,
	0x33, 0x19, 0x24, 0x4d, 0x32, 0x6a, 0xbf, 0x15, 0x50, 0x69, 0x48, 0x02, 0xe2, 0x71, 0xfc, 0x88,
	0xaa, 0x19, 0xcb, 0x9c, 0x42, 0x20, 0x5c, 0xf0, 0xeb, 0x72, 0x4b, 0xee, 0x94, 0xf5, 0xde, 0x6c,
	0xd1, 0x94, 0xbe, 0x16, 0xcd, 0xe3, 0x44, 0xcb, 0xad, 0xb1, 0xea, 0x82, 0xe6, 0x11, 0x31, 0x52,
	0x6f, 0x6c, 0x87, 0xb0, 0xa8, 0x6f, 0xb3, 0x8f, 0xf7, 0x2e, 0x4a, 0xd1, 0x7d, 0x9b, 0x19, 0x7b,
	0x19, 0x6b, 0x98, 0xa0, 0x30, 0x41, 0x87, 0x9c, 0x41, 0x60, 0x9b, 0x01, 0x11, 0x2e, 0x98, 0x54,
	0x30, 0x93, 0x46, 0xe6, 0xda, 0x46, 0xbd, 0xd0, 0x92, 0x3b, 0x15, 0xfd, 0x34, 0xbd, 0x72, 0xf0,
	0xfb, 0xca, 0xc0, 0x17, 0x5b, 0xfc, 0x81, 0x2f, 0x8c, 0xfd, 0x98, 0x65, 0xac, 0x51, 0xba, 0x60,
	0x7a, 0xa4, 0x13, 0x1a, 0xe1, 0x27, 0x84, 0x43, 0x32, 0x71, 0x2d, 0x22, 0x20, 0xe0, 0x99, 0x87,
	0xe2, 0xae, 0x1e, 0xaa, 0x39, 0x2c, 0x35, 0xd1, 0xb6, 0x50, 0xf9, 0x7e, 0xf3, 0x11, 0x63, 0xf4,
	0x8f, 0x58, 0x56, 0x10, 0x3f, 0x52, 0xc5, 0x88, 0x6b, 0x7c, 0x8d, 0x4a, 0x02, 0xc6, 0xb6, 0xcf,
	0x77, 0x31, 0x95, 0x4a, 0xdb, 0xb7, 0xa8, 0x92, 0x5d, 0xb9, 0xb3, 0x05, 0xbe, 0x42, 0x28, 0xff,
	0x95, 0xba, 0xdc, 0x2a, 0x76, 0xfe, 0x9f, 0x35, 0xd5, 0xbf, 0x12, 0xa0, 0x66, 0x3a, 0x63, 0x4b,
	0xa2, 0x0f, 0x67, 0x4b, 0x45, 0x9e, 0x2f, 0x15, 0xf9, 0x7b, 0xa9, 0xc8, 0xaf, 0x2b, 0x45, 0x9a,
	0xaf, 0x14, 0xe9, 0x73, 0xa5, 0x48, 0x0f, 0x97, 0x8e, 0x2b, 0x46, 0xcf, 0x54, 0x65, 0xe0, 0x69,
	0x29, 0x70, 0x42, 0x28, 0xef, 0xba, 0xb0, 0x69, 0xb5, 0xf0, 0x42, 0x7b, 0xd9, 0x0a, 0xa3, 0x88,
	0xa6, 0x36, 0xa7, 0xa5, 0x38, 0x3f, 0xe7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x60, 0x7e, 0x4f,
	0x56, 0xae, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ValidatorsPortion.Size()
		i -= size
		if _, err := m.ValidatorsPortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCostaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ScoreRatioBtcByBaby.Size()
		i -= size
		if _, err := m.ScoreRatioBtcByBaby.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCostaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CostakingPortion.Size()
		i -= size
		if _, err := m.CostakingPortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCostaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCostaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCostaking(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCostaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCostaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovCostaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CostakingPortion.Size()
	n += 1 + l + sovCostaking(uint64(l))
	l = m.ScoreRatioBtcByBaby.Size()
	n += 1 + l + sovCostaking(uint64(l))
	l = m.ValidatorsPortion.Size()
	n += 1 + l + sovCostaking(uint64(l))
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCostaking(uint64(l))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovCostaking(uint64(l))
	return n
}

func (m *ValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovCostaking(uint64(l))
		}
	}
	return n
}

func sovCostaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCostaking(x uint64) (n int) {
	return sovCostaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCostaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostakingPortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCostaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CostakingPortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreRatioBtcByBaby", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCostaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScoreRatioBtcByBaby.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCostaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsPortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCostaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCostaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCostaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCostaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCostaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCostaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCostaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCostaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCostaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCostaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCostaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCostaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCostaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCostaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCostaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCostaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCostaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCostaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCostaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCostaking = fmt.Errorf("proto: unexpected end of group")
)
