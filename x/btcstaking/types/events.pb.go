// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/events.proto

package types

import (
	fmt "fmt"
	github_com_babylonlabs_io_babylon_types "github.com/babylonlabs-io/babylon/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventNewFinalityProvider is the event emitted when a finality provider is created
type EventNewFinalityProvider struct {
	Fp *FinalityProvider `protobuf:"bytes,1,opt,name=fp,proto3" json:"fp,omitempty"`
}

func (m *EventNewFinalityProvider) Reset()         { *m = EventNewFinalityProvider{} }
func (m *EventNewFinalityProvider) String() string { return proto.CompactTextString(m) }
func (*EventNewFinalityProvider) ProtoMessage()    {}
func (*EventNewFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{0}
}
func (m *EventNewFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewFinalityProvider.Merge(m, src)
}
func (m *EventNewFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventNewFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewFinalityProvider proto.InternalMessageInfo

func (m *EventNewFinalityProvider) GetFp() *FinalityProvider {
	if m != nil {
		return m.Fp
	}
	return nil
}

// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
// updated. There are the following possible state transitions:
// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
// - pending -> active, which happens upon `MsgAddCovenantSigs`
// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
type EventBTCDelegationStateUpdate struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// new_state is the new state of this BTC delegation
	NewState BTCDelegationStatus `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=babylon.btcstaking.v1.BTCDelegationStatus" json:"new_state,omitempty"`
}

func (m *EventBTCDelegationStateUpdate) Reset()         { *m = EventBTCDelegationStateUpdate{} }
func (m *EventBTCDelegationStateUpdate) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationStateUpdate) ProtoMessage()    {}
func (*EventBTCDelegationStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{1}
}
func (m *EventBTCDelegationStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationStateUpdate.Merge(m, src)
}
func (m *EventBTCDelegationStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationStateUpdate proto.InternalMessageInfo

func (m *EventBTCDelegationStateUpdate) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationStateUpdate) GetNewState() BTCDelegationStatus {
	if m != nil {
		return m.NewState
	}
	return BTCDelegationStatus_PENDING
}

// EventSelectiveSlashing is the event emitted when an adversarial
// finality provider selectively slashes a BTC delegation. This will
// result in slashing of all BTC delegations under this finality provider.
type EventSelectiveSlashing struct {
	// evidence is the evidence of selective slashing
	Evidence *SelectiveSlashingEvidence `protobuf:"bytes,1,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *EventSelectiveSlashing) Reset()         { *m = EventSelectiveSlashing{} }
func (m *EventSelectiveSlashing) String() string { return proto.CompactTextString(m) }
func (*EventSelectiveSlashing) ProtoMessage()    {}
func (*EventSelectiveSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{2}
}
func (m *EventSelectiveSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSelectiveSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSelectiveSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSelectiveSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSelectiveSlashing.Merge(m, src)
}
func (m *EventSelectiveSlashing) XXX_Size() int {
	return m.Size()
}
func (m *EventSelectiveSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSelectiveSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_EventSelectiveSlashing proto.InternalMessageInfo

func (m *EventSelectiveSlashing) GetEvidence() *SelectiveSlashingEvidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

// EventPowerDistUpdate is an event that affects voting power distribution
// of BTC staking protocol
type EventPowerDistUpdate struct {
	// ev is the event that affects voting power distribution
	//
	// Types that are valid to be assigned to Ev:
	//	*EventPowerDistUpdate_SlashedFp
	//	*EventPowerDistUpdate_JailedFp
	//	*EventPowerDistUpdate_UnjailedFp
	//	*EventPowerDistUpdate_BtcDelStateUpdate
	Ev isEventPowerDistUpdate_Ev `protobuf_oneof:"ev"`
}

func (m *EventPowerDistUpdate) Reset()         { *m = EventPowerDistUpdate{} }
func (m *EventPowerDistUpdate) String() string { return proto.CompactTextString(m) }
func (*EventPowerDistUpdate) ProtoMessage()    {}
func (*EventPowerDistUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3}
}
func (m *EventPowerDistUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate.Merge(m, src)
}
func (m *EventPowerDistUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate proto.InternalMessageInfo

type isEventPowerDistUpdate_Ev interface {
	isEventPowerDistUpdate_Ev()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventPowerDistUpdate_SlashedFp struct {
	SlashedFp *EventPowerDistUpdate_EventSlashedFinalityProvider `protobuf:"bytes,1,opt,name=slashed_fp,json=slashedFp,proto3,oneof" json:"slashed_fp,omitempty"`
}
type EventPowerDistUpdate_JailedFp struct {
	JailedFp *EventPowerDistUpdate_EventJailedFinalityProvider `protobuf:"bytes,2,opt,name=jailed_fp,json=jailedFp,proto3,oneof" json:"jailed_fp,omitempty"`
}
type EventPowerDistUpdate_UnjailedFp struct {
	UnjailedFp *EventPowerDistUpdate_EventUnjailedFinalityProvider `protobuf:"bytes,3,opt,name=unjailed_fp,json=unjailedFp,proto3,oneof" json:"unjailed_fp,omitempty"`
}
type EventPowerDistUpdate_BtcDelStateUpdate struct {
	BtcDelStateUpdate *EventBTCDelegationStateUpdate `protobuf:"bytes,4,opt,name=btc_del_state_update,json=btcDelStateUpdate,proto3,oneof" json:"btc_del_state_update,omitempty"`
}

func (*EventPowerDistUpdate_SlashedFp) isEventPowerDistUpdate_Ev()         {}
func (*EventPowerDistUpdate_JailedFp) isEventPowerDistUpdate_Ev()          {}
func (*EventPowerDistUpdate_UnjailedFp) isEventPowerDistUpdate_Ev()        {}
func (*EventPowerDistUpdate_BtcDelStateUpdate) isEventPowerDistUpdate_Ev() {}

func (m *EventPowerDistUpdate) GetEv() isEventPowerDistUpdate_Ev {
	if m != nil {
		return m.Ev
	}
	return nil
}

func (m *EventPowerDistUpdate) GetSlashedFp() *EventPowerDistUpdate_EventSlashedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_SlashedFp); ok {
		return x.SlashedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetJailedFp() *EventPowerDistUpdate_EventJailedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_JailedFp); ok {
		return x.JailedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetUnjailedFp() *EventPowerDistUpdate_EventUnjailedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_UnjailedFp); ok {
		return x.UnjailedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetBtcDelStateUpdate() *EventBTCDelegationStateUpdate {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_BtcDelStateUpdate); ok {
		return x.BtcDelStateUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventPowerDistUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventPowerDistUpdate_SlashedFp)(nil),
		(*EventPowerDistUpdate_JailedFp)(nil),
		(*EventPowerDistUpdate_UnjailedFp)(nil),
		(*EventPowerDistUpdate_BtcDelStateUpdate)(nil),
	}
}

// EventSlashedFinalityProvider defines an event that a finality provider
// is slashed
// TODO: unify with existing slashing events
type EventPowerDistUpdate_EventSlashedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventSlashedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventSlashedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventSlashedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 0}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider proto.InternalMessageInfo

// EventJailedFinalityProvider defines an event that a finality provider
// is jailed after being detected sluggish
type EventPowerDistUpdate_EventJailedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventJailedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventJailedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventJailedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 1}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider proto.InternalMessageInfo

// EventUnjailedFinalityProvider defines an event that a jailed finality provider
// is unjailed after the jailing period is passed
type EventPowerDistUpdate_EventUnjailedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventUnjailedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventUnjailedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventUnjailedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 2}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider proto.InternalMessageInfo

// EventBTCDelegationCreated is the event emitted when a BTC delegation is created
// on the Babylon chain
type EventBTCDelegationCreated struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// version of the params used to validate the delegation
	ParamsVersion uint32 `protobuf:"varint,2,opt,name=params_version,json=paramsVersion,proto3" json:"params_version,omitempty"`
	// finality_provider_btc_pks_hex is the list of hex str of Bitcoin secp256k1 PK of
	// the finality providers that this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	FinalityProviderBtcPksHex []string `protobuf:"bytes,3,rep,name=finality_provider_btc_pks_hex,json=finalityProviderBtcPksHex,proto3" json:"finality_provider_btc_pks_hex,omitempty"`
	// staker_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the staker that
	// creates this BTC delegation the PK follows encoding in BIP-340 spec
	StakerBtcPkHex string `protobuf:"bytes,4,opt,name=staker_btc_pk_hex,json=stakerBtcPkHex,proto3" json:"staker_btc_pk_hex,omitempty"`
	// timelock is the timelock of the staking tx specified in the BTC script
	Timelock uint32 `protobuf:"varint,5,opt,name=timelock,proto3" json:"timelock,omitempty"`
	// staking_amount is the total amount of BTC stake in this delegation
	// quantified in satoshi
	StakingAmount uint64 `protobuf:"varint,6,opt,name=staking_amount,json=stakingAmount,proto3" json:"staking_amount,omitempty"`
	// unbonding_time is the time is timelock on unbonding tx chosen by the staker
	UnbondingTime uint32 `protobuf:"varint,7,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	// unbonding_tx is hex encoded bytes of the unbonding tx
	UnbondingTx string `protobuf:"bytes,8,opt,name=unbonding_tx,json=unbondingTx,proto3" json:"unbonding_tx,omitempty"`
}

func (m *EventBTCDelegationCreated) Reset()         { *m = EventBTCDelegationCreated{} }
func (m *EventBTCDelegationCreated) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationCreated) ProtoMessage()    {}
func (*EventBTCDelegationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{4}
}
func (m *EventBTCDelegationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationCreated.Merge(m, src)
}
func (m *EventBTCDelegationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationCreated proto.InternalMessageInfo

func (m *EventBTCDelegationCreated) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetParamsVersion() uint32 {
	if m != nil {
		return m.ParamsVersion
	}
	return 0
}

func (m *EventBTCDelegationCreated) GetFinalityProviderBtcPksHex() []string {
	if m != nil {
		return m.FinalityProviderBtcPksHex
	}
	return nil
}

func (m *EventBTCDelegationCreated) GetStakerBtcPkHex() string {
	if m != nil {
		return m.StakerBtcPkHex
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetTimelock() uint32 {
	if m != nil {
		return m.Timelock
	}
	return 0
}

func (m *EventBTCDelegationCreated) GetStakingAmount() uint64 {
	if m != nil {
		return m.StakingAmount
	}
	return 0
}

func (m *EventBTCDelegationCreated) GetUnbondingTime() uint32 {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *EventBTCDelegationCreated) GetUnbondingTx() string {
	if m != nil {
		return m.UnbondingTx
	}
	return ""
}

// EventCovenantSignatureRecevied is the event emitted when a covenant committee
// sends valid covenant signatures for a BTC delegation
type EventCovenantSignatureRecevied struct {
	// staking_tx_hash is the hash of the staking identifing the BTC delegation
	// that this covenant signature is for
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// covenant_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the
	// covnenat committee that send the signature
	CovenantBtcPkHex string `protobuf:"bytes,2,opt,name=covenant_btc_pk_hex,json=covenantBtcPkHex,proto3" json:"covenant_btc_pk_hex,omitempty"`
	// covenant_unbonding_signature_hex is the hex str of the BIP340 Schnorr
	// signature of the covenant committee on the unbonding tx
	CovenantUnbondingSignatureHex string `protobuf:"bytes,3,opt,name=covenant_unbonding_signature_hex,json=covenantUnbondingSignatureHex,proto3" json:"covenant_unbonding_signature_hex,omitempty"`
}

func (m *EventCovenantSignatureRecevied) Reset()         { *m = EventCovenantSignatureRecevied{} }
func (m *EventCovenantSignatureRecevied) String() string { return proto.CompactTextString(m) }
func (*EventCovenantSignatureRecevied) ProtoMessage()    {}
func (*EventCovenantSignatureRecevied) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{5}
}
func (m *EventCovenantSignatureRecevied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCovenantSignatureRecevied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCovenantSignatureRecevied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCovenantSignatureRecevied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCovenantSignatureRecevied.Merge(m, src)
}
func (m *EventCovenantSignatureRecevied) XXX_Size() int {
	return m.Size()
}
func (m *EventCovenantSignatureRecevied) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCovenantSignatureRecevied.DiscardUnknown(m)
}

var xxx_messageInfo_EventCovenantSignatureRecevied proto.InternalMessageInfo

func (m *EventCovenantSignatureRecevied) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventCovenantSignatureRecevied) GetCovenantBtcPkHex() string {
	if m != nil {
		return m.CovenantBtcPkHex
	}
	return ""
}

func (m *EventCovenantSignatureRecevied) GetCovenantUnbondingSignatureHex() string {
	if m != nil {
		return m.CovenantUnbondingSignatureHex
	}
	return ""
}

// EventBTCDelegationInclusionProofReceived is the event emitted when a BTC delegation
// inclusion proof is received
type EventBTCDelegationInclusionProofReceived struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// start_height is the start BTC height of the BTC delegation
	// it is the start BTC height of the timelock
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// end_height is the end height of the BTC delegation
	// it is calculated by end_height = start_height + staking_time
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *EventBTCDelegationInclusionProofReceived) Reset() {
	*m = EventBTCDelegationInclusionProofReceived{}
}
func (m *EventBTCDelegationInclusionProofReceived) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationInclusionProofReceived) ProtoMessage()    {}
func (*EventBTCDelegationInclusionProofReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{6}
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationInclusionProofReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationInclusionProofReceived.Merge(m, src)
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationInclusionProofReceived.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationInclusionProofReceived proto.InternalMessageInfo

func (m *EventBTCDelegationInclusionProofReceived) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationInclusionProofReceived) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *EventBTCDelegationInclusionProofReceived) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*EventNewFinalityProvider)(nil), "babylon.btcstaking.v1.EventNewFinalityProvider")
	proto.RegisterType((*EventBTCDelegationStateUpdate)(nil), "babylon.btcstaking.v1.EventBTCDelegationStateUpdate")
	proto.RegisterType((*EventSelectiveSlashing)(nil), "babylon.btcstaking.v1.EventSelectiveSlashing")
	proto.RegisterType((*EventPowerDistUpdate)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate")
	proto.RegisterType((*EventPowerDistUpdate_EventSlashedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventSlashedFinalityProvider")
	proto.RegisterType((*EventPowerDistUpdate_EventJailedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventJailedFinalityProvider")
	proto.RegisterType((*EventPowerDistUpdate_EventUnjailedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventUnjailedFinalityProvider")
	proto.RegisterType((*EventBTCDelegationCreated)(nil), "babylon.btcstaking.v1.EventBTCDelegationCreated")
	proto.RegisterType((*EventCovenantSignatureRecevied)(nil), "babylon.btcstaking.v1.EventCovenantSignatureRecevied")
	proto.RegisterType((*EventBTCDelegationInclusionProofReceived)(nil), "babylon.btcstaking.v1.EventBTCDelegationInclusionProofReceived")
}

func init() {
	proto.RegisterFile("babylon/btcstaking/v1/events.proto", fileDescriptor_74118427820fff75)
}

var fileDescriptor_74118427820fff75 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4d, 0x6f, 0xe3, 0x54,
	0x14, 0x86, 0x63, 0x37, 0x94, 0xe4, 0xf4, 0x03, 0xc6, 0x14, 0xe4, 0x09, 0x34, 0x64, 0x22, 0x31,
	0x04, 0xa4, 0x49, 0xe6, 0xa3, 0x12, 0x2c, 0x21, 0xed, 0xb4, 0x29, 0xa0, 0x51, 0xe4, 0xb4, 0x2c,
	0xd8, 0x58, 0xd7, 0xce, 0x89, 0x7d, 0x89, 0x73, 0xaf, 0xe5, 0x7b, 0xed, 0xa6, 0x7b, 0x7e, 0xc0,
	0x2c, 0xf8, 0x41, 0x2c, 0x59, 0xce, 0x12, 0xb1, 0x40, 0xa8, 0xe5, 0x87, 0x20, 0x5f, 0x7f, 0x34,
	0x6a, 0x93, 0x6a, 0x22, 0xcd, 0x2e, 0x39, 0x7e, 0xcf, 0xfb, 0x9c, 0xf3, 0xfa, 0x5e, 0x19, 0xda,
	0x0e, 0x71, 0x2e, 0x03, 0xce, 0x7a, 0x8e, 0x74, 0x85, 0x24, 0x53, 0xca, 0xbc, 0x5e, 0xf2, 0xac,
	0x87, 0x09, 0x32, 0x29, 0xba, 0x61, 0xc4, 0x25, 0x37, 0x3e, 0xce, 0x35, 0xdd, 0x1b, 0x4d, 0x37,
	0x79, 0xd6, 0xd8, 0xf3, 0xb8, 0xc7, 0x95, 0xa2, 0x97, 0xfe, 0xca, 0xc4, 0x8d, 0xc7, 0xcb, 0x0d,
	0x17, 0x5a, 0x95, 0xae, 0x3d, 0x02, 0xf3, 0x65, 0x0a, 0x79, 0x85, 0x17, 0xc7, 0x94, 0x91, 0x80,
	0xca, 0xcb, 0x61, 0xc4, 0x13, 0x3a, 0xc6, 0xc8, 0xf8, 0x06, 0xf4, 0x49, 0x68, 0x6a, 0x2d, 0xad,
	0xb3, 0xf5, 0xfc, 0xcb, 0xee, 0x52, 0x7a, 0xf7, 0x76, 0x93, 0xa5, 0x4f, 0xc2, 0xf6, 0x6b, 0x0d,
	0xf6, 0x95, 0x6b, 0xff, 0xec, 0xf0, 0x08, 0x03, 0xf4, 0x88, 0xa4, 0x9c, 0x8d, 0x24, 0x91, 0x78,
	0x1e, 0x8e, 0x89, 0x44, 0xe3, 0x31, 0x7c, 0x90, 0x9b, 0xd8, 0x72, 0x6e, 0xfb, 0x44, 0xf8, 0x8a,
	0x53, 0xb7, 0x76, 0xf2, 0xf2, 0xd9, 0x7c, 0x40, 0x84, 0x6f, 0x9c, 0x40, 0x9d, 0xe1, 0x85, 0x2d,
	0xd2, 0x56, 0x53, 0x6f, 0x69, 0x9d, 0xdd, 0xe7, 0x5f, 0xaf, 0x98, 0xe4, 0x0e, 0x2b, 0x16, 0x56,
	0x8d, 0xe1, 0x85, 0xc2, 0xb6, 0x27, 0xf0, 0x89, 0x9a, 0x68, 0x84, 0x01, 0xba, 0x92, 0x26, 0x38,
	0x0a, 0x88, 0xf0, 0x29, 0xf3, 0x8c, 0x9f, 0xa0, 0x86, 0xe9, 0xe8, 0xcc, 0xc5, 0x7c, 0xd7, 0xa7,
	0x2b, 0x08, 0x77, 0x7a, 0x5f, 0xe6, 0x7d, 0x56, 0xe9, 0xd0, 0xfe, 0x6d, 0x13, 0xf6, 0x14, 0x68,
	0xc8, 0x2f, 0x30, 0x3a, 0xa2, 0x42, 0xe6, 0x1b, 0x53, 0x00, 0x91, 0xb6, 0xe1, 0xd8, 0x2e, 0x43,
	0x1d, 0xac, 0x00, 0x2d, 0x33, 0xc8, 0x8a, 0xa3, 0xcc, 0xe2, 0x76, 0xea, 0x83, 0x8a, 0x55, 0xcf,
	0xdd, 0x8f, 0x43, 0x63, 0x02, 0xf5, 0x5f, 0x09, 0x0d, 0x32, 0x92, 0xae, 0x48, 0x27, 0x6b, 0x93,
	0x7e, 0x50, 0x0e, 0x4b, 0x40, 0xb5, 0xcc, 0xfb, 0x38, 0x34, 0x02, 0xd8, 0x8a, 0xd9, 0x0d, 0x69,
	0x43, 0x91, 0x4e, 0xd7, 0x26, 0x9d, 0xe7, 0x1e, 0x4b, 0x58, 0x50, 0xf8, 0x1f, 0x87, 0x86, 0x07,
	0x7b, 0x8e, 0x74, 0xed, 0x31, 0x06, 0xd9, 0x71, 0xb0, 0x63, 0xe5, 0x61, 0x56, 0x15, 0xf6, 0xe0,
	0x3e, 0xec, 0xaa, 0x63, 0x38, 0xa8, 0x58, 0x0f, 0x1c, 0xe9, 0x1e, 0x61, 0xb0, 0x50, 0x6c, 0xf8,
	0xf0, 0xd9, 0x7d, 0x59, 0x1b, 0x03, 0xd0, 0xc3, 0xa9, 0x7a, 0x83, 0xdb, 0xfd, 0x6f, 0xff, 0xfe,
	0xe7, 0xf3, 0x03, 0x8f, 0x4a, 0x3f, 0x76, 0xba, 0x2e, 0x9f, 0xf5, 0xf2, 0x21, 0x02, 0xe2, 0x88,
	0x27, 0x94, 0x17, 0x7f, 0x7b, 0xf2, 0x32, 0x44, 0xd1, 0xed, 0x9f, 0x0e, 0x5f, 0x1c, 0x3c, 0x1d,
	0xc6, 0xce, 0x8f, 0x78, 0x69, 0xe9, 0xe1, 0xb4, 0xe1, 0xc1, 0xa7, 0xf7, 0x64, 0xfd, 0x0e, 0x41,
	0x34, 0xbf, 0x8f, 0xab, 0xa2, 0x7e, 0x77, 0xa8, 0x7e, 0x15, 0x74, 0x4c, 0xda, 0xff, 0xe9, 0xf0,
	0xf0, 0x6e, 0xf4, 0x87, 0x11, 0x12, 0x89, 0xe3, 0xb7, 0xbe, 0xfd, 0x5f, 0xc0, 0x6e, 0x48, 0x22,
	0x32, 0x13, 0x76, 0x82, 0x91, 0xa0, 0x9c, 0xa9, 0xd3, 0xbc, 0x63, 0xed, 0x64, 0xd5, 0x9f, 0xb3,
	0xa2, 0xf1, 0x1d, 0xec, 0x4f, 0xf2, 0x85, 0xec, 0x30, 0xdf, 0xc8, 0x4e, 0xcf, 0x4a, 0x38, 0x15,
	0xb6, 0x8f, 0x73, 0x73, 0xa3, 0xb5, 0xd1, 0xa9, 0x5b, 0x0f, 0x27, 0xb7, 0xb6, 0xee, 0x4b, 0x77,
	0x38, 0x15, 0x03, 0x9c, 0x1b, 0x5f, 0xc1, 0x83, 0x94, 0x5c, 0xb6, 0xa9, 0xae, 0xaa, 0x1a, 0x69,
	0x37, 0x7b, 0xa0, 0xb4, 0xa9, 0xb4, 0x01, 0x35, 0x49, 0x67, 0x18, 0x70, 0x77, 0x6a, 0xbe, 0xa7,
	0xa6, 0x29, 0xff, 0xa7, 0xf3, 0x16, 0x7b, 0x91, 0x19, 0x8f, 0x99, 0x34, 0x37, 0x5b, 0x5a, 0xa7,
	0x5a, 0xae, 0xf5, 0xbd, 0x2a, 0xa6, 0xb2, 0x98, 0x39, 0x9c, 0x8d, 0x55, 0x00, 0x74, 0x86, 0xe6,
	0xfb, 0xd9, 0x5a, 0x65, 0xf5, 0x8c, 0xce, 0xd0, 0x78, 0x04, 0xdb, 0x0b, 0xb2, 0xb9, 0x59, 0x53,
	0xf3, 0x6c, 0xdd, 0x88, 0xe6, 0xed, 0x3f, 0x34, 0x68, 0xaa, 0x98, 0x0f, 0x79, 0x82, 0x8c, 0x30,
	0x39, 0xa2, 0x1e, 0x23, 0x32, 0x8e, 0xd0, 0x42, 0x17, 0x13, 0xba, 0x46, 0xd6, 0x4f, 0xe0, 0x23,
	0x37, 0x37, 0x59, 0x0c, 0x41, 0x57, 0xda, 0x0f, 0x8b, 0x47, 0x65, 0x0c, 0x27, 0xd0, 0x2a, 0xe5,
	0x37, 0x53, 0x8a, 0x02, 0x9f, 0xc7, 0x9e, 0xf6, 0xee, 0x17, 0xba, 0xf3, 0x42, 0x56, 0x0e, 0x39,
	0xc0, 0x79, 0xfb, 0x77, 0x0d, 0x3a, 0x77, 0x4f, 0xca, 0x29, 0x73, 0x83, 0x38, 0x7d, 0xb9, 0xc3,
	0x88, 0xf3, 0x49, 0xba, 0x0c, 0x4d, 0xd6, 0x58, 0xe6, 0x11, 0x6c, 0x0b, 0x49, 0x22, 0x69, 0xfb,
	0x48, 0x3d, 0x5f, 0xaa, 0x2d, 0xaa, 0xd6, 0x96, 0xaa, 0x0d, 0x54, 0xc9, 0xd8, 0x07, 0x40, 0x36,
	0x2e, 0x04, 0x1b, 0x4a, 0x50, 0x47, 0x36, 0xce, 0x1e, 0xf7, 0x5f, 0xfd, 0x79, 0xd5, 0xd4, 0xde,
	0x5c, 0x35, 0xb5, 0x7f, 0xaf, 0x9a, 0xda, 0xeb, 0xeb, 0x66, 0xe5, 0xcd, 0x75, 0xb3, 0xf2, 0xd7,
	0x75, 0xb3, 0xf2, 0xcb, 0x5b, 0x5c, 0x8d, 0xf9, 0xe2, 0x57, 0x57, 0xdd, 0x13, 0x67, 0x53, 0x7d,
	0x6e, 0x5f, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xa3, 0x60, 0x3f, 0xe9, 0x07, 0x00, 0x00,
}

func (m *EventNewFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fp != nil {
		{
			size, err := m.Fp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewState != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewState))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSelectiveSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSelectiveSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSelectiveSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ev != nil {
		{
			size := m.Ev.Size()
			i -= size
			if _, err := m.Ev.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_SlashedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_SlashedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlashedFp != nil {
		{
			size, err := m.SlashedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_JailedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_JailedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JailedFp != nil {
		{
			size, err := m.JailedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_UnjailedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_UnjailedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnjailedFp != nil {
		{
			size, err := m.UnjailedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_BtcDelStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_BtcDelStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BtcDelStateUpdate != nil {
		{
			size, err := m.BtcDelStateUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingTx) > 0 {
		i -= len(m.UnbondingTx)
		copy(dAtA[i:], m.UnbondingTx)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UnbondingTx)))
		i--
		dAtA[i] = 0x42
	}
	if m.UnbondingTime != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.UnbondingTime))
		i--
		dAtA[i] = 0x38
	}
	if m.StakingAmount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StakingAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Timelock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Timelock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StakerBtcPkHex) > 0 {
		i -= len(m.StakerBtcPkHex)
		copy(dAtA[i:], m.StakerBtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakerBtcPkHex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FinalityProviderBtcPksHex) > 0 {
		for iNdEx := len(m.FinalityProviderBtcPksHex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FinalityProviderBtcPksHex[iNdEx])
			copy(dAtA[i:], m.FinalityProviderBtcPksHex[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.FinalityProviderBtcPksHex[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ParamsVersion != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ParamsVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCovenantSignatureRecevied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCovenantSignatureRecevied) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCovenantSignatureRecevied) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CovenantUnbondingSignatureHex) > 0 {
		i -= len(m.CovenantUnbondingSignatureHex)
		copy(dAtA[i:], m.CovenantUnbondingSignatureHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CovenantUnbondingSignatureHex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CovenantBtcPkHex) > 0 {
		i -= len(m.CovenantBtcPkHex)
		copy(dAtA[i:], m.CovenantBtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CovenantBtcPkHex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationInclusionProofReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationInclusionProofReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationInclusionProofReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventNewFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fp != nil {
		l = m.Fp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NewState != 0 {
		n += 1 + sovEvents(uint64(m.NewState))
	}
	return n
}

func (m *EventSelectiveSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ev != nil {
		n += m.Ev.Size()
	}
	return n
}

func (m *EventPowerDistUpdate_SlashedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashedFp != nil {
		l = m.SlashedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_JailedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JailedFp != nil {
		l = m.JailedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_UnjailedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnjailedFp != nil {
		l = m.UnjailedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_BtcDelStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcDelStateUpdate != nil {
		l = m.BtcDelStateUpdate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ParamsVersion != 0 {
		n += 1 + sovEvents(uint64(m.ParamsVersion))
	}
	if len(m.FinalityProviderBtcPksHex) > 0 {
		for _, s := range m.FinalityProviderBtcPksHex {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.StakerBtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Timelock != 0 {
		n += 1 + sovEvents(uint64(m.Timelock))
	}
	if m.StakingAmount != 0 {
		n += 1 + sovEvents(uint64(m.StakingAmount))
	}
	if m.UnbondingTime != 0 {
		n += 1 + sovEvents(uint64(m.UnbondingTime))
	}
	l = len(m.UnbondingTx)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCovenantSignatureRecevied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CovenantBtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CovenantUnbondingSignatureHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationInclusionProofReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovEvents(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovEvents(uint64(m.EndHeight))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventNewFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fp == nil {
				m.Fp = &FinalityProvider{}
			}
			if err := m.Fp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			m.NewState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewState |= BTCDelegationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSelectiveSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSelectiveSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSelectiveSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &SelectiveSlashingEvidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPowerDistUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPowerDistUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventSlashedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_SlashedFp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventJailedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_JailedFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnjailedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventUnjailedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_UnjailedFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelStateUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventBTCDelegationStateUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_BtcDelStateUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSlashedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSlashedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventJailedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventJailedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnjailedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnjailedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsVersion", wireType)
			}
			m.ParamsVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamsVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviderBtcPksHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviderBtcPksHex = append(m.FinalityProviderBtcPksHex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelock", wireType)
			}
			m.Timelock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingAmount", wireType)
			}
			m.StakingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			m.UnbondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCovenantSignatureRecevied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCovenantSignatureRecevied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCovenantSignatureRecevied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantUnbondingSignatureHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantUnbondingSignatureHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationInclusionProofReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationInclusionProofReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationInclusionProofReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
