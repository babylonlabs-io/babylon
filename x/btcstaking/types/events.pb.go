// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/events.proto

package types

import (
	fmt "fmt"
	github_com_babylonlabs_io_babylon_types "github.com/babylonlabs-io/babylon/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventNewFinalityProvider is the event emitted when a finality provider is created
type EventNewFinalityProvider struct {
	Fp *FinalityProvider `protobuf:"bytes,1,opt,name=fp,proto3" json:"fp,omitempty"`
}

func (m *EventNewFinalityProvider) Reset()         { *m = EventNewFinalityProvider{} }
func (m *EventNewFinalityProvider) String() string { return proto.CompactTextString(m) }
func (*EventNewFinalityProvider) ProtoMessage()    {}
func (*EventNewFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{0}
}
func (m *EventNewFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewFinalityProvider.Merge(m, src)
}
func (m *EventNewFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventNewFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewFinalityProvider proto.InternalMessageInfo

func (m *EventNewFinalityProvider) GetFp() *FinalityProvider {
	if m != nil {
		return m.Fp
	}
	return nil
}

// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
// updated. There are the following possible state transitions:
// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
// - pending -> active, which happens upon `MsgAddCovenantSigs`
// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
type EventBTCDelegationStateUpdate struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// new_state is the new state of this BTC delegation
	NewState BTCDelegationStatus `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=babylon.btcstaking.v1.BTCDelegationStatus" json:"new_state,omitempty"`
}

func (m *EventBTCDelegationStateUpdate) Reset()         { *m = EventBTCDelegationStateUpdate{} }
func (m *EventBTCDelegationStateUpdate) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationStateUpdate) ProtoMessage()    {}
func (*EventBTCDelegationStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{1}
}
func (m *EventBTCDelegationStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationStateUpdate.Merge(m, src)
}
func (m *EventBTCDelegationStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationStateUpdate proto.InternalMessageInfo

func (m *EventBTCDelegationStateUpdate) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationStateUpdate) GetNewState() BTCDelegationStatus {
	if m != nil {
		return m.NewState
	}
	return BTCDelegationStatus_PENDING
}

// EventSelectiveSlashing is the event emitted when an adversarial
// finality provider selectively slashes a BTC delegation. This will
// result in slashing of all BTC delegations under this finality provider.
type EventSelectiveSlashing struct {
	// evidence is the evidence of selective slashing
	Evidence *SelectiveSlashingEvidence `protobuf:"bytes,1,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *EventSelectiveSlashing) Reset()         { *m = EventSelectiveSlashing{} }
func (m *EventSelectiveSlashing) String() string { return proto.CompactTextString(m) }
func (*EventSelectiveSlashing) ProtoMessage()    {}
func (*EventSelectiveSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{2}
}
func (m *EventSelectiveSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSelectiveSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSelectiveSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSelectiveSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSelectiveSlashing.Merge(m, src)
}
func (m *EventSelectiveSlashing) XXX_Size() int {
	return m.Size()
}
func (m *EventSelectiveSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSelectiveSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_EventSelectiveSlashing proto.InternalMessageInfo

func (m *EventSelectiveSlashing) GetEvidence() *SelectiveSlashingEvidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

// EventPowerDistUpdate is an event that affects voting power distirbution
// of BTC staking protocol
type EventPowerDistUpdate struct {
	// ev is the event that affects voting power distribution
	//
	// Types that are valid to be assigned to Ev:
	//	*EventPowerDistUpdate_SlashedFp
	//	*EventPowerDistUpdate_JailedFp
	//	*EventPowerDistUpdate_UnjailedFp
	//	*EventPowerDistUpdate_BtcDelStateUpdate
	//	*EventPowerDistUpdate_SlashedBtcDelegation
	Ev isEventPowerDistUpdate_Ev `protobuf_oneof:"ev"`
}

func (m *EventPowerDistUpdate) Reset()         { *m = EventPowerDistUpdate{} }
func (m *EventPowerDistUpdate) String() string { return proto.CompactTextString(m) }
func (*EventPowerDistUpdate) ProtoMessage()    {}
func (*EventPowerDistUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3}
}
func (m *EventPowerDistUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate.Merge(m, src)
}
func (m *EventPowerDistUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate proto.InternalMessageInfo

type isEventPowerDistUpdate_Ev interface {
	isEventPowerDistUpdate_Ev()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventPowerDistUpdate_SlashedFp struct {
	SlashedFp *EventPowerDistUpdate_EventSlashedFinalityProvider `protobuf:"bytes,1,opt,name=slashed_fp,json=slashedFp,proto3,oneof" json:"slashed_fp,omitempty"`
}
type EventPowerDistUpdate_JailedFp struct {
	JailedFp *EventPowerDistUpdate_EventJailedFinalityProvider `protobuf:"bytes,2,opt,name=jailed_fp,json=jailedFp,proto3,oneof" json:"jailed_fp,omitempty"`
}
type EventPowerDistUpdate_UnjailedFp struct {
	UnjailedFp *EventPowerDistUpdate_EventUnjailedFinalityProvider `protobuf:"bytes,3,opt,name=unjailed_fp,json=unjailedFp,proto3,oneof" json:"unjailed_fp,omitempty"`
}
type EventPowerDistUpdate_BtcDelStateUpdate struct {
	BtcDelStateUpdate *EventBTCDelegationStateUpdate `protobuf:"bytes,4,opt,name=btc_del_state_update,json=btcDelStateUpdate,proto3,oneof" json:"btc_del_state_update,omitempty"`
}
type EventPowerDistUpdate_SlashedBtcDelegation struct {
	SlashedBtcDelegation *EventPowerDistUpdate_EventSlashedBTCDelegation `protobuf:"bytes,5,opt,name=slashed_btc_delegation,json=slashedBtcDelegation,proto3,oneof" json:"slashed_btc_delegation,omitempty"`
}

func (*EventPowerDistUpdate_SlashedFp) isEventPowerDistUpdate_Ev()            {}
func (*EventPowerDistUpdate_JailedFp) isEventPowerDistUpdate_Ev()             {}
func (*EventPowerDistUpdate_UnjailedFp) isEventPowerDistUpdate_Ev()           {}
func (*EventPowerDistUpdate_BtcDelStateUpdate) isEventPowerDistUpdate_Ev()    {}
func (*EventPowerDistUpdate_SlashedBtcDelegation) isEventPowerDistUpdate_Ev() {}

func (m *EventPowerDistUpdate) GetEv() isEventPowerDistUpdate_Ev {
	if m != nil {
		return m.Ev
	}
	return nil
}

func (m *EventPowerDistUpdate) GetSlashedFp() *EventPowerDistUpdate_EventSlashedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_SlashedFp); ok {
		return x.SlashedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetJailedFp() *EventPowerDistUpdate_EventJailedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_JailedFp); ok {
		return x.JailedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetUnjailedFp() *EventPowerDistUpdate_EventUnjailedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_UnjailedFp); ok {
		return x.UnjailedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetBtcDelStateUpdate() *EventBTCDelegationStateUpdate {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_BtcDelStateUpdate); ok {
		return x.BtcDelStateUpdate
	}
	return nil
}

func (m *EventPowerDistUpdate) GetSlashedBtcDelegation() *EventPowerDistUpdate_EventSlashedBTCDelegation {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_SlashedBtcDelegation); ok {
		return x.SlashedBtcDelegation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventPowerDistUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventPowerDistUpdate_SlashedFp)(nil),
		(*EventPowerDistUpdate_JailedFp)(nil),
		(*EventPowerDistUpdate_UnjailedFp)(nil),
		(*EventPowerDistUpdate_BtcDelStateUpdate)(nil),
		(*EventPowerDistUpdate_SlashedBtcDelegation)(nil),
	}
}

// EventSlashedFinalityProvider defines an event that a finality provider
// is slashed
// TODO: unify with existing slashing events
type EventPowerDistUpdate_EventSlashedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventSlashedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventSlashedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventSlashedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 0}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider proto.InternalMessageInfo

// EventSlashedBTCDelegation is emitted for each BTC delegation that restakes to a slashed consumer finality provider.
// It indicates that the voting power of affected Babylon finality providers will be discounted for this delegation.
type EventPowerDistUpdate_EventSlashedBTCDelegation struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
}

func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) Reset() {
	*m = EventPowerDistUpdate_EventSlashedBTCDelegation{}
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventSlashedBTCDelegation) ProtoMessage() {}
func (*EventPowerDistUpdate_EventSlashedBTCDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 1}
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventSlashedBTCDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedBTCDelegation.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedBTCDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventSlashedBTCDelegation proto.InternalMessageInfo

func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

// EventJailedFinalityProvider defines an event that a finality provider
// is jailed after being detected sluggish
type EventPowerDistUpdate_EventJailedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventJailedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventJailedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventJailedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 2}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider proto.InternalMessageInfo

// EventUnjailedFinalityProvider defines an event that a jailed finality provider
// is unjailed after the jailing period is passed
type EventPowerDistUpdate_EventUnjailedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventUnjailedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventUnjailedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventUnjailedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3, 3}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventNewFinalityProvider)(nil), "babylon.btcstaking.v1.EventNewFinalityProvider")
	proto.RegisterType((*EventBTCDelegationStateUpdate)(nil), "babylon.btcstaking.v1.EventBTCDelegationStateUpdate")
	proto.RegisterType((*EventSelectiveSlashing)(nil), "babylon.btcstaking.v1.EventSelectiveSlashing")
	proto.RegisterType((*EventPowerDistUpdate)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate")
	proto.RegisterType((*EventPowerDistUpdate_EventSlashedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventSlashedFinalityProvider")
	proto.RegisterType((*EventPowerDistUpdate_EventSlashedBTCDelegation)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventSlashedBTCDelegation")
	proto.RegisterType((*EventPowerDistUpdate_EventJailedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventJailedFinalityProvider")
	proto.RegisterType((*EventPowerDistUpdate_EventUnjailedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventUnjailedFinalityProvider")
}

func init() {
	proto.RegisterFile("babylon/btcstaking/v1/events.proto", fileDescriptor_74118427820fff75)
}

var fileDescriptor_74118427820fff75 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x6d, 0x53, 0xa0, 0x99, 0xf2, 0x23, 0xac, 0x50, 0x85, 0x00, 0xa6, 0xca, 0xa2, 0x54,
	0x48, 0xd8, 0xfd, 0x89, 0x04, 0x6b, 0x37, 0x49, 0x5d, 0x40, 0x55, 0xe4, 0xb4, 0x1b, 0x36, 0xd6,
	0xd8, 0xb9, 0xb1, 0x87, 0x18, 0xdb, 0xca, 0x4c, 0x9c, 0x64, 0xc1, 0x3b, 0xf4, 0xb1, 0xba, 0xec,
	0x12, 0xb1, 0x40, 0x28, 0x79, 0x11, 0x94, 0xf1, 0xa4, 0x0d, 0x6d, 0x1c, 0xb5, 0xa8, 0xbb, 0xf1,
	0xd5, 0x9c, 0xf3, 0x9d, 0x99, 0xb9, 0xbe, 0xa8, 0xe2, 0x62, 0x77, 0x14, 0xc6, 0x91, 0xe1, 0x32,
	0x8f, 0x32, 0xdc, 0x25, 0x91, 0x6f, 0xa4, 0x3b, 0x06, 0xa4, 0x10, 0x31, 0xaa, 0x27, 0xbd, 0x98,
	0xc5, 0xea, 0x73, 0xb1, 0x47, 0xbf, 0xdc, 0xa3, 0xa7, 0x3b, 0xe5, 0xcd, 0xc5, 0xd2, 0xb9, 0x4d,
	0x5c, 0x5e, 0x2e, 0xfa, 0xb1, 0x1f, 0xf3, 0xa5, 0x31, 0x5d, 0x65, 0xd5, 0x4a, 0x0b, 0x95, 0xea,
	0x53, 0xc8, 0x11, 0x0c, 0x1a, 0x24, 0xc2, 0x21, 0x61, 0xa3, 0x66, 0x2f, 0x4e, 0x49, 0x1b, 0x7a,
	0xea, 0x07, 0xa4, 0x74, 0x92, 0x92, 0xbc, 0x21, 0x6f, 0xad, 0xed, 0xbe, 0xd5, 0x17, 0xd2, 0xf5,
	0xab, 0x22, 0x5b, 0xe9, 0x24, 0x95, 0x53, 0x19, 0xbd, 0xe6, 0xae, 0xe6, 0xf1, 0x7e, 0x0d, 0x42,
	0xf0, 0x31, 0x23, 0x71, 0xd4, 0x62, 0x98, 0xc1, 0x49, 0xd2, 0xc6, 0x0c, 0xd4, 0x4d, 0xf4, 0x54,
	0x98, 0x38, 0x6c, 0xe8, 0x04, 0x98, 0x06, 0x9c, 0x53, 0xb0, 0x1f, 0x8b, 0xf2, 0xf1, 0xd0, 0xc2,
	0x34, 0x50, 0x0f, 0x50, 0x21, 0x82, 0x81, 0x43, 0xa7, 0xd2, 0x92, 0xb2, 0x21, 0x6f, 0x3d, 0xd9,
	0x7d, 0x97, 0x93, 0xe4, 0x1a, 0xab, 0x4f, 0xed, 0xd5, 0x08, 0x06, 0x1c, 0x5b, 0xe9, 0xa0, 0x75,
	0x9e, 0xa8, 0x05, 0x21, 0x78, 0x8c, 0xa4, 0xd0, 0x0a, 0x31, 0x0d, 0x48, 0xe4, 0xab, 0x5f, 0xd0,
	0x2a, 0x4c, 0xa3, 0x47, 0x1e, 0x88, 0xb3, 0x6e, 0xe7, 0x10, 0xae, 0x69, 0xeb, 0x42, 0x67, 0x5f,
	0x38, 0x54, 0xce, 0x1e, 0xa2, 0x22, 0x07, 0x35, 0xe3, 0x01, 0xf4, 0x6a, 0x84, 0x32, 0x71, 0x62,
	0x82, 0x10, 0x9d, 0xca, 0xa0, 0xed, 0x5c, 0x5c, 0xaa, 0x95, 0x03, 0x5a, 0x64, 0x90, 0x15, 0x5b,
	0x99, 0xc5, 0xd5, 0x5b, 0xb7, 0x24, 0xbb, 0x20, 0xdc, 0x1b, 0x89, 0xda, 0x41, 0x85, 0x6f, 0x98,
	0x84, 0x19, 0x49, 0xe1, 0xa4, 0x83, 0x5b, 0x93, 0x3e, 0x71, 0x87, 0x05, 0xa0, 0xd5, 0xcc, 0xbb,
	0x91, 0xa8, 0x21, 0x5a, 0xeb, 0x47, 0x97, 0xa4, 0x7b, 0x9c, 0x74, 0x78, 0x6b, 0xd2, 0x89, 0xf0,
	0x58, 0xc0, 0x42, 0x33, 0xff, 0x46, 0xa2, 0xfa, 0xa8, 0xe8, 0x32, 0xcf, 0x69, 0x43, 0x98, 0xb5,
	0x83, 0xd3, 0xe7, 0x1e, 0xa5, 0x15, 0x8e, 0xad, 0x2e, 0xc3, 0xe6, 0xb5, 0xa1, 0x25, 0xd9, 0xcf,
	0x5c, 0xe6, 0xd5, 0x20, 0x9c, 0xef, 0xcd, 0x1f, 0x68, 0x7d, 0xf6, 0x52, 0x02, 0x28, 0x94, 0xa5,
	0xfb, 0x1c, 0x55, 0xff, 0xdf, 0x57, 0xfb, 0x27, 0x86, 0x25, 0xd9, 0x45, 0x81, 0x31, 0x79, 0x04,
	0x51, 0x2f, 0x07, 0xe8, 0xd5, 0xb2, 0xa7, 0x56, 0x2d, 0xa4, 0x24, 0x5d, 0xde, 0x40, 0x8f, 0xcc,
	0x8f, 0xbf, 0x7e, 0xbf, 0xa9, 0xfa, 0x84, 0x05, 0x7d, 0x57, 0xf7, 0xe2, 0xef, 0x86, 0x08, 0x16,
	0x62, 0x97, 0xbe, 0x27, 0xf1, 0xec, 0xd3, 0x60, 0xa3, 0x04, 0xa8, 0x6e, 0x1e, 0x36, 0xf7, 0xaa,
	0xdb, 0xcd, 0xbe, 0xfb, 0x19, 0x46, 0xb6, 0x92, 0x74, 0xcb, 0xfb, 0xe8, 0x45, 0x6e, 0xbc, 0x9b,
	0xfe, 0xa1, 0x65, 0x1f, 0xbd, 0x5c, 0xd2, 0x2f, 0x77, 0x98, 0x96, 0x88, 0x99, 0x92, 0xd7, 0x2e,
	0x77, 0x87, 0x32, 0x57, 0x90, 0x02, 0xa9, 0x79, 0x74, 0x36, 0xd6, 0xe4, 0xf3, 0xb1, 0x26, 0xff,
	0x19, 0x6b, 0xf2, 0xe9, 0x44, 0x93, 0xce, 0x27, 0x9a, 0xf4, 0x73, 0xa2, 0x49, 0x5f, 0x6f, 0xe0,
	0x3c, 0x9c, 0x1f, 0xc7, 0x1c, 0xe3, 0x3e, 0xe0, 0x13, 0x77, 0xef, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x44, 0x44, 0x28, 0x4c, 0xec, 0x05, 0x00, 0x00,
}

func (m *EventNewFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fp != nil {
		{
			size, err := m.Fp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewState != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewState))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSelectiveSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSelectiveSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSelectiveSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ev != nil {
		{
			size := m.Ev.Size()
			i -= size
			if _, err := m.Ev.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_SlashedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_SlashedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlashedFp != nil {
		{
			size, err := m.SlashedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_JailedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_JailedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JailedFp != nil {
		{
			size, err := m.JailedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_UnjailedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_UnjailedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnjailedFp != nil {
		{
			size, err := m.UnjailedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_BtcDelStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_BtcDelStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BtcDelStateUpdate != nil {
		{
			size, err := m.BtcDelStateUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_SlashedBtcDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_SlashedBtcDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlashedBtcDelegation != nil {
		{
			size, err := m.SlashedBtcDelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventNewFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fp != nil {
		l = m.Fp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NewState != 0 {
		n += 1 + sovEvents(uint64(m.NewState))
	}
	return n
}

func (m *EventSelectiveSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ev != nil {
		n += m.Ev.Size()
	}
	return n
}

func (m *EventPowerDistUpdate_SlashedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashedFp != nil {
		l = m.SlashedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_JailedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JailedFp != nil {
		l = m.JailedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_UnjailedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnjailedFp != nil {
		l = m.UnjailedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_BtcDelStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcDelStateUpdate != nil {
		l = m.BtcDelStateUpdate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_SlashedBtcDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashedBtcDelegation != nil {
		l = m.SlashedBtcDelegation.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventNewFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fp == nil {
				m.Fp = &FinalityProvider{}
			}
			if err := m.Fp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			m.NewState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewState |= BTCDelegationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSelectiveSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSelectiveSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSelectiveSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &SelectiveSlashingEvidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPowerDistUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPowerDistUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventSlashedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_SlashedFp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventJailedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_JailedFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnjailedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventUnjailedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_UnjailedFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelStateUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventBTCDelegationStateUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_BtcDelStateUpdate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBtcDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventSlashedBTCDelegation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_SlashedBtcDelegation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSlashedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSlashedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventSlashedBTCDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSlashedBTCDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSlashedBTCDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventJailedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventJailedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnjailedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnjailedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
