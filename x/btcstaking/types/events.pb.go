// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/events.proto

package types

import (
	fmt "fmt"
	github_com_babylonlabs_io_babylon_v3_types "github.com/babylonlabs-io/babylon/v3/types"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FinalityProviderStatus is the status of a finality provider.
type FinalityProviderStatus int32

const (
	// FINALITY_PROVIDER_STATUS_INACTIVE defines a finality provider that does not have sufficient
	// delegations or does not have timestamped public randomness.
	FinalityProviderStatus_FINALITY_PROVIDER_STATUS_INACTIVE FinalityProviderStatus = 0
	// FINALITY_PROVIDER_STATUS_ACTIVE defines a finality provider that have sufficient delegations
	// and have timestamped public randomness.
	FinalityProviderStatus_FINALITY_PROVIDER_STATUS_ACTIVE FinalityProviderStatus = 1
	// FINALITY_PROVIDER_STATUS_JAILED defines a finality provider that is jailed due to downtime
	FinalityProviderStatus_FINALITY_PROVIDER_STATUS_JAILED FinalityProviderStatus = 2
	// FINALITY_PROVIDER_STATUS_SLASHED defines a finality provider that is slashed due to double-sign
	FinalityProviderStatus_FINALITY_PROVIDER_STATUS_SLASHED FinalityProviderStatus = 3
)

var FinalityProviderStatus_name = map[int32]string{
	0: "FINALITY_PROVIDER_STATUS_INACTIVE",
	1: "FINALITY_PROVIDER_STATUS_ACTIVE",
	2: "FINALITY_PROVIDER_STATUS_JAILED",
	3: "FINALITY_PROVIDER_STATUS_SLASHED",
}

var FinalityProviderStatus_value = map[string]int32{
	"FINALITY_PROVIDER_STATUS_INACTIVE": 0,
	"FINALITY_PROVIDER_STATUS_ACTIVE":   1,
	"FINALITY_PROVIDER_STATUS_JAILED":   2,
	"FINALITY_PROVIDER_STATUS_SLASHED":  3,
}

func (x FinalityProviderStatus) String() string {
	return proto.EnumName(FinalityProviderStatus_name, int32(x))
}

func (FinalityProviderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{0}
}

// EventNewFinalityProvider is the event emitted when new finality provider is created
type EventNewFinalityProvider struct {
	Fp *FinalityProvider `protobuf:"bytes,1,opt,name=fp,proto3" json:"fp,omitempty"`
}

func (m *EventNewFinalityProvider) Reset()         { *m = EventNewFinalityProvider{} }
func (m *EventNewFinalityProvider) String() string { return proto.CompactTextString(m) }
func (*EventNewFinalityProvider) ProtoMessage()    {}
func (*EventNewFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{0}
}
func (m *EventNewFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewFinalityProvider.Merge(m, src)
}
func (m *EventNewFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventNewFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewFinalityProvider proto.InternalMessageInfo

func (m *EventNewFinalityProvider) GetFp() *FinalityProvider {
	if m != nil {
		return m.Fp
	}
	return nil
}

// EventFinalityProviderCreated is the event emitted when a finality provider is created
type EventFinalityProviderCreated struct {
	// btc_pk_hex is the hex string of Bitcoin secp256k1 PK of this finality provider
	BtcPkHex string `protobuf:"bytes,1,opt,name=btc_pk_hex,json=btcPkHex,proto3" json:"btc_pk_hex,omitempty"`
	// addr is the babylon address to receive commission from delegations.
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// commission defines the commission rate of the finality provider in decimals.
	Commission string `protobuf:"bytes,3,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker defines a human-readable name for the finality provider.
	Moniker string `protobuf:"bytes,4,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,7,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details define other optional details.
	Details string `protobuf:"bytes,8,opt,name=details,proto3" json:"details,omitempty"`
	// bsn_id is the id of the BSN
	BsnId string `protobuf:"bytes,9,opt,name=bsn_id,json=bsnId,proto3" json:"bsn_id,omitempty"`
}

func (m *EventFinalityProviderCreated) Reset()         { *m = EventFinalityProviderCreated{} }
func (m *EventFinalityProviderCreated) String() string { return proto.CompactTextString(m) }
func (*EventFinalityProviderCreated) ProtoMessage()    {}
func (*EventFinalityProviderCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{1}
}
func (m *EventFinalityProviderCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFinalityProviderCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFinalityProviderCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFinalityProviderCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFinalityProviderCreated.Merge(m, src)
}
func (m *EventFinalityProviderCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventFinalityProviderCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFinalityProviderCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventFinalityProviderCreated proto.InternalMessageInfo

func (m *EventFinalityProviderCreated) GetBtcPkHex() string {
	if m != nil {
		return m.BtcPkHex
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *EventFinalityProviderCreated) GetBsnId() string {
	if m != nil {
		return m.BsnId
	}
	return ""
}

// EventFinalityProviderEdited is the event emitted when a finality provider is edited
type EventFinalityProviderEdited struct {
	// btc_pk_hex is the hex string of Bitcoin secp256k1 PK of this finality provider
	BtcPkHex string `protobuf:"bytes,1,opt,name=btc_pk_hex,json=btcPkHex,proto3" json:"btc_pk_hex,omitempty"`
	// commission defines the commission rate of the finality provider in decimals.
	Commission string `protobuf:"bytes,2,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker defines a human-readable name for the finality provider.
	Moniker string `protobuf:"bytes,3,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,5,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,6,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details define other optional details.
	Details string `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *EventFinalityProviderEdited) Reset()         { *m = EventFinalityProviderEdited{} }
func (m *EventFinalityProviderEdited) String() string { return proto.CompactTextString(m) }
func (*EventFinalityProviderEdited) ProtoMessage()    {}
func (*EventFinalityProviderEdited) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{2}
}
func (m *EventFinalityProviderEdited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFinalityProviderEdited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFinalityProviderEdited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFinalityProviderEdited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFinalityProviderEdited.Merge(m, src)
}
func (m *EventFinalityProviderEdited) XXX_Size() int {
	return m.Size()
}
func (m *EventFinalityProviderEdited) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFinalityProviderEdited.DiscardUnknown(m)
}

var xxx_messageInfo_EventFinalityProviderEdited proto.InternalMessageInfo

func (m *EventFinalityProviderEdited) GetBtcPkHex() string {
	if m != nil {
		return m.BtcPkHex
	}
	return ""
}

func (m *EventFinalityProviderEdited) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *EventFinalityProviderEdited) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *EventFinalityProviderEdited) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *EventFinalityProviderEdited) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *EventFinalityProviderEdited) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *EventFinalityProviderEdited) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
// updated. There are the following possible state transitions:
// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
// - pending -> active, which happens upon `MsgAddCovenantSigs`
// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
type EventBTCDelegationStateUpdate struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// new_state is the new state of this BTC delegation
	NewState BTCDelegationStatus `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=babylon.btcstaking.v1.BTCDelegationStatus" json:"new_state,omitempty"`
}

func (m *EventBTCDelegationStateUpdate) Reset()         { *m = EventBTCDelegationStateUpdate{} }
func (m *EventBTCDelegationStateUpdate) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationStateUpdate) ProtoMessage()    {}
func (*EventBTCDelegationStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{3}
}
func (m *EventBTCDelegationStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationStateUpdate.Merge(m, src)
}
func (m *EventBTCDelegationStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationStateUpdate proto.InternalMessageInfo

func (m *EventBTCDelegationStateUpdate) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationStateUpdate) GetNewState() BTCDelegationStatus {
	if m != nil {
		return m.NewState
	}
	return BTCDelegationStatus_PENDING
}

// EventSelectiveSlashing is the event emitted when an adversarial
// finality provider selectively slashes a BTC delegation. This will
// result in slashing of all BTC delegations under this finality provider.
type EventSelectiveSlashing struct {
	// evidence is the evidence of selective slashing
	Evidence *SelectiveSlashingEvidence `protobuf:"bytes,1,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *EventSelectiveSlashing) Reset()         { *m = EventSelectiveSlashing{} }
func (m *EventSelectiveSlashing) String() string { return proto.CompactTextString(m) }
func (*EventSelectiveSlashing) ProtoMessage()    {}
func (*EventSelectiveSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{4}
}
func (m *EventSelectiveSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSelectiveSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSelectiveSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSelectiveSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSelectiveSlashing.Merge(m, src)
}
func (m *EventSelectiveSlashing) XXX_Size() int {
	return m.Size()
}
func (m *EventSelectiveSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSelectiveSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_EventSelectiveSlashing proto.InternalMessageInfo

func (m *EventSelectiveSlashing) GetEvidence() *SelectiveSlashingEvidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

// EventPowerDistUpdate is an event that affects voting power distribution
// of BTC staking protocol
type EventPowerDistUpdate struct {
	// ev is the event that affects voting power distribution
	//
	// Types that are valid to be assigned to Ev:
	//	*EventPowerDistUpdate_SlashedFp
	//	*EventPowerDistUpdate_JailedFp
	//	*EventPowerDistUpdate_UnjailedFp
	//	*EventPowerDistUpdate_BtcDelStateUpdate
	Ev isEventPowerDistUpdate_Ev `protobuf_oneof:"ev"`
}

func (m *EventPowerDistUpdate) Reset()         { *m = EventPowerDistUpdate{} }
func (m *EventPowerDistUpdate) String() string { return proto.CompactTextString(m) }
func (*EventPowerDistUpdate) ProtoMessage()    {}
func (*EventPowerDistUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{5}
}
func (m *EventPowerDistUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate.Merge(m, src)
}
func (m *EventPowerDistUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate proto.InternalMessageInfo

type isEventPowerDistUpdate_Ev interface {
	isEventPowerDistUpdate_Ev()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventPowerDistUpdate_SlashedFp struct {
	SlashedFp *EventPowerDistUpdate_EventSlashedFinalityProvider `protobuf:"bytes,1,opt,name=slashed_fp,json=slashedFp,proto3,oneof" json:"slashed_fp,omitempty"`
}
type EventPowerDistUpdate_JailedFp struct {
	JailedFp *EventPowerDistUpdate_EventJailedFinalityProvider `protobuf:"bytes,2,opt,name=jailed_fp,json=jailedFp,proto3,oneof" json:"jailed_fp,omitempty"`
}
type EventPowerDistUpdate_UnjailedFp struct {
	UnjailedFp *EventPowerDistUpdate_EventUnjailedFinalityProvider `protobuf:"bytes,3,opt,name=unjailed_fp,json=unjailedFp,proto3,oneof" json:"unjailed_fp,omitempty"`
}
type EventPowerDistUpdate_BtcDelStateUpdate struct {
	BtcDelStateUpdate *EventBTCDelegationStateUpdate `protobuf:"bytes,4,opt,name=btc_del_state_update,json=btcDelStateUpdate,proto3,oneof" json:"btc_del_state_update,omitempty"`
}

func (*EventPowerDistUpdate_SlashedFp) isEventPowerDistUpdate_Ev()         {}
func (*EventPowerDistUpdate_JailedFp) isEventPowerDistUpdate_Ev()          {}
func (*EventPowerDistUpdate_UnjailedFp) isEventPowerDistUpdate_Ev()        {}
func (*EventPowerDistUpdate_BtcDelStateUpdate) isEventPowerDistUpdate_Ev() {}

func (m *EventPowerDistUpdate) GetEv() isEventPowerDistUpdate_Ev {
	if m != nil {
		return m.Ev
	}
	return nil
}

func (m *EventPowerDistUpdate) GetSlashedFp() *EventPowerDistUpdate_EventSlashedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_SlashedFp); ok {
		return x.SlashedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetJailedFp() *EventPowerDistUpdate_EventJailedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_JailedFp); ok {
		return x.JailedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetUnjailedFp() *EventPowerDistUpdate_EventUnjailedFinalityProvider {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_UnjailedFp); ok {
		return x.UnjailedFp
	}
	return nil
}

func (m *EventPowerDistUpdate) GetBtcDelStateUpdate() *EventBTCDelegationStateUpdate {
	if x, ok := m.GetEv().(*EventPowerDistUpdate_BtcDelStateUpdate); ok {
		return x.BtcDelStateUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventPowerDistUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventPowerDistUpdate_SlashedFp)(nil),
		(*EventPowerDistUpdate_JailedFp)(nil),
		(*EventPowerDistUpdate_UnjailedFp)(nil),
		(*EventPowerDistUpdate_BtcDelStateUpdate)(nil),
	}
}

// EventSlashedFinalityProvider defines an event that a finality provider
// is slashed
// TODO: unify with existing slashing events
type EventPowerDistUpdate_EventSlashedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventSlashedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventSlashedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventSlashedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{5, 0}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventSlashedFinalityProvider proto.InternalMessageInfo

// EventJailedFinalityProvider defines an event that a finality provider
// is jailed after being detected sluggish
type EventPowerDistUpdate_EventJailedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventJailedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventJailedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventJailedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{5, 1}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventJailedFinalityProvider proto.InternalMessageInfo

// EventUnjailedFinalityProvider defines an event that a jailed finality provider
// is unjailed after the jailing period is passed
type EventPowerDistUpdate_EventUnjailedFinalityProvider struct {
	Pk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"pk,omitempty"`
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Reset() {
	*m = EventPowerDistUpdate_EventUnjailedFinalityProvider{}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) String() string {
	return proto.CompactTextString(m)
}
func (*EventPowerDistUpdate_EventUnjailedFinalityProvider) ProtoMessage() {}
func (*EventPowerDistUpdate_EventUnjailedFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{5, 2}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.Merge(m, src)
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventPowerDistUpdate_EventUnjailedFinalityProvider proto.InternalMessageInfo

// A finality provider starts with status INACTIVE once registered.
// Possible status transitions are when:
// 1. it has accumulated sufficient delegations and has
// timestamped public randomness:
// INACTIVE -> ACTIVE
// 2. it is jailed due to downtime:
// ACTIVE -> JAILED
// 3. it is slashed due to double-sign:
// ACTIVE -> SLASHED
// 4. it is unjailed after a jailing period:
// JAILED -> INACTIVE/ACTIVE (depending on (1))
// 5. it does not have sufficient delegations or does not
// have timestamped public randomness:
// ACTIVE -> INACTIVE.
// Note that it is impossible for a SLASHED finality provider to
// transition to other status
type EventFinalityProviderStatusChange struct {
	// btc_pk is the BTC public key of the finality provider
	BtcPk string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// new_state is the status that the finality provider
	// is transitioned to, following FinalityProviderStatus
	NewState string `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (m *EventFinalityProviderStatusChange) Reset()         { *m = EventFinalityProviderStatusChange{} }
func (m *EventFinalityProviderStatusChange) String() string { return proto.CompactTextString(m) }
func (*EventFinalityProviderStatusChange) ProtoMessage()    {}
func (*EventFinalityProviderStatusChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{6}
}
func (m *EventFinalityProviderStatusChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFinalityProviderStatusChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFinalityProviderStatusChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFinalityProviderStatusChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFinalityProviderStatusChange.Merge(m, src)
}
func (m *EventFinalityProviderStatusChange) XXX_Size() int {
	return m.Size()
}
func (m *EventFinalityProviderStatusChange) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFinalityProviderStatusChange.DiscardUnknown(m)
}

var xxx_messageInfo_EventFinalityProviderStatusChange proto.InternalMessageInfo

func (m *EventFinalityProviderStatusChange) GetBtcPk() string {
	if m != nil {
		return m.BtcPk
	}
	return ""
}

func (m *EventFinalityProviderStatusChange) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

// EventBTCDelegationCreated is the event emitted when a BTC delegation is created
// on the Babylon chain
type EventBTCDelegationCreated struct {
	// staking_tx_hex is the hex encoded staking tx
	StakingTxHex string `protobuf:"bytes,1,opt,name=staking_tx_hex,json=stakingTxHex,proto3" json:"staking_tx_hex,omitempty"`
	// staking_output_index is the index of the staking output in the staking tx
	StakingOutputIndex string `protobuf:"bytes,2,opt,name=staking_output_index,json=stakingOutputIndex,proto3" json:"staking_output_index,omitempty"`
	// version of the params used to validate the delegation
	ParamsVersion string `protobuf:"bytes,3,opt,name=params_version,json=paramsVersion,proto3" json:"params_version,omitempty"`
	// finality_provider_btc_pks_hex is the list of hex str of Bitcoin secp256k1 PK of
	// the finality providers that this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	FinalityProviderBtcPksHex []string `protobuf:"bytes,4,rep,name=finality_provider_btc_pks_hex,json=finalityProviderBtcPksHex,proto3" json:"finality_provider_btc_pks_hex,omitempty"`
	// staker_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the staker that
	// creates this BTC delegation the PK follows encoding in BIP-340 spec
	StakerBtcPkHex string `protobuf:"bytes,5,opt,name=staker_btc_pk_hex,json=stakerBtcPkHex,proto3" json:"staker_btc_pk_hex,omitempty"`
	// staking_time is the timelock of the staking tx specified in the BTC script
	StakingTime string `protobuf:"bytes,6,opt,name=staking_time,json=stakingTime,proto3" json:"staking_time,omitempty"`
	// unbonding_time is the time is timelock on unbonding tx chosen by the staker
	UnbondingTime string `protobuf:"bytes,7,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	// unbonding_tx is hex encoded bytes of the unsigned unbonding tx
	UnbondingTx string `protobuf:"bytes,8,opt,name=unbonding_tx,json=unbondingTx,proto3" json:"unbonding_tx,omitempty"`
	// new_state of the BTC delegation
	NewState string `protobuf:"bytes,9,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	// staker Babylon address
	StakerAddr string `protobuf:"bytes,10,opt,name=staker_addr,json=stakerAddr,proto3" json:"staker_addr,omitempty"`
	// previous_staking_tx_hash_hex is the hex encoded of the hash of the staking tx
	// that was used as input to the stake expansion, if empty it is NOT a stake expansion.
	PreviousStakingTxHashHex string `protobuf:"bytes,11,opt,name=previous_staking_tx_hash_hex,json=previousStakingTxHashHex,proto3" json:"previous_staking_tx_hash_hex,omitempty"`
}

func (m *EventBTCDelegationCreated) Reset()         { *m = EventBTCDelegationCreated{} }
func (m *EventBTCDelegationCreated) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationCreated) ProtoMessage()    {}
func (*EventBTCDelegationCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{7}
}
func (m *EventBTCDelegationCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationCreated.Merge(m, src)
}
func (m *EventBTCDelegationCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationCreated proto.InternalMessageInfo

func (m *EventBTCDelegationCreated) GetStakingTxHex() string {
	if m != nil {
		return m.StakingTxHex
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetStakingOutputIndex() string {
	if m != nil {
		return m.StakingOutputIndex
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetParamsVersion() string {
	if m != nil {
		return m.ParamsVersion
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetFinalityProviderBtcPksHex() []string {
	if m != nil {
		return m.FinalityProviderBtcPksHex
	}
	return nil
}

func (m *EventBTCDelegationCreated) GetStakerBtcPkHex() string {
	if m != nil {
		return m.StakerBtcPkHex
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetStakingTime() string {
	if m != nil {
		return m.StakingTime
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetUnbondingTime() string {
	if m != nil {
		return m.UnbondingTime
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetUnbondingTx() string {
	if m != nil {
		return m.UnbondingTx
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetStakerAddr() string {
	if m != nil {
		return m.StakerAddr
	}
	return ""
}

func (m *EventBTCDelegationCreated) GetPreviousStakingTxHashHex() string {
	if m != nil {
		return m.PreviousStakingTxHashHex
	}
	return ""
}

// EventCovenantSignatureReceived is the event emitted when a covenant committee
// sends valid covenant signatures for a BTC delegation
type EventCovenantSignatureReceived struct {
	// staking_tx_hash is the hash of the staking identifing the BTC delegation
	// that this covenant signature is for
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// covenant_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the
	// covnenat committee that send the signature
	CovenantBtcPkHex string `protobuf:"bytes,2,opt,name=covenant_btc_pk_hex,json=covenantBtcPkHex,proto3" json:"covenant_btc_pk_hex,omitempty"`
	// covenant_unbonding_signature_hex is the hex str of the BIP340 Schnorr
	// signature of the covenant committee on the unbonding tx
	CovenantUnbondingSignatureHex string `protobuf:"bytes,3,opt,name=covenant_unbonding_signature_hex,json=covenantUnbondingSignatureHex,proto3" json:"covenant_unbonding_signature_hex,omitempty"`
	// covenant_stake_expansion_signature_hex is the hex str of the BIP340 Schnorr
	// signature of the covenant committee on the stake expansion tx
	// if delegation was not stake expansion, this field will be an empty string
	CovenantStakeExpansionSignatureHex string `protobuf:"bytes,4,opt,name=covenant_stake_expansion_signature_hex,json=covenantStakeExpansionSignatureHex,proto3" json:"covenant_stake_expansion_signature_hex,omitempty"`
}

func (m *EventCovenantSignatureReceived) Reset()         { *m = EventCovenantSignatureReceived{} }
func (m *EventCovenantSignatureReceived) String() string { return proto.CompactTextString(m) }
func (*EventCovenantSignatureReceived) ProtoMessage()    {}
func (*EventCovenantSignatureReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{8}
}
func (m *EventCovenantSignatureReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCovenantSignatureReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCovenantSignatureReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCovenantSignatureReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCovenantSignatureReceived.Merge(m, src)
}
func (m *EventCovenantSignatureReceived) XXX_Size() int {
	return m.Size()
}
func (m *EventCovenantSignatureReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCovenantSignatureReceived.DiscardUnknown(m)
}

var xxx_messageInfo_EventCovenantSignatureReceived proto.InternalMessageInfo

func (m *EventCovenantSignatureReceived) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventCovenantSignatureReceived) GetCovenantBtcPkHex() string {
	if m != nil {
		return m.CovenantBtcPkHex
	}
	return ""
}

func (m *EventCovenantSignatureReceived) GetCovenantUnbondingSignatureHex() string {
	if m != nil {
		return m.CovenantUnbondingSignatureHex
	}
	return ""
}

func (m *EventCovenantSignatureReceived) GetCovenantStakeExpansionSignatureHex() string {
	if m != nil {
		return m.CovenantStakeExpansionSignatureHex
	}
	return ""
}

// EventCovenantQuorumReached is the event emitted quorum of covenant committee
// is reached for a BTC delegation
type EventCovenantQuorumReached struct {
	// staking_tx_hash is the hash of the staking identifing the BTC delegation
	// that this covenant signature is for
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// new_state of the BTC delegation
	NewState string `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (m *EventCovenantQuorumReached) Reset()         { *m = EventCovenantQuorumReached{} }
func (m *EventCovenantQuorumReached) String() string { return proto.CompactTextString(m) }
func (*EventCovenantQuorumReached) ProtoMessage()    {}
func (*EventCovenantQuorumReached) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{9}
}
func (m *EventCovenantQuorumReached) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCovenantQuorumReached) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCovenantQuorumReached.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCovenantQuorumReached) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCovenantQuorumReached.Merge(m, src)
}
func (m *EventCovenantQuorumReached) XXX_Size() int {
	return m.Size()
}
func (m *EventCovenantQuorumReached) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCovenantQuorumReached.DiscardUnknown(m)
}

var xxx_messageInfo_EventCovenantQuorumReached proto.InternalMessageInfo

func (m *EventCovenantQuorumReached) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventCovenantQuorumReached) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

// EventBTCDelegationInclusionProofReceived is the event emitted when a BTC delegation
// inclusion proof is received
type EventBTCDelegationInclusionProofReceived struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// start_height is the start BTC height of the BTC delegation
	// it is the start BTC height of the timelock
	StartHeight string `protobuf:"bytes,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// end_height is the end height of the BTC delegation
	// it is calculated by end_height = start_height + staking_time
	EndHeight string `protobuf:"bytes,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// new_state of the BTC delegation
	NewState string `protobuf:"bytes,4,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (m *EventBTCDelegationInclusionProofReceived) Reset() {
	*m = EventBTCDelegationInclusionProofReceived{}
}
func (m *EventBTCDelegationInclusionProofReceived) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationInclusionProofReceived) ProtoMessage()    {}
func (*EventBTCDelegationInclusionProofReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{10}
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationInclusionProofReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationInclusionProofReceived.Merge(m, src)
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationInclusionProofReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationInclusionProofReceived.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationInclusionProofReceived proto.InternalMessageInfo

func (m *EventBTCDelegationInclusionProofReceived) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationInclusionProofReceived) GetStartHeight() string {
	if m != nil {
		return m.StartHeight
	}
	return ""
}

func (m *EventBTCDelegationInclusionProofReceived) GetEndHeight() string {
	if m != nil {
		return m.EndHeight
	}
	return ""
}

func (m *EventBTCDelegationInclusionProofReceived) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

// EventBTCDelgationUnbondedEarly is the event emitted when a BTC delegation
// is unbonded by staker sending unbonding tx to BTC
type EventBTCDelgationUnbondedEarly struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// start_height is the start BTC height of the early unbonding
	StartHeight string `protobuf:"bytes,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// new_state of the BTC delegation
	NewState string `protobuf:"bytes,3,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	// stake_expansion_tx_hash is the hash of the stake expansion transaction
	// This field is only set if the delegation was expanded
	StakeExpansionTxHash string `protobuf:"bytes,4,opt,name=stake_expansion_tx_hash,json=stakeExpansionTxHash,proto3" json:"stake_expansion_tx_hash,omitempty"`
}

func (m *EventBTCDelgationUnbondedEarly) Reset()         { *m = EventBTCDelgationUnbondedEarly{} }
func (m *EventBTCDelgationUnbondedEarly) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelgationUnbondedEarly) ProtoMessage()    {}
func (*EventBTCDelgationUnbondedEarly) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{11}
}
func (m *EventBTCDelgationUnbondedEarly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelgationUnbondedEarly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelgationUnbondedEarly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelgationUnbondedEarly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelgationUnbondedEarly.Merge(m, src)
}
func (m *EventBTCDelgationUnbondedEarly) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelgationUnbondedEarly) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelgationUnbondedEarly.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelgationUnbondedEarly proto.InternalMessageInfo

func (m *EventBTCDelgationUnbondedEarly) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelgationUnbondedEarly) GetStartHeight() string {
	if m != nil {
		return m.StartHeight
	}
	return ""
}

func (m *EventBTCDelgationUnbondedEarly) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

func (m *EventBTCDelgationUnbondedEarly) GetStakeExpansionTxHash() string {
	if m != nil {
		return m.StakeExpansionTxHash
	}
	return ""
}

// EventBTCDelegationExpired is the event emitted when a BTC delegation
// is unbonded by expiration of the staking tx timelock
type EventBTCDelegationExpired struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// new_state of the BTC delegation
	NewState string `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (m *EventBTCDelegationExpired) Reset()         { *m = EventBTCDelegationExpired{} }
func (m *EventBTCDelegationExpired) String() string { return proto.CompactTextString(m) }
func (*EventBTCDelegationExpired) ProtoMessage()    {}
func (*EventBTCDelegationExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{12}
}
func (m *EventBTCDelegationExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBTCDelegationExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBTCDelegationExpired.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBTCDelegationExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBTCDelegationExpired.Merge(m, src)
}
func (m *EventBTCDelegationExpired) XXX_Size() int {
	return m.Size()
}
func (m *EventBTCDelegationExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBTCDelegationExpired.DiscardUnknown(m)
}

var xxx_messageInfo_EventBTCDelegationExpired proto.InternalMessageInfo

func (m *EventBTCDelegationExpired) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventBTCDelegationExpired) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

// EventUnexpectedUnbondingTx is the event emitted when an unbonding tx is
// is different that the one registered in the BTC delegation.
type EventUnexpectedUnbondingTx struct {
	// staking_tx_hash uniquely identifies a BTC delegation being unbonded
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// spend_stake_tx_hash has of the transactin spending staking output
	SpendStakeTxHash string `protobuf:"bytes,2,opt,name=spend_stake_tx_hash,json=spendStakeTxHash,proto3" json:"spend_stake_tx_hash,omitempty"`
	// spend_stake_tx_header_hash is the hash of the header of the block that
	// includes the spend_stake_tx
	SpendStakeTxHeaderHash string `protobuf:"bytes,3,opt,name=spend_stake_tx_header_hash,json=spendStakeTxHeaderHash,proto3" json:"spend_stake_tx_header_hash,omitempty"`
	// spend_stake_tx_block_index is the spend_stake_tx index in the block
	SpendStakeTxBlockIndex uint32 `protobuf:"varint,4,opt,name=spend_stake_tx_block_index,json=spendStakeTxBlockIndex,proto3" json:"spend_stake_tx_block_index,omitempty"`
}

func (m *EventUnexpectedUnbondingTx) Reset()         { *m = EventUnexpectedUnbondingTx{} }
func (m *EventUnexpectedUnbondingTx) String() string { return proto.CompactTextString(m) }
func (*EventUnexpectedUnbondingTx) ProtoMessage()    {}
func (*EventUnexpectedUnbondingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{13}
}
func (m *EventUnexpectedUnbondingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUnexpectedUnbondingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUnexpectedUnbondingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUnexpectedUnbondingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUnexpectedUnbondingTx.Merge(m, src)
}
func (m *EventUnexpectedUnbondingTx) XXX_Size() int {
	return m.Size()
}
func (m *EventUnexpectedUnbondingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUnexpectedUnbondingTx.DiscardUnknown(m)
}

var xxx_messageInfo_EventUnexpectedUnbondingTx proto.InternalMessageInfo

func (m *EventUnexpectedUnbondingTx) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *EventUnexpectedUnbondingTx) GetSpendStakeTxHash() string {
	if m != nil {
		return m.SpendStakeTxHash
	}
	return ""
}

func (m *EventUnexpectedUnbondingTx) GetSpendStakeTxHeaderHash() string {
	if m != nil {
		return m.SpendStakeTxHeaderHash
	}
	return ""
}

func (m *EventUnexpectedUnbondingTx) GetSpendStakeTxBlockIndex() uint32 {
	if m != nil {
		return m.SpendStakeTxBlockIndex
	}
	return 0
}

// EventAddBsnRewards event that rewards were added for BSN finality providers
type EventAddBsnRewards struct {
	// Sender is the babylon address which paid for the rewards
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// BsnConsumerId is the ID of the BSN consumer
	BsnConsumerId string `protobuf:"bytes,2,opt,name=bsn_consumer_id,json=bsnConsumerId,proto3" json:"bsn_consumer_id,omitempty"`
	// TotalRewards is the total amount of rewards that were distributed
	TotalRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=total_rewards,json=totalRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_rewards"`
	// BabylonCommission is the amount of commission collected by Babylon
	BabylonCommission github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=babylon_commission,json=babylonCommission,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"babylon_commission"`
	// FpRatios contains the finality providers and their respective reward ratios
	FpRatios []EventFpRewardInfo `protobuf:"bytes,5,rep,name=fp_ratios,json=fpRatios,proto3" json:"fp_ratios"`
}

func (m *EventAddBsnRewards) Reset()         { *m = EventAddBsnRewards{} }
func (m *EventAddBsnRewards) String() string { return proto.CompactTextString(m) }
func (*EventAddBsnRewards) ProtoMessage()    {}
func (*EventAddBsnRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{14}
}
func (m *EventAddBsnRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddBsnRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddBsnRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddBsnRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddBsnRewards.Merge(m, src)
}
func (m *EventAddBsnRewards) XXX_Size() int {
	return m.Size()
}
func (m *EventAddBsnRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddBsnRewards.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddBsnRewards proto.InternalMessageInfo

func (m *EventAddBsnRewards) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventAddBsnRewards) GetBsnConsumerId() string {
	if m != nil {
		return m.BsnConsumerId
	}
	return ""
}

func (m *EventAddBsnRewards) GetTotalRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalRewards
	}
	return nil
}

func (m *EventAddBsnRewards) GetBabylonCommission() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.BabylonCommission
	}
	return nil
}

func (m *EventAddBsnRewards) GetFpRatios() []EventFpRewardInfo {
	if m != nil {
		return m.FpRatios
	}
	return nil
}

// EventFpRewardInfo contains finality provider reward information for events
type EventFpRewardInfo struct {
	// BtcPK is the Bitcoin secp256k1 PK of the finality provider
	FpBtcPkHex string `protobuf:"bytes,1,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
	// TotalRewards is the total amount allocated to this finality provider
	TotalRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_rewards,json=totalRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_rewards"`
}

func (m *EventFpRewardInfo) Reset()         { *m = EventFpRewardInfo{} }
func (m *EventFpRewardInfo) String() string { return proto.CompactTextString(m) }
func (*EventFpRewardInfo) ProtoMessage()    {}
func (*EventFpRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_74118427820fff75, []int{15}
}
func (m *EventFpRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFpRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFpRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFpRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFpRewardInfo.Merge(m, src)
}
func (m *EventFpRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *EventFpRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFpRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventFpRewardInfo proto.InternalMessageInfo

func (m *EventFpRewardInfo) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

func (m *EventFpRewardInfo) GetTotalRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalRewards
	}
	return nil
}

func init() {
	proto.RegisterEnum("babylon.btcstaking.v1.FinalityProviderStatus", FinalityProviderStatus_name, FinalityProviderStatus_value)
	proto.RegisterType((*EventNewFinalityProvider)(nil), "babylon.btcstaking.v1.EventNewFinalityProvider")
	proto.RegisterType((*EventFinalityProviderCreated)(nil), "babylon.btcstaking.v1.EventFinalityProviderCreated")
	proto.RegisterType((*EventFinalityProviderEdited)(nil), "babylon.btcstaking.v1.EventFinalityProviderEdited")
	proto.RegisterType((*EventBTCDelegationStateUpdate)(nil), "babylon.btcstaking.v1.EventBTCDelegationStateUpdate")
	proto.RegisterType((*EventSelectiveSlashing)(nil), "babylon.btcstaking.v1.EventSelectiveSlashing")
	proto.RegisterType((*EventPowerDistUpdate)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate")
	proto.RegisterType((*EventPowerDistUpdate_EventSlashedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventSlashedFinalityProvider")
	proto.RegisterType((*EventPowerDistUpdate_EventJailedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventJailedFinalityProvider")
	proto.RegisterType((*EventPowerDistUpdate_EventUnjailedFinalityProvider)(nil), "babylon.btcstaking.v1.EventPowerDistUpdate.EventUnjailedFinalityProvider")
	proto.RegisterType((*EventFinalityProviderStatusChange)(nil), "babylon.btcstaking.v1.EventFinalityProviderStatusChange")
	proto.RegisterType((*EventBTCDelegationCreated)(nil), "babylon.btcstaking.v1.EventBTCDelegationCreated")
	proto.RegisterType((*EventCovenantSignatureReceived)(nil), "babylon.btcstaking.v1.EventCovenantSignatureReceived")
	proto.RegisterType((*EventCovenantQuorumReached)(nil), "babylon.btcstaking.v1.EventCovenantQuorumReached")
	proto.RegisterType((*EventBTCDelegationInclusionProofReceived)(nil), "babylon.btcstaking.v1.EventBTCDelegationInclusionProofReceived")
	proto.RegisterType((*EventBTCDelgationUnbondedEarly)(nil), "babylon.btcstaking.v1.EventBTCDelgationUnbondedEarly")
	proto.RegisterType((*EventBTCDelegationExpired)(nil), "babylon.btcstaking.v1.EventBTCDelegationExpired")
	proto.RegisterType((*EventUnexpectedUnbondingTx)(nil), "babylon.btcstaking.v1.EventUnexpectedUnbondingTx")
	proto.RegisterType((*EventAddBsnRewards)(nil), "babylon.btcstaking.v1.EventAddBsnRewards")
	proto.RegisterType((*EventFpRewardInfo)(nil), "babylon.btcstaking.v1.EventFpRewardInfo")
}

func init() {
	proto.RegisterFile("babylon/btcstaking/v1/events.proto", fileDescriptor_74118427820fff75)
}

var fileDescriptor_74118427820fff75 = []byte{
	// 1614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcb, 0x6f, 0x13, 0xcf,
	0x1d, 0x8f, 0x1f, 0x79, 0x78, 0x9c, 0xe4, 0x97, 0x4c, 0x53, 0xea, 0xa4, 0xe0, 0x04, 0x03, 0xa9,
	0x4b, 0x1b, 0x3b, 0x09, 0x54, 0x1c, 0x2a, 0x55, 0xb2, 0x1d, 0x07, 0x1b, 0xa2, 0x10, 0xd6, 0x09,
	0x12, 0xbd, 0xac, 0xf6, 0x31, 0xb6, 0x07, 0xaf, 0x67, 0x57, 0x3b, 0x63, 0xc7, 0xe9, 0x3f, 0xd0,
	0x53, 0x25, 0xfe, 0x8c, 0xb6, 0x17, 0x38, 0xf4, 0xc0, 0x9f, 0xc0, 0xa5, 0x12, 0xaa, 0x7a, 0xa8,
	0x7a, 0xa0, 0x15, 0x1c, 0xfa, 0x5f, 0x54, 0xd5, 0x3c, 0xd6, 0xde, 0x75, 0x6c, 0x48, 0x2a, 0xb8,
	0x40, 0x76, 0xe6, 0xf3, 0x7d, 0x7d, 0xe6, 0xfb, 0x98, 0x31, 0xc8, 0x99, 0x86, 0x79, 0xe1, 0xb8,
	0xa4, 0x68, 0x32, 0x8b, 0x32, 0xa3, 0x83, 0x49, 0xab, 0xd8, 0xdf, 0x2b, 0xa2, 0x3e, 0x22, 0x8c,
	0x16, 0x3c, 0xdf, 0x65, 0x2e, 0xfc, 0xb1, 0xc2, 0x14, 0x46, 0x98, 0x42, 0x7f, 0x6f, 0x63, 0xad,
	0xe5, 0xb6, 0x5c, 0x81, 0x28, 0xf2, 0xbf, 0x24, 0x78, 0x63, 0x7b, 0xb2, 0xc2, 0x90, 0xa8, 0xc4,
	0xad, 0x1a, 0x5d, 0x4c, 0xdc, 0xa2, 0xf8, 0x57, 0x2d, 0xad, 0x5b, 0x2e, 0xed, 0xba, 0x54, 0x97,
	0x3a, 0xe5, 0x87, 0xda, 0xca, 0xca, 0xaf, 0xa2, 0x69, 0x50, 0x54, 0xec, 0xef, 0x99, 0x88, 0x19,
	0x7b, 0x45, 0xcb, 0xc5, 0x44, 0xee, 0xe7, 0x1a, 0x20, 0x53, 0xe5, 0x2e, 0x1f, 0xa3, 0xf3, 0x43,
	0x4c, 0x0c, 0x07, 0xb3, 0x8b, 0x13, 0xdf, 0xed, 0x63, 0x1b, 0xf9, 0xf0, 0x11, 0x88, 0x37, 0xbd,
	0x4c, 0x6c, 0x2b, 0x96, 0x4f, 0xef, 0xff, 0xac, 0x30, 0x31, 0x96, 0xc2, 0xb8, 0x90, 0x16, 0x6f,
	0x7a, 0xb9, 0x77, 0x71, 0x70, 0x53, 0x68, 0x1d, 0xdf, 0xad, 0xf8, 0xc8, 0x60, 0xc8, 0x86, 0x77,
	0x00, 0x30, 0x99, 0xa5, 0x7b, 0x1d, 0xbd, 0x8d, 0x06, 0xc2, 0x42, 0xaa, 0x3c, 0xfb, 0xc7, 0xff,
	0xbc, 0xbd, 0x1f, 0xd3, 0x16, 0x4c, 0x66, 0x9d, 0x74, 0x6a, 0x68, 0x00, 0xd7, 0x41, 0xd2, 0xb0,
	0x6d, 0x3f, 0x13, 0x0f, 0x6f, 0x8b, 0x25, 0x78, 0x0f, 0x00, 0xcb, 0xed, 0x76, 0x31, 0xa5, 0xd8,
	0x25, 0x99, 0x44, 0x18, 0x10, 0xda, 0x80, 0x19, 0x30, 0xdf, 0x75, 0x09, 0xee, 0x20, 0x3f, 0x93,
	0xe4, 0x18, 0x2d, 0xf8, 0x84, 0x1b, 0x60, 0x01, 0xdb, 0x88, 0x30, 0xcc, 0x2e, 0x32, 0xb3, 0x62,
	0x6b, 0xf8, 0xcd, 0xa5, 0xce, 0x91, 0x49, 0x31, 0x43, 0x99, 0x39, 0x29, 0xa5, 0x3e, 0xe1, 0xcf,
	0xc1, 0x0a, 0x45, 0x56, 0xcf, 0xc7, 0xec, 0x42, 0xb7, 0x5c, 0xc2, 0x0c, 0x8b, 0x65, 0xe6, 0x05,
	0xe4, 0x87, 0x60, 0xbd, 0x22, 0x97, 0xb9, 0x12, 0x1b, 0x31, 0x03, 0x3b, 0x34, 0xb3, 0x20, 0x95,
	0xa8, 0x4f, 0x78, 0x13, 0xcc, 0x99, 0x94, 0xe8, 0xd8, 0xce, 0xa4, 0xc2, 0x7e, 0xcf, 0x9a, 0x94,
	0xd4, 0xed, 0xdc, 0x7f, 0x63, 0xe0, 0xa7, 0x13, 0xa9, 0xab, 0xda, 0xf8, 0xca, 0xcc, 0x45, 0xe9,
	0x89, 0x5f, 0x81, 0x9e, 0xc4, 0x74, 0x7a, 0x92, 0xd3, 0xe9, 0x99, 0xfd, 0x3a, 0x3d, 0x73, 0x5f,
	0xa5, 0x67, 0x3e, 0x42, 0x4f, 0xee, 0x75, 0x0c, 0xdc, 0x12, 0x04, 0x94, 0x4f, 0x2b, 0x07, 0xc8,
	0x41, 0x2d, 0x83, 0x61, 0x97, 0x34, 0x98, 0xc1, 0xd0, 0x99, 0x67, 0x1b, 0x0c, 0xc1, 0x6d, 0xf0,
	0x83, 0x4a, 0x40, 0x9d, 0x0d, 0xf4, 0xb6, 0x41, 0xdb, 0x92, 0x07, 0x6d, 0x49, 0x2d, 0x9f, 0x0e,
	0x6a, 0x06, 0x6d, 0xc3, 0xc7, 0x20, 0x45, 0xd0, 0xb9, 0x4e, 0xb9, 0xa8, 0x20, 0x61, 0x79, 0xff,
	0xfe, 0x94, 0x2c, 0xbe, 0x64, 0xab, 0x47, 0xb5, 0x05, 0x82, 0xce, 0x85, 0xd9, 0x5c, 0x13, 0xdc,
	0x10, 0x1e, 0x35, 0x90, 0x83, 0x2c, 0x86, 0xfb, 0xa8, 0xe1, 0x18, 0xb4, 0x8d, 0x49, 0x0b, 0x1e,
	0x81, 0x05, 0xc4, 0x4f, 0x87, 0x58, 0x48, 0xd5, 0xc9, 0xee, 0x14, 0x0b, 0x97, 0x64, 0xab, 0x4a,
	0x4e, 0x1b, 0x6a, 0xc8, 0xfd, 0x61, 0x0e, 0xac, 0x09, 0x43, 0x27, 0xee, 0x39, 0xf2, 0x0f, 0x30,
	0x65, 0x2a, 0x62, 0x0c, 0x00, 0xe5, 0x62, 0xc8, 0xd6, 0x87, 0x05, 0x59, 0x9b, 0x62, 0x68, 0x92,
	0x02, 0xb9, 0xd8, 0x90, 0x2a, 0xc6, 0x13, 0xab, 0x36, 0xa3, 0xa5, 0x94, 0xf6, 0x43, 0x0f, 0x36,
	0x41, 0xea, 0x95, 0x81, 0x1d, 0x69, 0x29, 0x2e, 0x2c, 0x3d, 0xbe, 0xb6, 0xa5, 0x27, 0x42, 0xc3,
	0x04, 0x43, 0x0b, 0x52, 0xf7, 0xa1, 0x07, 0x1d, 0x90, 0xee, 0x91, 0x91, 0xa5, 0x84, 0xb0, 0x54,
	0xbf, 0xb6, 0xa5, 0x33, 0xa5, 0x63, 0x82, 0x2d, 0x10, 0xe8, 0x3f, 0xf4, 0x60, 0x0b, 0xac, 0xf1,
	0xaa, 0xb1, 0x91, 0x23, 0xd3, 0x41, 0xef, 0x09, 0x1d, 0x22, 0xb7, 0xd3, 0xfb, 0x0f, 0xbf, 0x64,
	0x76, 0x5a, 0x1a, 0xd6, 0x66, 0xb4, 0x55, 0x93, 0x59, 0x07, 0xc8, 0x09, 0x2d, 0x6e, 0x74, 0x54,
	0xe3, 0x9b, 0xc2, 0x35, 0x7c, 0x0a, 0xe2, 0x5e, 0x47, 0x9c, 0xe0, 0x62, 0xf9, 0xd7, 0xff, 0xfc,
	0xb8, 0xf9, 0xa8, 0x85, 0x59, 0xbb, 0x67, 0x16, 0x2c, 0xb7, 0x5b, 0x54, 0x4e, 0x38, 0x86, 0x49,
	0x77, 0xb0, 0x1b, 0x7c, 0x16, 0xfb, 0x0f, 0x8a, 0xec, 0xc2, 0x43, 0xb4, 0x50, 0xae, 0x9f, 0x3c,
	0x78, 0xb8, 0x7b, 0xd2, 0x33, 0x9f, 0xa2, 0x0b, 0x2d, 0xee, 0x75, 0x36, 0x5e, 0xa9, 0x56, 0x31,
	0x99, 0xee, 0x6f, 0x6b, 0xcb, 0x51, 0x55, 0x39, 0x8d, 0xf0, 0x6f, 0x6a, 0xad, 0x9c, 0x04, 0x71,
	0xd4, 0xcf, 0x21, 0x70, 0x7b, 0x62, 0x2b, 0x94, 0x05, 0x5a, 0x69, 0x1b, 0xa4, 0x85, 0x44, 0x3b,
	0x15, 0x0d, 0x31, 0xda, 0x0c, 0x67, 0x45, 0x33, 0x84, 0xb9, 0xf1, 0x1e, 0x30, 0xea, 0x96, 0xc3,
	0xf2, 0x7e, 0x97, 0x04, 0xeb, 0x97, 0x8f, 0x3a, 0x18, 0x55, 0xbf, 0x00, 0xcb, 0xe1, 0x6e, 0x33,
	0xde, 0x74, 0x17, 0x47, 0x3d, 0x07, 0x0d, 0xe0, 0x23, 0xb0, 0x16, 0x80, 0xdd, 0x1e, 0xf3, 0x7a,
	0x4c, 0xc7, 0xc4, 0x46, 0x83, 0xa8, 0x65, 0xa8, 0x20, 0xcf, 0x04, 0xa2, 0xce, 0x01, 0xf0, 0x97,
	0x60, 0xd9, 0x33, 0x7c, 0xa3, 0x4b, 0xf5, 0x3e, 0xf2, 0x2f, 0x0f, 0xb5, 0x25, 0xb9, 0xf9, 0x42,
	0xee, 0xc1, 0xc7, 0xe0, 0x56, 0x53, 0x71, 0xc2, 0x67, 0xbe, 0x20, 0x45, 0x97, 0x2c, 0x50, 0xe1,
	0x62, 0x72, 0x2b, 0x31, 0x12, 0x5e, 0x6f, 0x8e, 0xf1, 0x57, 0xe6, 0xd4, 0x50, 0xee, 0xef, 0x2e,
	0x58, 0xe5, 0xce, 0x0c, 0xa5, 0x85, 0xf0, 0x6c, 0xd8, 0xf2, 0xb2, 0xdc, 0x2f, 0x07, 0xa3, 0x25,
	0x0f, 0x16, 0x87, 0x74, 0xe0, 0xae, 0x9a, 0x90, 0x01, 0x38, 0x1d, 0x90, 0x81, 0xbb, 0x88, 0x87,
	0xd4, 0x23, 0xa6, 0x4b, 0xec, 0x21, 0x76, 0x3e, 0x12, 0xd2, 0x70, 0x53, 0xa0, 0xf3, 0x60, 0x31,
	0x84, 0x1e, 0xc8, 0xa1, 0x39, 0xd4, 0x3b, 0xc2, 0x0e, 0xa2, 0x47, 0x9a, 0x9a, 0x78, 0xa4, 0x70,
	0x1b, 0xa4, 0x55, 0x5c, 0xe2, 0x06, 0x01, 0x22, 0x13, 0x50, 0xee, 0x94, 0xf8, 0x3d, 0xe2, 0x37,
	0xe0, 0xa6, 0xe7, 0xa3, 0x3e, 0x76, 0x7b, 0x54, 0x1f, 0x9b, 0x29, 0x82, 0x8a, 0xb4, 0x98, 0x2b,
	0x99, 0x00, 0xd3, 0x08, 0xcf, 0x97, 0x1a, 0x1a, 0xe4, 0xde, 0xc6, 0x41, 0x56, 0xa4, 0x4e, 0xc5,
	0xed, 0x23, 0x62, 0x10, 0xd6, 0xc0, 0x2d, 0x62, 0xb0, 0x9e, 0x8f, 0x34, 0x64, 0x21, 0xdc, 0x47,
	0x36, 0xdc, 0x99, 0x32, 0xad, 0x86, 0x3c, 0x44, 0x87, 0xd6, 0x43, 0xf0, 0x23, 0x4b, 0xe9, 0x0a,
	0x9f, 0x49, 0x24, 0x81, 0x56, 0x02, 0xc4, 0xf0, 0x54, 0x8e, 0xc1, 0xd6, 0x50, 0x6a, 0x44, 0x23,
	0x0d, 0x9c, 0x11, 0x2a, 0x22, 0x09, 0x75, 0x2b, 0x80, 0x9f, 0x05, 0xe8, 0xa1, 0xe7, 0x5c, 0xdf,
	0x4b, 0xb0, 0x3d, 0xd4, 0x27, 0xe8, 0xd2, 0xd1, 0xc0, 0x33, 0x08, 0x4f, 0xbe, 0x31, 0xad, 0xc9,
	0xb0, 0xd6, 0x5c, 0x20, 0xc4, 0x89, 0x42, 0xd5, 0x40, 0x24, 0xac, 0x3a, 0xe7, 0x82, 0x8d, 0x08,
	0x63, 0xcf, 0x7b, 0xae, 0xdf, 0xeb, 0x6a, 0xc8, 0xb0, 0xda, 0xd7, 0x67, 0xeb, 0x2a, 0xe5, 0xfd,
	0xd7, 0x18, 0xc8, 0x5f, 0x2e, 0xef, 0x3a, 0xb1, 0x9c, 0x1e, 0x77, 0xee, 0xc4, 0x77, 0xdd, 0xe6,
	0xff, 0x7b, 0x5a, 0xb2, 0x1a, 0x7c, 0xa6, 0xb7, 0x11, 0x6e, 0xb5, 0x59, 0xd4, 0x85, 0xb4, 0xd8,
	0xaa, 0x89, 0x1d, 0x78, 0x17, 0x00, 0x44, 0xec, 0x00, 0x17, 0x39, 0x8b, 0x14, 0x22, 0xb6, 0x42,
	0x45, 0xe2, 0x49, 0x4e, 0x8e, 0xe7, 0xef, 0x31, 0x95, 0x73, 0x32, 0x1e, 0x19, 0x8e, 0x3c, 0x46,
	0x64, 0x57, 0x0d, 0xdf, 0xb9, 0xf8, 0x7e, 0x51, 0x44, 0xfc, 0x4b, 0x4c, 0xae, 0xbd, 0x5f, 0x81,
	0x9f, 0x8c, 0xa7, 0x4c, 0xe0, 0x84, 0xbc, 0x4a, 0x8a, 0x16, 0x39, 0xca, 0x0e, 0xe9, 0x44, 0x8e,
	0x4c, 0x6a, 0xc2, 0xd5, 0x81, 0x87, 0xfd, 0xef, 0x93, 0x16, 0xbf, 0x8f, 0xab, 0x44, 0x3c, 0x23,
	0x68, 0xe0, 0x21, 0x8b, 0x21, 0xfb, 0x2c, 0xd4, 0x65, 0xae, 0x5f, 0xb6, 0xd4, 0xe3, 0x07, 0x2c,
	0x43, 0x0f, 0x44, 0xa2, 0x65, 0x2b, 0x10, 0xa2, 0x34, 0x94, 0x54, 0x09, 0x6c, 0x8c, 0x4b, 0x21,
	0x83, 0xf7, 0x72, 0x21, 0x1c, 0xe1, 0xf7, 0x46, 0x44, 0x58, 0xa0, 0xa6, 0xa8, 0x30, 0x1d, 0xd7,
	0xea, 0xa8, 0xb9, 0xc3, 0x09, 0x5f, 0x9a, 0xa8, 0xa2, 0xcc, 0x51, 0x62, 0xf6, 0xe4, 0xfe, 0x94,
	0x00, 0x50, 0x30, 0x51, 0xb2, 0xed, 0x32, 0x25, 0x1a, 0x3a, 0x37, 0x7c, 0x9b, 0xc2, 0x5d, 0x30,
	0x47, 0x11, 0xb1, 0x91, 0xaf, 0x02, 0xcf, 0xfc, 0xed, 0x2f, 0x3b, 0x6b, 0xea, 0x6d, 0xc9, 0x9b,
	0x27, 0xa2, 0xb4, 0xc1, 0x7c, 0x4c, 0x5a, 0x9a, 0xc2, 0xf1, 0x8b, 0x39, 0x7f, 0xd9, 0x58, 0x2e,
	0xa1, 0xbd, 0x2e, 0xf2, 0xf9, 0x13, 0x27, 0x2e, 0x2f, 0xe6, 0x26, 0x25, 0x15, 0xb5, 0x5a, 0xb7,
	0xa1, 0x07, 0x96, 0x98, 0xcb, 0x0c, 0x47, 0xf7, 0xa5, 0xa9, 0x4c, 0x62, 0x2b, 0x91, 0x4f, 0xef,
	0xaf, 0x17, 0x94, 0x76, 0xfe, 0x56, 0x2d, 0xa8, 0xb7, 0x6a, 0xa1, 0xe2, 0x62, 0x52, 0xde, 0x7d,
	0xff, 0x71, 0x73, 0xe6, 0xcf, 0xff, 0xda, 0xcc, 0x87, 0x2e, 0x15, 0xea, 0x61, 0x2b, 0xff, 0xdb,
	0xa1, 0x76, 0x47, 0x5d, 0x26, 0xb8, 0x00, 0xd5, 0x16, 0x85, 0x85, 0x20, 0x96, 0xdf, 0x01, 0xa8,
	0x2e, 0x1d, 0x7a, 0xe8, 0x61, 0x94, 0xfc, 0xf6, 0x66, 0x57, 0x95, 0x99, 0xca, 0xe8, 0x95, 0xf5,
	0x14, 0xa4, 0x9a, 0x9e, 0xee, 0xf3, 0x7c, 0xa6, 0x99, 0x59, 0x61, 0x32, 0xff, 0xa5, 0x0b, 0xe7,
	0xa1, 0x27, 0xbd, 0xae, 0x93, 0xa6, 0x5b, 0x4e, 0x72, 0x0f, 0xb4, 0x85, 0xa6, 0xa7, 0x09, 0xf9,
	0xdc, 0x9b, 0x18, 0x58, 0xbd, 0x84, 0x82, 0x79, 0xb0, 0xd4, 0xf4, 0xf4, 0x69, 0xef, 0x42, 0xd0,
	0xf4, 0x86, 0x83, 0xe2, 0x12, 0xf5, 0xf1, 0xef, 0x4c, 0xfd, 0xfd, 0x37, 0x31, 0x70, 0x63, 0xf2,
	0x05, 0x0e, 0xde, 0x03, 0xb7, 0x0f, 0xeb, 0xc7, 0xa5, 0xa3, 0xfa, 0xe9, 0x4b, 0xfd, 0x44, 0x7b,
	0xf6, 0xa2, 0x7e, 0x50, 0xd5, 0xf4, 0xc6, 0x69, 0xe9, 0xf4, 0xac, 0xa1, 0xd7, 0x8f, 0x4b, 0x95,
	0xd3, 0xfa, 0x8b, 0xea, 0xca, 0x0c, 0xbc, 0x03, 0x36, 0xa7, 0xc2, 0x14, 0x28, 0xf6, 0x45, 0xd0,
	0x93, 0x52, 0xfd, 0xa8, 0x7a, 0xb0, 0x12, 0x87, 0x77, 0xc1, 0xd6, 0x54, 0x50, 0xe3, 0xa8, 0xd4,
	0xa8, 0x55, 0x0f, 0x56, 0x12, 0xe5, 0xe7, 0xef, 0x3f, 0x65, 0x63, 0x1f, 0x3e, 0x65, 0x63, 0xff,
	0xfe, 0x94, 0x8d, 0xbd, 0xfe, 0x9c, 0x9d, 0xf9, 0xf0, 0x39, 0x3b, 0xf3, 0x8f, 0xcf, 0xd9, 0x99,
	0xdf, 0x5e, 0xed, 0x4e, 0x3b, 0x08, 0xff, 0x82, 0x23, 0x88, 0x31, 0xe7, 0xc4, 0x8f, 0x2d, 0x0f,
	0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x19, 0xef, 0xb4, 0x35, 0x12, 0x00, 0x00,
}

func (m *EventNewFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fp != nil {
		{
			size, err := m.Fp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFinalityProviderCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFinalityProviderCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFinalityProviderCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BsnId) > 0 {
		i -= len(m.BsnId)
		copy(dAtA[i:], m.BsnId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BsnId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcPkHex) > 0 {
		i -= len(m.BtcPkHex)
		copy(dAtA[i:], m.BtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFinalityProviderEdited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFinalityProviderEdited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFinalityProviderEdited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcPkHex) > 0 {
		i -= len(m.BtcPkHex)
		copy(dAtA[i:], m.BtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewState != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewState))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSelectiveSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSelectiveSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSelectiveSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ev != nil {
		{
			size := m.Ev.Size()
			i -= size
			if _, err := m.Ev.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_SlashedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_SlashedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlashedFp != nil {
		{
			size, err := m.SlashedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_JailedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_JailedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JailedFp != nil {
		{
			size, err := m.JailedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_UnjailedFp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_UnjailedFp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnjailedFp != nil {
		{
			size, err := m.UnjailedFp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_BtcDelStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_BtcDelStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BtcDelStateUpdate != nil {
		{
			size, err := m.BtcDelStateUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFinalityProviderStatusChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFinalityProviderStatusChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFinalityProviderStatusChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewState) > 0 {
		i -= len(m.NewState)
		copy(dAtA[i:], m.NewState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcPk) > 0 {
		i -= len(m.BtcPk)
		copy(dAtA[i:], m.BtcPk)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BtcPk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousStakingTxHashHex) > 0 {
		i -= len(m.PreviousStakingTxHashHex)
		copy(dAtA[i:], m.PreviousStakingTxHashHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PreviousStakingTxHashHex)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StakerAddr) > 0 {
		i -= len(m.StakerAddr)
		copy(dAtA[i:], m.StakerAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakerAddr)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NewState) > 0 {
		i -= len(m.NewState)
		copy(dAtA[i:], m.NewState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewState)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UnbondingTx) > 0 {
		i -= len(m.UnbondingTx)
		copy(dAtA[i:], m.UnbondingTx)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UnbondingTx)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UnbondingTime) > 0 {
		i -= len(m.UnbondingTime)
		copy(dAtA[i:], m.UnbondingTime)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UnbondingTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StakingTime) > 0 {
		i -= len(m.StakingTime)
		copy(dAtA[i:], m.StakingTime)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StakerBtcPkHex) > 0 {
		i -= len(m.StakerBtcPkHex)
		copy(dAtA[i:], m.StakerBtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakerBtcPkHex)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FinalityProviderBtcPksHex) > 0 {
		for iNdEx := len(m.FinalityProviderBtcPksHex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FinalityProviderBtcPksHex[iNdEx])
			copy(dAtA[i:], m.FinalityProviderBtcPksHex[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.FinalityProviderBtcPksHex[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ParamsVersion) > 0 {
		i -= len(m.ParamsVersion)
		copy(dAtA[i:], m.ParamsVersion)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ParamsVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakingOutputIndex) > 0 {
		i -= len(m.StakingOutputIndex)
		copy(dAtA[i:], m.StakingOutputIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingOutputIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHex) > 0 {
		i -= len(m.StakingTxHex)
		copy(dAtA[i:], m.StakingTxHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCovenantSignatureReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCovenantSignatureReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCovenantSignatureReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CovenantStakeExpansionSignatureHex) > 0 {
		i -= len(m.CovenantStakeExpansionSignatureHex)
		copy(dAtA[i:], m.CovenantStakeExpansionSignatureHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CovenantStakeExpansionSignatureHex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CovenantUnbondingSignatureHex) > 0 {
		i -= len(m.CovenantUnbondingSignatureHex)
		copy(dAtA[i:], m.CovenantUnbondingSignatureHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CovenantUnbondingSignatureHex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CovenantBtcPkHex) > 0 {
		i -= len(m.CovenantBtcPkHex)
		copy(dAtA[i:], m.CovenantBtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CovenantBtcPkHex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCovenantQuorumReached) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCovenantQuorumReached) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCovenantQuorumReached) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewState) > 0 {
		i -= len(m.NewState)
		copy(dAtA[i:], m.NewState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationInclusionProofReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationInclusionProofReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationInclusionProofReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewState) > 0 {
		i -= len(m.NewState)
		copy(dAtA[i:], m.NewState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewState)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EndHeight) > 0 {
		i -= len(m.EndHeight)
		copy(dAtA[i:], m.EndHeight)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EndHeight)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartHeight) > 0 {
		i -= len(m.StartHeight)
		copy(dAtA[i:], m.StartHeight)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StartHeight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelgationUnbondedEarly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelgationUnbondedEarly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelgationUnbondedEarly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeExpansionTxHash) > 0 {
		i -= len(m.StakeExpansionTxHash)
		copy(dAtA[i:], m.StakeExpansionTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakeExpansionTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewState) > 0 {
		i -= len(m.NewState)
		copy(dAtA[i:], m.NewState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewState)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartHeight) > 0 {
		i -= len(m.StartHeight)
		copy(dAtA[i:], m.StartHeight)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StartHeight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBTCDelegationExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBTCDelegationExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBTCDelegationExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewState) > 0 {
		i -= len(m.NewState)
		copy(dAtA[i:], m.NewState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUnexpectedUnbondingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUnexpectedUnbondingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUnexpectedUnbondingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendStakeTxBlockIndex != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpendStakeTxBlockIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SpendStakeTxHeaderHash) > 0 {
		i -= len(m.SpendStakeTxHeaderHash)
		copy(dAtA[i:], m.SpendStakeTxHeaderHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SpendStakeTxHeaderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SpendStakeTxHash) > 0 {
		i -= len(m.SpendStakeTxHash)
		copy(dAtA[i:], m.SpendStakeTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SpendStakeTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddBsnRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddBsnRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddBsnRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FpRatios) > 0 {
		for iNdEx := len(m.FpRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FpRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BabylonCommission) > 0 {
		for iNdEx := len(m.BabylonCommission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BabylonCommission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TotalRewards) > 0 {
		for iNdEx := len(m.TotalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BsnConsumerId) > 0 {
		i -= len(m.BsnConsumerId)
		copy(dAtA[i:], m.BsnConsumerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BsnConsumerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFpRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFpRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFpRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalRewards) > 0 {
		for iNdEx := len(m.TotalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventNewFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fp != nil {
		l = m.Fp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFinalityProviderCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BsnId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFinalityProviderEdited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NewState != 0 {
		n += 1 + sovEvents(uint64(m.NewState))
	}
	return n
}

func (m *EventSelectiveSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ev != nil {
		n += m.Ev.Size()
	}
	return n
}

func (m *EventPowerDistUpdate_SlashedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashedFp != nil {
		l = m.SlashedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_JailedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JailedFp != nil {
		l = m.JailedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_UnjailedFp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnjailedFp != nil {
		l = m.UnjailedFp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_BtcDelStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcDelStateUpdate != nil {
		l = m.BtcDelStateUpdate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFinalityProviderStatusChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BtcPk)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StakingOutputIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ParamsVersion)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.FinalityProviderBtcPksHex) > 0 {
		for _, s := range m.FinalityProviderBtcPksHex {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.StakerBtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StakingTime)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UnbondingTime)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UnbondingTx)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StakerAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PreviousStakingTxHashHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCovenantSignatureReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CovenantBtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CovenantUnbondingSignatureHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CovenantStakeExpansionSignatureHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCovenantQuorumReached) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationInclusionProofReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StartHeight)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EndHeight)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelgationUnbondedEarly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StartHeight)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StakeExpansionTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBTCDelegationExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUnexpectedUnbondingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SpendStakeTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SpendStakeTxHeaderHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SpendStakeTxBlockIndex != 0 {
		n += 1 + sovEvents(uint64(m.SpendStakeTxBlockIndex))
	}
	return n
}

func (m *EventAddBsnRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BsnConsumerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.TotalRewards) > 0 {
		for _, e := range m.TotalRewards {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.BabylonCommission) > 0 {
		for _, e := range m.BabylonCommission {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.FpRatios) > 0 {
		for _, e := range m.FpRatios {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventFpRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.TotalRewards) > 0 {
		for _, e := range m.TotalRewards {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventNewFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fp == nil {
				m.Fp = &FinalityProvider{}
			}
			if err := m.Fp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFinalityProviderCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFinalityProviderCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFinalityProviderCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFinalityProviderEdited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFinalityProviderEdited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFinalityProviderEdited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			m.NewState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewState |= BTCDelegationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSelectiveSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSelectiveSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSelectiveSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &SelectiveSlashingEvidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPowerDistUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPowerDistUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventSlashedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_SlashedFp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventJailedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_JailedFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnjailedFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPowerDistUpdate_EventUnjailedFinalityProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_UnjailedFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelStateUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventBTCDelegationStateUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ev = &EventPowerDistUpdate_BtcDelStateUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventSlashedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSlashedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSlashedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventJailedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventJailedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventJailedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPowerDistUpdate_EventUnjailedFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnjailedFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnjailedFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFinalityProviderStatusChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFinalityProviderStatusChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFinalityProviderStatusChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcPk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingOutputIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingOutputIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviderBtcPksHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviderBtcPksHex = append(m.FinalityProviderBtcPksHex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStakingTxHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousStakingTxHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCovenantSignatureReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCovenantSignatureReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCovenantSignatureReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantUnbondingSignatureHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantUnbondingSignatureHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantStakeExpansionSignatureHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantStakeExpansionSignatureHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCovenantQuorumReached) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCovenantQuorumReached: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCovenantQuorumReached: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationInclusionProofReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationInclusionProofReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationInclusionProofReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelgationUnbondedEarly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelgationUnbondedEarly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelgationUnbondedEarly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeExpansionTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeExpansionTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBTCDelegationExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBTCDelegationExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBTCDelegationExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUnexpectedUnbondingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnexpectedUnbondingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnexpectedUnbondingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendStakeTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendStakeTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendStakeTxHeaderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendStakeTxHeaderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendStakeTxBlockIndex", wireType)
			}
			m.SpendStakeTxBlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpendStakeTxBlockIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddBsnRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddBsnRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddBsnRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsnConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsnConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRewards = append(m.TotalRewards, types.Coin{})
			if err := m.TotalRewards[len(m.TotalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonCommission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonCommission = append(m.BabylonCommission, types.Coin{})
			if err := m.BabylonCommission[len(m.BabylonCommission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpRatios = append(m.FpRatios, EventFpRewardInfo{})
			if err := m.FpRatios[len(m.FpRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFpRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFpRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFpRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRewards = append(m.TotalRewards, types.Coin{})
			if err := m.TotalRewards[len(m.TotalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
