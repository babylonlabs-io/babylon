// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_babylonlabs_io_babylon_types "github.com/babylonlabs-io/babylon/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateFinalityProvider is the message for creating a finality provider
type MsgCreateFinalityProvider struct {
	// addr defines the address of the finality provider that will receive
	// the commissions to all the delegations.
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// description defines the description terms for the finality provider
	Description *types.Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate of the finality provider
	Commission *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of this finality provider
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,4,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// pop is the proof of possession of btc_pk over the FP signer address.
	Pop *ProofOfPossessionBTC `protobuf:"bytes,5,opt,name=pop,proto3" json:"pop,omitempty"`
	// consumer_id is the ID of the consumer
	// If it's empty, it's assumed to be Babylon's chain id
	ConsumerId string `protobuf:"bytes,6,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (m *MsgCreateFinalityProvider) Reset()         { *m = MsgCreateFinalityProvider{} }
func (m *MsgCreateFinalityProvider) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFinalityProvider) ProtoMessage()    {}
func (*MsgCreateFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{0}
}
func (m *MsgCreateFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFinalityProvider.Merge(m, src)
}
func (m *MsgCreateFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFinalityProvider proto.InternalMessageInfo

func (m *MsgCreateFinalityProvider) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MsgCreateFinalityProvider) GetDescription() *types.Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *MsgCreateFinalityProvider) GetPop() *ProofOfPossessionBTC {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *MsgCreateFinalityProvider) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

// MsgCreateFinalityProviderResponse is the response for MsgCreateFinalityProvider
type MsgCreateFinalityProviderResponse struct {
}

func (m *MsgCreateFinalityProviderResponse) Reset()         { *m = MsgCreateFinalityProviderResponse{} }
func (m *MsgCreateFinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFinalityProviderResponse) ProtoMessage()    {}
func (*MsgCreateFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{1}
}
func (m *MsgCreateFinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFinalityProviderResponse.Merge(m, src)
}
func (m *MsgCreateFinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFinalityProviderResponse proto.InternalMessageInfo

// MsgEditFinalityProvider is the message for editing an existing finality provider
type MsgEditFinalityProvider struct {
	// addr the address of the finality provider that whishes to edit his information.
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of the finality provider to be edited
	BtcPk []byte `protobuf:"bytes,2,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// description defines the updated description terms for the finality provider
	Description *types.Description `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the updated commission rate of the finality provider
	Commission *cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission,omitempty"`
}

func (m *MsgEditFinalityProvider) Reset()         { *m = MsgEditFinalityProvider{} }
func (m *MsgEditFinalityProvider) String() string { return proto.CompactTextString(m) }
func (*MsgEditFinalityProvider) ProtoMessage()    {}
func (*MsgEditFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{2}
}
func (m *MsgEditFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFinalityProvider.Merge(m, src)
}
func (m *MsgEditFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFinalityProvider proto.InternalMessageInfo

func (m *MsgEditFinalityProvider) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MsgEditFinalityProvider) GetBtcPk() []byte {
	if m != nil {
		return m.BtcPk
	}
	return nil
}

func (m *MsgEditFinalityProvider) GetDescription() *types.Description {
	if m != nil {
		return m.Description
	}
	return nil
}

// MsgEditFinalityProviderResponse is the response for MsgEditFinalityProvider
type MsgEditFinalityProviderResponse struct {
}

func (m *MsgEditFinalityProviderResponse) Reset()         { *m = MsgEditFinalityProviderResponse{} }
func (m *MsgEditFinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditFinalityProviderResponse) ProtoMessage()    {}
func (*MsgEditFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{3}
}
func (m *MsgEditFinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFinalityProviderResponse.Merge(m, src)
}
func (m *MsgEditFinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFinalityProviderResponse proto.InternalMessageInfo

// MsgCreateBTCDelegation is the message for creating a BTC delegation
type MsgCreateBTCDelegation struct {
	// staker_addr is the address to receive rewards from BTC delegation.
	StakerAddr string `protobuf:"bytes,1,opt,name=staker_addr,json=stakerAddr,proto3" json:"staker_addr,omitempty"`
	// pop is the proof of possession of btc_pk by the staker_addr.
	Pop *ProofOfPossessionBTC `protobuf:"bytes,2,opt,name=pop,proto3" json:"pop,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of the BTC delegator
	BtcPk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,3,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// fp_btc_pk_list is the list of Bitcoin secp256k1 PKs of the finality providers, if there is more than one
	// finality provider pk it means that delegation is re-staked
	FpBtcPkList []github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,4,rep,name=fp_btc_pk_list,json=fpBtcPkList,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"fp_btc_pk_list,omitempty"`
	// staking_time is the time lock used in staking transaction
	StakingTime uint32 `protobuf:"varint,5,opt,name=staking_time,json=stakingTime,proto3" json:"staking_time,omitempty"`
	// staking_value  is the amount of satoshis locked in staking output
	StakingValue int64 `protobuf:"varint,6,opt,name=staking_value,json=stakingValue,proto3" json:"staking_value,omitempty"`
	// staking_tx is a bitcoin staking transaction i.e transaction that locks funds
	StakingTx []byte `protobuf:"bytes,7,opt,name=staking_tx,json=stakingTx,proto3" json:"staking_tx,omitempty"`
	// staking_tx_inclusion_proof is the inclusion proof of the staking tx in BTC chain
	StakingTxInclusionProof *InclusionProof `protobuf:"bytes,8,opt,name=staking_tx_inclusion_proof,json=stakingTxInclusionProof,proto3" json:"staking_tx_inclusion_proof,omitempty"`
	// slashing_tx is the slashing tx
	// Note that the tx itself does not contain signatures, which are off-chain.
	SlashingTx *BTCSlashingTx `protobuf:"bytes,9,opt,name=slashing_tx,json=slashingTx,proto3,customtype=BTCSlashingTx" json:"slashing_tx,omitempty"`
	// delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e., SK corresponding to btc_pk).
	// It will be a part of the witness for the staking tx output.
	// The staking tx output further needs signatures from covenant and finality provider in
	// order to be spendable.
	DelegatorSlashingSig *github_com_babylonlabs_io_babylon_types.BIP340Signature `protobuf:"bytes,10,opt,name=delegator_slashing_sig,json=delegatorSlashingSig,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340Signature" json:"delegator_slashing_sig,omitempty"`
	// unbonding_time is the time lock used when funds are being unbonded. It is be used in:
	// - unbonding transaction, time lock spending path
	// - staking slashing transaction, change output
	// - unbonding slashing transaction, change output
	// It must be smaller than math.MaxUInt16 and larger that max(MinUnbondingTime, CheckpointFinalizationTimeout)
	UnbondingTime uint32 `protobuf:"varint,11,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	// fields related to unbonding transaction
	// unbonding_tx is a bitcoin unbonding transaction i.e transaction that spends
	// staking output and sends it to the unbonding output
	UnbondingTx []byte `protobuf:"bytes,12,opt,name=unbonding_tx,json=unbondingTx,proto3" json:"unbonding_tx,omitempty"`
	// unbonding_value is amount of satoshis locked in unbonding output.
	// NOTE: staking_value and unbonding_value could be different because of the difference between the fee for staking tx and that for unbonding
	UnbondingValue int64 `protobuf:"varint,13,opt,name=unbonding_value,json=unbondingValue,proto3" json:"unbonding_value,omitempty"`
	// unbonding_slashing_tx is the slashing tx which slash unbonding contract
	// Note that the tx itself does not contain signatures, which are off-chain.
	UnbondingSlashingTx *BTCSlashingTx `protobuf:"bytes,14,opt,name=unbonding_slashing_tx,json=unbondingSlashingTx,proto3,customtype=BTCSlashingTx" json:"unbonding_slashing_tx,omitempty"`
	// delegator_unbonding_slashing_sig is the signature on the slashing tx by the delegator (i.e., SK corresponding to btc_pk).
	DelegatorUnbondingSlashingSig *github_com_babylonlabs_io_babylon_types.BIP340Signature `protobuf:"bytes,15,opt,name=delegator_unbonding_slashing_sig,json=delegatorUnbondingSlashingSig,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340Signature" json:"delegator_unbonding_slashing_sig,omitempty"`
}

func (m *MsgCreateBTCDelegation) Reset()         { *m = MsgCreateBTCDelegation{} }
func (m *MsgCreateBTCDelegation) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBTCDelegation) ProtoMessage()    {}
func (*MsgCreateBTCDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{4}
}
func (m *MsgCreateBTCDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBTCDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBTCDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBTCDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBTCDelegation.Merge(m, src)
}
func (m *MsgCreateBTCDelegation) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBTCDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBTCDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBTCDelegation proto.InternalMessageInfo

func (m *MsgCreateBTCDelegation) GetStakerAddr() string {
	if m != nil {
		return m.StakerAddr
	}
	return ""
}

func (m *MsgCreateBTCDelegation) GetPop() *ProofOfPossessionBTC {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *MsgCreateBTCDelegation) GetStakingTime() uint32 {
	if m != nil {
		return m.StakingTime
	}
	return 0
}

func (m *MsgCreateBTCDelegation) GetStakingValue() int64 {
	if m != nil {
		return m.StakingValue
	}
	return 0
}

func (m *MsgCreateBTCDelegation) GetStakingTx() []byte {
	if m != nil {
		return m.StakingTx
	}
	return nil
}

func (m *MsgCreateBTCDelegation) GetStakingTxInclusionProof() *InclusionProof {
	if m != nil {
		return m.StakingTxInclusionProof
	}
	return nil
}

func (m *MsgCreateBTCDelegation) GetUnbondingTime() uint32 {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *MsgCreateBTCDelegation) GetUnbondingTx() []byte {
	if m != nil {
		return m.UnbondingTx
	}
	return nil
}

func (m *MsgCreateBTCDelegation) GetUnbondingValue() int64 {
	if m != nil {
		return m.UnbondingValue
	}
	return 0
}

// MsgCreateBTCDelegationResponse is the response for MsgCreateBTCDelegation
type MsgCreateBTCDelegationResponse struct {
}

func (m *MsgCreateBTCDelegationResponse) Reset()         { *m = MsgCreateBTCDelegationResponse{} }
func (m *MsgCreateBTCDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBTCDelegationResponse) ProtoMessage()    {}
func (*MsgCreateBTCDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{5}
}
func (m *MsgCreateBTCDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBTCDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBTCDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBTCDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBTCDelegationResponse.Merge(m, src)
}
func (m *MsgCreateBTCDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBTCDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBTCDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBTCDelegationResponse proto.InternalMessageInfo

// MsgAddBTCDelegationInclusionProof is the message for adding proof of inclusion of BTC delegation on BTC chain
type MsgAddBTCDelegationInclusionProof struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,2,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// staking_tx_inclusion_proof is the inclusion proof of the staking tx in BTC chain
	StakingTxInclusionProof *InclusionProof `protobuf:"bytes,3,opt,name=staking_tx_inclusion_proof,json=stakingTxInclusionProof,proto3" json:"staking_tx_inclusion_proof,omitempty"`
}

func (m *MsgAddBTCDelegationInclusionProof) Reset()         { *m = MsgAddBTCDelegationInclusionProof{} }
func (m *MsgAddBTCDelegationInclusionProof) String() string { return proto.CompactTextString(m) }
func (*MsgAddBTCDelegationInclusionProof) ProtoMessage()    {}
func (*MsgAddBTCDelegationInclusionProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{6}
}
func (m *MsgAddBTCDelegationInclusionProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBTCDelegationInclusionProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBTCDelegationInclusionProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBTCDelegationInclusionProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBTCDelegationInclusionProof.Merge(m, src)
}
func (m *MsgAddBTCDelegationInclusionProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBTCDelegationInclusionProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBTCDelegationInclusionProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBTCDelegationInclusionProof proto.InternalMessageInfo

func (m *MsgAddBTCDelegationInclusionProof) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddBTCDelegationInclusionProof) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *MsgAddBTCDelegationInclusionProof) GetStakingTxInclusionProof() *InclusionProof {
	if m != nil {
		return m.StakingTxInclusionProof
	}
	return nil
}

// MsgAddBTCDelegationInclusionProofResponse is the response for MsgAddBTCDelegationInclusionProof
type MsgAddBTCDelegationInclusionProofResponse struct {
}

func (m *MsgAddBTCDelegationInclusionProofResponse) Reset() {
	*m = MsgAddBTCDelegationInclusionProofResponse{}
}
func (m *MsgAddBTCDelegationInclusionProofResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgAddBTCDelegationInclusionProofResponse) ProtoMessage() {}
func (*MsgAddBTCDelegationInclusionProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{7}
}
func (m *MsgAddBTCDelegationInclusionProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBTCDelegationInclusionProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBTCDelegationInclusionProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBTCDelegationInclusionProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBTCDelegationInclusionProofResponse.Merge(m, src)
}
func (m *MsgAddBTCDelegationInclusionProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBTCDelegationInclusionProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBTCDelegationInclusionProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBTCDelegationInclusionProofResponse proto.InternalMessageInfo

// MsgAddCovenantSigs is the message for handling signatures from a covenant member
type MsgAddCovenantSigs struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// pk is the BTC public key of the covenant member
	Pk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,2,opt,name=pk,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340PubKey" json:"pk,omitempty"`
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,3,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// sigs is a list of adaptor signatures of the covenant
	// the order of sigs should respect the order of finality providers
	// of the corresponding delegation
	SlashingTxSigs [][]byte `protobuf:"bytes,4,rep,name=slashing_tx_sigs,json=slashingTxSigs,proto3" json:"slashing_tx_sigs,omitempty"`
	// unbonding_tx_sig is the signature of the covenant on the unbonding tx submitted to babylon
	// the signature follows encoding in BIP-340 spec
	UnbondingTxSig *github_com_babylonlabs_io_babylon_types.BIP340Signature `protobuf:"bytes,5,opt,name=unbonding_tx_sig,json=unbondingTxSig,proto3,customtype=github.com/babylonlabs-io/babylon/types.BIP340Signature" json:"unbonding_tx_sig,omitempty"`
	// slashing_unbonding_tx_sigs is a list of adaptor signatures of the covenant
	// on slashing tx corresponding to unbonding tx submitted to babylon
	// the order of sigs should respect the order of finality providers
	// of the corresponding delegation
	SlashingUnbondingTxSigs [][]byte `protobuf:"bytes,6,rep,name=slashing_unbonding_tx_sigs,json=slashingUnbondingTxSigs,proto3" json:"slashing_unbonding_tx_sigs,omitempty"`
}

func (m *MsgAddCovenantSigs) Reset()         { *m = MsgAddCovenantSigs{} }
func (m *MsgAddCovenantSigs) String() string { return proto.CompactTextString(m) }
func (*MsgAddCovenantSigs) ProtoMessage()    {}
func (*MsgAddCovenantSigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{8}
}
func (m *MsgAddCovenantSigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCovenantSigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCovenantSigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCovenantSigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCovenantSigs.Merge(m, src)
}
func (m *MsgAddCovenantSigs) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCovenantSigs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCovenantSigs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCovenantSigs proto.InternalMessageInfo

func (m *MsgAddCovenantSigs) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddCovenantSigs) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *MsgAddCovenantSigs) GetSlashingTxSigs() [][]byte {
	if m != nil {
		return m.SlashingTxSigs
	}
	return nil
}

func (m *MsgAddCovenantSigs) GetSlashingUnbondingTxSigs() [][]byte {
	if m != nil {
		return m.SlashingUnbondingTxSigs
	}
	return nil
}

// MsgAddCovenantSigsResponse is the response for MsgAddCovenantSigs
type MsgAddCovenantSigsResponse struct {
}

func (m *MsgAddCovenantSigsResponse) Reset()         { *m = MsgAddCovenantSigsResponse{} }
func (m *MsgAddCovenantSigsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCovenantSigsResponse) ProtoMessage()    {}
func (*MsgAddCovenantSigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{9}
}
func (m *MsgAddCovenantSigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCovenantSigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCovenantSigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCovenantSigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCovenantSigsResponse.Merge(m, src)
}
func (m *MsgAddCovenantSigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCovenantSigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCovenantSigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCovenantSigsResponse proto.InternalMessageInfo

// MsgBTCUndelegate is the message for handling signature on unbonding tx
// from its delegator. This signature effectively proves that the delegator
// wants to unbond this BTC delegation
type MsgBTCUndelegate struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,2,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// stake_spending_tx is a bitcoin transaction that spends the staking transaction
	// i.e it has staking output as an input
	StakeSpendingTx []byte `protobuf:"bytes,3,opt,name=stake_spending_tx,json=stakeSpendingTx,proto3" json:"stake_spending_tx,omitempty"`
	// spend_spending_tx_inclusion_proof is the proof of inclusion of the
	// stake_spending_tx in the BTC chain
	StakeSpendingTxInclusionProof *InclusionProof `protobuf:"bytes,4,opt,name=stake_spending_tx_inclusion_proof,json=stakeSpendingTxInclusionProof,proto3" json:"stake_spending_tx_inclusion_proof,omitempty"`
}

func (m *MsgBTCUndelegate) Reset()         { *m = MsgBTCUndelegate{} }
func (m *MsgBTCUndelegate) String() string { return proto.CompactTextString(m) }
func (*MsgBTCUndelegate) ProtoMessage()    {}
func (*MsgBTCUndelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{10}
}
func (m *MsgBTCUndelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBTCUndelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBTCUndelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBTCUndelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBTCUndelegate.Merge(m, src)
}
func (m *MsgBTCUndelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgBTCUndelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBTCUndelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBTCUndelegate proto.InternalMessageInfo

func (m *MsgBTCUndelegate) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgBTCUndelegate) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *MsgBTCUndelegate) GetStakeSpendingTx() []byte {
	if m != nil {
		return m.StakeSpendingTx
	}
	return nil
}

func (m *MsgBTCUndelegate) GetStakeSpendingTxInclusionProof() *InclusionProof {
	if m != nil {
		return m.StakeSpendingTxInclusionProof
	}
	return nil
}

// MsgBTCUndelegateResponse is the response for MsgBTCUndelegate
type MsgBTCUndelegateResponse struct {
}

func (m *MsgBTCUndelegateResponse) Reset()         { *m = MsgBTCUndelegateResponse{} }
func (m *MsgBTCUndelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBTCUndelegateResponse) ProtoMessage()    {}
func (*MsgBTCUndelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{11}
}
func (m *MsgBTCUndelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBTCUndelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBTCUndelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBTCUndelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBTCUndelegateResponse.Merge(m, src)
}
func (m *MsgBTCUndelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBTCUndelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBTCUndelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBTCUndelegateResponse proto.InternalMessageInfo

// MsgSelectiveSlashingEvidence is the message for handling evidence of selective slashing
// launched by a finality provider
type MsgSelectiveSlashingEvidence struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,2,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// recovered_fp_btc_sk is the BTC SK of the finality provider who
	// launches the selective slashing offence. The SK is recovered by
	// using a covenant adaptor signature and the corresponding Schnorr
	// signature
	RecoveredFpBtcSk []byte `protobuf:"bytes,3,opt,name=recovered_fp_btc_sk,json=recoveredFpBtcSk,proto3" json:"recovered_fp_btc_sk,omitempty"`
}

func (m *MsgSelectiveSlashingEvidence) Reset()         { *m = MsgSelectiveSlashingEvidence{} }
func (m *MsgSelectiveSlashingEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgSelectiveSlashingEvidence) ProtoMessage()    {}
func (*MsgSelectiveSlashingEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{12}
}
func (m *MsgSelectiveSlashingEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectiveSlashingEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectiveSlashingEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectiveSlashingEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectiveSlashingEvidence.Merge(m, src)
}
func (m *MsgSelectiveSlashingEvidence) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectiveSlashingEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectiveSlashingEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectiveSlashingEvidence proto.InternalMessageInfo

func (m *MsgSelectiveSlashingEvidence) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgSelectiveSlashingEvidence) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *MsgSelectiveSlashingEvidence) GetRecoveredFpBtcSk() []byte {
	if m != nil {
		return m.RecoveredFpBtcSk
	}
	return nil
}

// MsgSelectiveSlashingEvidenceResponse is the response for MsgSelectiveSlashingEvidence
type MsgSelectiveSlashingEvidenceResponse struct {
}

func (m *MsgSelectiveSlashingEvidenceResponse) Reset()         { *m = MsgSelectiveSlashingEvidenceResponse{} }
func (m *MsgSelectiveSlashingEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelectiveSlashingEvidenceResponse) ProtoMessage()    {}
func (*MsgSelectiveSlashingEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{13}
}
func (m *MsgSelectiveSlashingEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectiveSlashingEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectiveSlashingEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectiveSlashingEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectiveSlashingEvidenceResponse.Merge(m, src)
}
func (m *MsgSelectiveSlashingEvidenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectiveSlashingEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectiveSlashingEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectiveSlashingEvidenceResponse proto.InternalMessageInfo

// MsgUpdateParams defines a message for updating btcstaking module parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	// just FYI: cosmos.AddressString marks that this field should use type alias
	// for AddressString instead of string, but the functionality is not yet implemented
	// in cosmos-proto
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the finality parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{14}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4baddb53e97f38f2, []int{15}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateFinalityProvider)(nil), "babylon.btcstaking.v1.MsgCreateFinalityProvider")
	proto.RegisterType((*MsgCreateFinalityProviderResponse)(nil), "babylon.btcstaking.v1.MsgCreateFinalityProviderResponse")
	proto.RegisterType((*MsgEditFinalityProvider)(nil), "babylon.btcstaking.v1.MsgEditFinalityProvider")
	proto.RegisterType((*MsgEditFinalityProviderResponse)(nil), "babylon.btcstaking.v1.MsgEditFinalityProviderResponse")
	proto.RegisterType((*MsgCreateBTCDelegation)(nil), "babylon.btcstaking.v1.MsgCreateBTCDelegation")
	proto.RegisterType((*MsgCreateBTCDelegationResponse)(nil), "babylon.btcstaking.v1.MsgCreateBTCDelegationResponse")
	proto.RegisterType((*MsgAddBTCDelegationInclusionProof)(nil), "babylon.btcstaking.v1.MsgAddBTCDelegationInclusionProof")
	proto.RegisterType((*MsgAddBTCDelegationInclusionProofResponse)(nil), "babylon.btcstaking.v1.MsgAddBTCDelegationInclusionProofResponse")
	proto.RegisterType((*MsgAddCovenantSigs)(nil), "babylon.btcstaking.v1.MsgAddCovenantSigs")
	proto.RegisterType((*MsgAddCovenantSigsResponse)(nil), "babylon.btcstaking.v1.MsgAddCovenantSigsResponse")
	proto.RegisterType((*MsgBTCUndelegate)(nil), "babylon.btcstaking.v1.MsgBTCUndelegate")
	proto.RegisterType((*MsgBTCUndelegateResponse)(nil), "babylon.btcstaking.v1.MsgBTCUndelegateResponse")
	proto.RegisterType((*MsgSelectiveSlashingEvidence)(nil), "babylon.btcstaking.v1.MsgSelectiveSlashingEvidence")
	proto.RegisterType((*MsgSelectiveSlashingEvidenceResponse)(nil), "babylon.btcstaking.v1.MsgSelectiveSlashingEvidenceResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "babylon.btcstaking.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "babylon.btcstaking.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("babylon/btcstaking/v1/tx.proto", fileDescriptor_4baddb53e97f38f2) }

var fileDescriptor_4baddb53e97f38f2 = []byte{
	// 1362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdf, 0x6f, 0xd3, 0x46,
	0x1c, 0xaf, 0x9b, 0xb6, 0xa3, 0xdf, 0x34, 0x6d, 0x31, 0xa5, 0x4d, 0x3d, 0x9a, 0xb4, 0x01, 0x4a,
	0x81, 0xd5, 0xa1, 0xc0, 0x18, 0x6b, 0x35, 0x69, 0xa4, 0x2d, 0x02, 0x8d, 0x8c, 0xc8, 0x49, 0xf7,
	0x30, 0x69, 0x8a, 0x1c, 0xfb, 0xea, 0x9c, 0x9a, 0xf8, 0x3c, 0x9f, 0x13, 0xa5, 0x9a, 0x34, 0x4d,
	0xdb, 0xa4, 0x3d, 0x4d, 0xda, 0xd3, 0x1e, 0xb6, 0xfd, 0x11, 0x3c, 0xf0, 0x47, 0xf0, 0x88, 0xd0,
	0x1e, 0xa6, 0x3e, 0x54, 0x13, 0x3c, 0xf0, 0x37, 0x4c, 0x9a, 0xb4, 0xc9, 0x67, 0xfb, 0xec, 0x84,
	0xb8, 0x3f, 0x08, 0x6f, 0xb9, 0xbb, 0xcf, 0xf7, 0xd7, 0xe7, 0x3e, 0xf7, 0xbd, 0x73, 0x20, 0x53,
	0x53, 0x6b, 0xfb, 0x0d, 0x62, 0xe6, 0x6b, 0x8e, 0x46, 0x1d, 0x75, 0x0f, 0x9b, 0x46, 0xbe, 0xbd,
	0x96, 0x77, 0x3a, 0xb2, 0x65, 0x13, 0x87, 0x88, 0xe7, 0xfd, 0x75, 0x39, 0x5c, 0x97, 0xdb, 0x6b,
	0xd2, 0x8c, 0x41, 0x0c, 0xc2, 0x10, 0x79, 0xf7, 0x97, 0x07, 0x96, 0xe6, 0x35, 0x42, 0x9b, 0x84,
	0x56, 0xbd, 0x05, 0x6f, 0xe0, 0x2f, 0xcd, 0x79, 0xa3, 0x7c, 0x93, 0x32, 0xff, 0x4d, 0x6a, 0xf8,
	0x0b, 0xb9, 0xfe, 0x09, 0x58, 0xaa, 0xad, 0x36, 0x03, 0xe3, 0x4b, 0xbe, 0x71, 0xb8, 0x5e, 0x43,
	0x8e, 0xba, 0x16, 0x8c, 0x7d, 0x54, 0x36, 0xc6, 0x13, 0xb1, 0x7c, 0xc0, 0x72, 0x7f, 0x40, 0xa4,
	0x32, 0x86, 0xcb, 0xfd, 0x9e, 0x80, 0xf9, 0x22, 0x35, 0x36, 0x6d, 0xa4, 0x3a, 0xe8, 0x3e, 0x36,
	0xd5, 0x06, 0x76, 0xf6, 0x4b, 0x36, 0x69, 0x63, 0x1d, 0xd9, 0xe2, 0x07, 0x30, 0xa2, 0xea, 0xba,
	0x9d, 0x16, 0x16, 0x85, 0x95, 0xf1, 0x42, 0xfa, 0xc5, 0xd3, 0xd5, 0x19, 0xbf, 0xd2, 0x7b, 0xba,
	0x6e, 0x23, 0x4a, 0xcb, 0x8e, 0x8d, 0x4d, 0x43, 0x61, 0x28, 0x71, 0x1b, 0x92, 0x3a, 0xa2, 0x9a,
	0x8d, 0x2d, 0x07, 0x13, 0x33, 0x3d, 0xbc, 0x28, 0xac, 0x24, 0x6f, 0x5e, 0x94, 0x7d, 0x8b, 0x90,
	0x51, 0x56, 0x90, 0xbc, 0x15, 0x42, 0x95, 0xa8, 0x9d, 0x58, 0x04, 0xd0, 0x48, 0xb3, 0x89, 0x29,
	0x75, 0xbd, 0x24, 0x58, 0xe8, 0xd5, 0x83, 0xc3, 0xec, 0xfb, 0x9e, 0x23, 0xaa, 0xef, 0xc9, 0x98,
	0xe4, 0x9b, 0xaa, 0x53, 0x97, 0x1f, 0x21, 0x43, 0xd5, 0xf6, 0xb7, 0x90, 0xf6, 0xe2, 0xe9, 0x2a,
	0xf8, 0x71, 0xb6, 0x90, 0xa6, 0x44, 0x1c, 0x88, 0x8f, 0x61, 0xac, 0xe6, 0x68, 0x55, 0x6b, 0x2f,
	0x3d, 0xb2, 0x28, 0xac, 0x4c, 0x14, 0xee, 0x1e, 0x1c, 0x66, 0x6f, 0x1b, 0xd8, 0xa9, 0xb7, 0x6a,
	0xb2, 0x46, 0x9a, 0x79, 0x9f, 0xa8, 0x86, 0x5a, 0xa3, 0xab, 0x98, 0x04, 0xc3, 0xbc, 0xb3, 0x6f,
	0x21, 0x2a, 0x17, 0x1e, 0x96, 0x6e, 0xdd, 0xbe, 0x51, 0x6a, 0xd5, 0x3e, 0x43, 0xfb, 0xca, 0x68,
	0xcd, 0xd1, 0x4a, 0x7b, 0xe2, 0x27, 0x90, 0xb0, 0x88, 0x95, 0x1e, 0x65, 0xe5, 0x5d, 0x97, 0xfb,
	0x8a, 0x46, 0x2e, 0xd9, 0x84, 0xec, 0x3e, 0xde, 0x2d, 0x11, 0x4a, 0x11, 0xcb, 0xa3, 0x50, 0xd9,
	0x54, 0x5c, 0x3b, 0x31, 0x0b, 0x49, 0x8d, 0x98, 0xb4, 0xd5, 0x44, 0x76, 0x15, 0xeb, 0xe9, 0x31,
	0xb7, 0x3e, 0x37, 0x61, 0x6f, 0xea, 0xa1, 0xbe, 0x3e, 0xfe, 0xfd, 0xeb, 0x27, 0xd7, 0x18, 0xa3,
	0xb9, 0x8b, 0xb0, 0x14, 0xbb, 0x39, 0x0a, 0xa2, 0x16, 0x31, 0x29, 0xca, 0xfd, 0x27, 0xc0, 0x5c,
	0x91, 0x1a, 0xdb, 0x3a, 0x76, 0x06, 0xdc, 0xc0, 0xf3, 0x9c, 0x2a, 0x77, 0xef, 0x26, 0x82, 0x82,
	0x7b, 0xf6, 0x35, 0xf1, 0x4e, 0xf6, 0x75, 0x64, 0xc0, 0x7d, 0x8d, 0xd2, 0xb4, 0x04, 0xd9, 0x18,
	0x02, 0x38, 0x49, 0x3f, 0x9d, 0x81, 0x59, 0x4e, 0x65, 0xa1, 0xb2, 0xb9, 0x85, 0x1a, 0xc8, 0x50,
	0x59, 0x5e, 0x1f, 0x43, 0xd2, 0xad, 0x01, 0xd9, 0xd5, 0x13, 0x51, 0x05, 0x1e, 0xd8, 0x9d, 0x0c,
	0xa4, 0x30, 0xfc, 0x96, 0x52, 0x08, 0xa5, 0x99, 0x78, 0x37, 0xd2, 0xfc, 0x0a, 0x26, 0x77, 0xad,
	0xaa, 0xe7, 0xb3, 0xda, 0xc0, 0xd4, 0x49, 0x8f, 0x2c, 0x26, 0x06, 0x72, 0x9c, 0xdc, 0xb5, 0x0a,
	0xae, 0xeb, 0x47, 0x98, 0x3a, 0xe2, 0x12, 0x4c, 0xf8, 0x75, 0x55, 0x1d, 0xdc, 0x44, 0xec, 0x08,
	0xa4, 0x94, 0xa4, 0x3f, 0x57, 0xc1, 0x4d, 0x24, 0x5e, 0x84, 0x54, 0x00, 0x69, 0xab, 0x8d, 0x16,
	0x62, 0xfa, 0x4e, 0x28, 0x81, 0xdd, 0x17, 0xee, 0x9c, 0xb8, 0x00, 0xc0, 0xfd, 0x74, 0xd2, 0xef,
	0x31, 0xad, 0x8d, 0x07, 0x5e, 0x3a, 0x62, 0x0d, 0xa4, 0x70, 0xb9, 0x8a, 0x4d, 0xad, 0xd1, 0x72,
	0x69, 0x73, 0x5b, 0x2d, 0xd9, 0x4d, 0x9f, 0x61, 0x64, 0x5f, 0x8e, 0x21, 0xfb, 0x61, 0x80, 0x66,
	0xac, 0x2b, 0x73, 0xdc, 0x6b, 0xf7, 0x82, 0x78, 0x13, 0x92, 0xb4, 0xa1, 0xd2, 0xba, 0x9f, 0xc3,
	0x38, 0xe3, 0xff, 0xec, 0xc1, 0x61, 0x36, 0x55, 0xa8, 0x6c, 0x96, 0xfd, 0x95, 0x4a, 0x47, 0x01,
	0xca, 0x7f, 0x8b, 0x5f, 0xc3, 0xac, 0xee, 0xc9, 0x86, 0xd8, 0x55, 0x6e, 0x4d, 0xb1, 0x91, 0x06,
	0x66, 0xbe, 0x71, 0x70, 0x98, 0xfd, 0xe8, 0x74, 0x2c, 0x97, 0xb1, 0x61, 0xaa, 0x4e, 0xcb, 0x46,
	0xca, 0x0c, 0x77, 0x1d, 0x44, 0x2f, 0x63, 0x43, 0xbc, 0x0c, 0x93, 0x2d, 0xb3, 0x46, 0x4c, 0x9d,
	0x73, 0x9e, 0x64, 0x9c, 0xa7, 0xf8, 0x2c, 0x63, 0x7d, 0x09, 0x26, 0x22, 0xb0, 0x4e, 0x7a, 0x82,
	0x51, 0x9a, 0x0c, 0x41, 0x1d, 0xf1, 0x0a, 0x4c, 0x85, 0x10, 0x6f, 0x6b, 0x52, 0x6c, 0x6b, 0xc2,
	0x00, 0xde, 0xe6, 0x6c, 0xc3, 0xf9, 0x10, 0x18, 0xe5, 0x68, 0x32, 0x8e, 0xa3, 0x73, 0x1c, 0x1f,
	0x4e, 0x8a, 0x3f, 0x0a, 0xb0, 0x18, 0xb2, 0xd5, 0xc7, 0xa3, 0xcb, 0xdb, 0xd4, 0xe0, 0xbc, 0x2d,
	0xf0, 0x20, 0x3b, 0xbd, 0x59, 0x94, 0xb1, 0xb1, 0x3e, 0xed, 0x76, 0x89, 0xe8, 0xf9, 0xce, 0x2d,
	0x42, 0xa6, 0x7f, 0x23, 0xe0, 0xbd, 0xe2, 0x4f, 0x81, 0xb5, 0xdd, 0x7b, 0xba, 0xde, 0xb5, 0xde,
	0xa3, 0xa0, 0x59, 0x18, 0xa3, 0xd8, 0x30, 0x91, 0xdf, 0x31, 0x14, 0x7f, 0x24, 0x2e, 0xc3, 0x54,
	0x44, 0xbd, 0x75, 0x95, 0xd6, 0x59, 0x7f, 0x18, 0x57, 0x52, 0x5c, 0x8b, 0x0f, 0x54, 0x5a, 0x3f,
	0x46, 0xe5, 0x89, 0x77, 0xa1, 0xf2, 0xf5, 0xa4, 0x5b, 0xbd, 0x9f, 0x58, 0xee, 0x3a, 0x5c, 0x3d,
	0xb6, 0x2a, 0xce, 0xc1, 0x3f, 0xc3, 0x20, 0x7a, 0xe8, 0x4d, 0xd2, 0x46, 0xa6, 0x6a, 0x3a, 0x65,
	0x6c, 0xd0, 0xd8, 0xa2, 0x1f, 0xc0, 0x70, 0x70, 0x6b, 0x0c, 0xd0, 0x6c, 0x86, 0xad, 0xbd, 0x7e,
	0xf4, 0x25, 0xfa, 0xd1, 0xb7, 0x02, 0xd3, 0x11, 0x71, 0xba, 0x6a, 0xa2, 0x5e, 0xb3, 0x53, 0x26,
	0xc3, 0x23, 0xcb, 0x72, 0x46, 0x30, 0x1d, 0x3d, 0x1c, 0x4c, 0x78, 0xa3, 0x83, 0x0b, 0x6f, 0x32,
	0x72, 0xba, 0xdc, 0xa3, 0xba, 0x01, 0x12, 0x4f, 0xa8, 0x37, 0x1e, 0x4d, 0x8f, 0xb1, 0xd4, 0xe6,
	0x02, 0xc4, 0x4e, 0x97, 0x2d, 0xed, 0xde, 0xa8, 0x0b, 0x20, 0xbd, 0x49, 0x3d, 0xdf, 0x99, 0x7f,
	0x05, 0x98, 0x2e, 0x52, 0xa3, 0x50, 0xd9, 0xdc, 0x31, 0x7d, 0xed, 0xa3, 0x81, 0xc5, 0x78, 0x0d,
	0xce, 0xb2, 0x33, 0x52, 0xa5, 0x16, 0xe2, 0x5d, 0x84, 0x5d, 0x4a, 0x0a, 0x73, 0x80, 0xca, 0xfe,
	0x7c, 0xa5, 0x23, 0x12, 0x58, 0x7a, 0x03, 0xfb, 0x86, 0x7e, 0x47, 0x4e, 0xa3, 0xdf, 0x85, 0x9e,
	0x10, 0x47, 0xa9, 0x58, 0x82, 0x74, 0x6f, 0xf5, 0x9c, 0x9a, 0xdf, 0x04, 0xb8, 0x50, 0xa4, 0x46,
	0x19, 0x35, 0x90, 0xe6, 0xe0, 0x36, 0x0a, 0x1a, 0xc1, 0xb6, 0xfb, 0x16, 0x30, 0xb5, 0xc1, 0x69,
	0x5a, 0x85, 0x73, 0x36, 0xd2, 0x48, 0x1b, 0xd9, 0x48, 0xaf, 0xfa, 0x37, 0x2d, 0xf5, 0x6f, 0x6f,
	0x65, 0x9a, 0x2f, 0xdd, 0x77, 0xef, 0xcc, 0xf2, 0x5e, 0x77, 0xe2, 0xcb, 0x70, 0xe9, 0xa8, 0xdc,
	0x78, 0x11, 0xbf, 0x0a, 0x30, 0x55, 0xa4, 0xc6, 0x8e, 0xa5, 0xab, 0x0e, 0x2a, 0xb1, 0x4f, 0x03,
	0xf1, 0x0e, 0x8c, 0xab, 0x2d, 0xa7, 0x4e, 0x6c, 0xec, 0xec, 0x1f, 0xfb, 0x40, 0x09, 0xa1, 0xe2,
	0x06, 0x8c, 0x79, 0x1f, 0x17, 0xfe, 0x13, 0x65, 0x21, 0xee, 0x89, 0xc2, 0x40, 0x85, 0x91, 0x67,
	0x87, 0xd9, 0x21, 0xc5, 0x37, 0x59, 0x9f, 0x74, 0xb3, 0x0f, 0x9d, 0xe5, 0xe6, 0xd9, 0x33, 0x33,
	0x9a, 0x57, 0x90, 0xf3, 0xcd, 0x1f, 0xce, 0x40, 0xa2, 0x48, 0x0d, 0xb7, 0xe9, 0xcf, 0xc6, 0x7c,
	0x4a, 0xdc, 0x88, 0x09, 0x1d, 0xfb, 0xbe, 0x95, 0xee, 0x9e, 0xd6, 0x22, 0x48, 0x47, 0xfc, 0x16,
	0x66, 0xfa, 0xbe, 0x86, 0xe5, 0x78, 0x8f, 0xfd, 0xf0, 0xd2, 0x9d, 0xd3, 0xe1, 0x79, 0xfc, 0x6f,
	0xe0, 0x5c, 0xbf, 0x87, 0xe6, 0xea, 0x71, 0x05, 0x75, 0xc1, 0xa5, 0x0f, 0x4f, 0x05, 0xe7, 0xc1,
	0xff, 0x10, 0x20, 0x73, 0xcc, 0xd5, 0x75, 0x04, 0xb3, 0x47, 0x5b, 0x4a, 0x9f, 0xbe, 0xad, 0x25,
	0x4f, 0x8f, 0xc0, 0x54, 0xef, 0xa5, 0x72, 0xf5, 0x48, 0xa7, 0x51, 0xa8, 0xb4, 0x76, 0x62, 0x28,
	0x0f, 0x88, 0x21, 0xd5, 0xdd, 0x2b, 0xaf, 0xc4, 0xfb, 0xe8, 0x02, 0x4a, 0xf9, 0x13, 0x02, 0x79,
	0xa8, 0x9f, 0x05, 0x98, 0x8f, 0x6f, 0x3e, 0xb7, 0xe2, 0xdd, 0xc5, 0x1a, 0x49, 0x1b, 0x6f, 0x61,
	0xc4, 0xf3, 0xd9, 0x85, 0x89, 0xae, 0x36, 0xb2, 0x1c, 0xef, 0x2c, 0x8a, 0x93, 0xe4, 0x93, 0xe1,
	0x82, 0x38, 0xd2, 0xe8, 0x77, 0xaf, 0x9f, 0x5c, 0x13, 0x0a, 0x9f, 0x3f, 0x7b, 0x99, 0x11, 0x9e,
	0xbf, 0xcc, 0x08, 0x7f, 0xbf, 0xcc, 0x08, 0xbf, 0xbc, 0xca, 0x0c, 0x3d, 0x7f, 0x95, 0x19, 0xfa,
	0xeb, 0x55, 0x66, 0xe8, 0xcb, 0x13, 0x3c, 0x07, 0x3a, 0xd1, 0x7f, 0x2a, 0xd8, 0x8d, 0x5b, 0x1b,
	0x63, 0x7f, 0x51, 0xdc, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x5b, 0x06, 0xa2, 0xb8, 0x11,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateFinalityProvider creates a new finality provider
	CreateFinalityProvider(ctx context.Context, in *MsgCreateFinalityProvider, opts ...grpc.CallOption) (*MsgCreateFinalityProviderResponse, error)
	// EditFinalityProvider edits an existing finality provider
	EditFinalityProvider(ctx context.Context, in *MsgEditFinalityProvider, opts ...grpc.CallOption) (*MsgEditFinalityProviderResponse, error)
	// CreateBTCDelegation creates a new BTC delegation
	CreateBTCDelegation(ctx context.Context, in *MsgCreateBTCDelegation, opts ...grpc.CallOption) (*MsgCreateBTCDelegationResponse, error)
	// AddBTCDelegationInclusionProof adds inclusion proof of a given delegation on BTC chain
	AddBTCDelegationInclusionProof(ctx context.Context, in *MsgAddBTCDelegationInclusionProof, opts ...grpc.CallOption) (*MsgAddBTCDelegationInclusionProofResponse, error)
	// AddCovenantSigs handles signatures from a covenant member
	AddCovenantSigs(ctx context.Context, in *MsgAddCovenantSigs, opts ...grpc.CallOption) (*MsgAddCovenantSigsResponse, error)
	// BTCUndelegate handles a signature on unbonding tx from its delegator
	BTCUndelegate(ctx context.Context, in *MsgBTCUndelegate, opts ...grpc.CallOption) (*MsgBTCUndelegateResponse, error)
	// SelectiveSlashingEvidence handles the evidence of selective slashing launched
	// by a finality provider
	SelectiveSlashingEvidence(ctx context.Context, in *MsgSelectiveSlashingEvidence, opts ...grpc.CallOption) (*MsgSelectiveSlashingEvidenceResponse, error)
	// UpdateParams updates the btcstaking module parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateFinalityProvider(ctx context.Context, in *MsgCreateFinalityProvider, opts ...grpc.CallOption) (*MsgCreateFinalityProviderResponse, error) {
	out := new(MsgCreateFinalityProviderResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/CreateFinalityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditFinalityProvider(ctx context.Context, in *MsgEditFinalityProvider, opts ...grpc.CallOption) (*MsgEditFinalityProviderResponse, error) {
	out := new(MsgEditFinalityProviderResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/EditFinalityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBTCDelegation(ctx context.Context, in *MsgCreateBTCDelegation, opts ...grpc.CallOption) (*MsgCreateBTCDelegationResponse, error) {
	out := new(MsgCreateBTCDelegationResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/CreateBTCDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBTCDelegationInclusionProof(ctx context.Context, in *MsgAddBTCDelegationInclusionProof, opts ...grpc.CallOption) (*MsgAddBTCDelegationInclusionProofResponse, error) {
	out := new(MsgAddBTCDelegationInclusionProofResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/AddBTCDelegationInclusionProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCovenantSigs(ctx context.Context, in *MsgAddCovenantSigs, opts ...grpc.CallOption) (*MsgAddCovenantSigsResponse, error) {
	out := new(MsgAddCovenantSigsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/AddCovenantSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BTCUndelegate(ctx context.Context, in *MsgBTCUndelegate, opts ...grpc.CallOption) (*MsgBTCUndelegateResponse, error) {
	out := new(MsgBTCUndelegateResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/BTCUndelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelectiveSlashingEvidence(ctx context.Context, in *MsgSelectiveSlashingEvidence, opts ...grpc.CallOption) (*MsgSelectiveSlashingEvidenceResponse, error) {
	out := new(MsgSelectiveSlashingEvidenceResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/SelectiveSlashingEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateFinalityProvider creates a new finality provider
	CreateFinalityProvider(context.Context, *MsgCreateFinalityProvider) (*MsgCreateFinalityProviderResponse, error)
	// EditFinalityProvider edits an existing finality provider
	EditFinalityProvider(context.Context, *MsgEditFinalityProvider) (*MsgEditFinalityProviderResponse, error)
	// CreateBTCDelegation creates a new BTC delegation
	CreateBTCDelegation(context.Context, *MsgCreateBTCDelegation) (*MsgCreateBTCDelegationResponse, error)
	// AddBTCDelegationInclusionProof adds inclusion proof of a given delegation on BTC chain
	AddBTCDelegationInclusionProof(context.Context, *MsgAddBTCDelegationInclusionProof) (*MsgAddBTCDelegationInclusionProofResponse, error)
	// AddCovenantSigs handles signatures from a covenant member
	AddCovenantSigs(context.Context, *MsgAddCovenantSigs) (*MsgAddCovenantSigsResponse, error)
	// BTCUndelegate handles a signature on unbonding tx from its delegator
	BTCUndelegate(context.Context, *MsgBTCUndelegate) (*MsgBTCUndelegateResponse, error)
	// SelectiveSlashingEvidence handles the evidence of selective slashing launched
	// by a finality provider
	SelectiveSlashingEvidence(context.Context, *MsgSelectiveSlashingEvidence) (*MsgSelectiveSlashingEvidenceResponse, error)
	// UpdateParams updates the btcstaking module parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateFinalityProvider(ctx context.Context, req *MsgCreateFinalityProvider) (*MsgCreateFinalityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinalityProvider not implemented")
}
func (*UnimplementedMsgServer) EditFinalityProvider(ctx context.Context, req *MsgEditFinalityProvider) (*MsgEditFinalityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFinalityProvider not implemented")
}
func (*UnimplementedMsgServer) CreateBTCDelegation(ctx context.Context, req *MsgCreateBTCDelegation) (*MsgCreateBTCDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBTCDelegation not implemented")
}
func (*UnimplementedMsgServer) AddBTCDelegationInclusionProof(ctx context.Context, req *MsgAddBTCDelegationInclusionProof) (*MsgAddBTCDelegationInclusionProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBTCDelegationInclusionProof not implemented")
}
func (*UnimplementedMsgServer) AddCovenantSigs(ctx context.Context, req *MsgAddCovenantSigs) (*MsgAddCovenantSigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCovenantSigs not implemented")
}
func (*UnimplementedMsgServer) BTCUndelegate(ctx context.Context, req *MsgBTCUndelegate) (*MsgBTCUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCUndelegate not implemented")
}
func (*UnimplementedMsgServer) SelectiveSlashingEvidence(ctx context.Context, req *MsgSelectiveSlashingEvidence) (*MsgSelectiveSlashingEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectiveSlashingEvidence not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateFinalityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFinalityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFinalityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/CreateFinalityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFinalityProvider(ctx, req.(*MsgCreateFinalityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditFinalityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditFinalityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditFinalityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/EditFinalityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditFinalityProvider(ctx, req.(*MsgEditFinalityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBTCDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBTCDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBTCDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/CreateBTCDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBTCDelegation(ctx, req.(*MsgCreateBTCDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBTCDelegationInclusionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBTCDelegationInclusionProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBTCDelegationInclusionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/AddBTCDelegationInclusionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBTCDelegationInclusionProof(ctx, req.(*MsgAddBTCDelegationInclusionProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCovenantSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCovenantSigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCovenantSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/AddCovenantSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCovenantSigs(ctx, req.(*MsgAddCovenantSigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BTCUndelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBTCUndelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BTCUndelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/BTCUndelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BTCUndelegate(ctx, req.(*MsgBTCUndelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelectiveSlashingEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelectiveSlashingEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelectiveSlashingEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/SelectiveSlashingEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelectiveSlashingEvidence(ctx, req.(*MsgSelectiveSlashingEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.btcstaking.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFinalityProvider",
			Handler:    _Msg_CreateFinalityProvider_Handler,
		},
		{
			MethodName: "EditFinalityProvider",
			Handler:    _Msg_EditFinalityProvider_Handler,
		},
		{
			MethodName: "CreateBTCDelegation",
			Handler:    _Msg_CreateBTCDelegation_Handler,
		},
		{
			MethodName: "AddBTCDelegationInclusionProof",
			Handler:    _Msg_AddBTCDelegationInclusionProof_Handler,
		},
		{
			MethodName: "AddCovenantSigs",
			Handler:    _Msg_AddCovenantSigs_Handler,
		},
		{
			MethodName: "BTCUndelegate",
			Handler:    _Msg_BTCUndelegate_Handler,
		},
		{
			MethodName: "SelectiveSlashingEvidence",
			Handler:    _Msg_SelectiveSlashingEvidence_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/btcstaking/v1/tx.proto",
}

func (m *MsgCreateFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0x32
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Commission != nil {
		{
			size := m.Commission.Size()
			i -= size
			if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateFinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commission != nil {
		{
			size := m.Commission.Size()
			i -= size
			if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtcPk) > 0 {
		i -= len(m.BtcPk)
		copy(dAtA[i:], m.BtcPk)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BtcPk)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditFinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateBTCDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBTCDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBTCDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegatorUnbondingSlashingSig != nil {
		{
			size := m.DelegatorUnbondingSlashingSig.Size()
			i -= size
			if _, err := m.DelegatorUnbondingSlashingSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.UnbondingSlashingTx != nil {
		{
			size := m.UnbondingSlashingTx.Size()
			i -= size
			if _, err := m.UnbondingSlashingTx.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.UnbondingValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnbondingValue))
		i--
		dAtA[i] = 0x68
	}
	if len(m.UnbondingTx) > 0 {
		i -= len(m.UnbondingTx)
		copy(dAtA[i:], m.UnbondingTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnbondingTx)))
		i--
		dAtA[i] = 0x62
	}
	if m.UnbondingTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnbondingTime))
		i--
		dAtA[i] = 0x58
	}
	if m.DelegatorSlashingSig != nil {
		{
			size := m.DelegatorSlashingSig.Size()
			i -= size
			if _, err := m.DelegatorSlashingSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.SlashingTx != nil {
		{
			size := m.SlashingTx.Size()
			i -= size
			if _, err := m.SlashingTx.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.StakingTxInclusionProof != nil {
		{
			size, err := m.StakingTxInclusionProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.StakingTx) > 0 {
		i -= len(m.StakingTx)
		copy(dAtA[i:], m.StakingTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingTx)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StakingValue != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakingValue))
		i--
		dAtA[i] = 0x30
	}
	if m.StakingTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakingTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FpBtcPkList) > 0 {
		for iNdEx := len(m.FpBtcPkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.FpBtcPkList[iNdEx].Size()
				i -= size
				if _, err := m.FpBtcPkList[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerAddr) > 0 {
		i -= len(m.StakerAddr)
		copy(dAtA[i:], m.StakerAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBTCDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBTCDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBTCDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddBTCDelegationInclusionProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBTCDelegationInclusionProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBTCDelegationInclusionProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakingTxInclusionProof != nil {
		{
			size, err := m.StakingTxInclusionProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBTCDelegationInclusionProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBTCDelegationInclusionProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBTCDelegationInclusionProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddCovenantSigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCovenantSigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCovenantSigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashingUnbondingTxSigs) > 0 {
		for iNdEx := len(m.SlashingUnbondingTxSigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SlashingUnbondingTxSigs[iNdEx])
			copy(dAtA[i:], m.SlashingUnbondingTxSigs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SlashingUnbondingTxSigs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UnbondingTxSig != nil {
		{
			size := m.UnbondingTxSig.Size()
			i -= size
			if _, err := m.UnbondingTxSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SlashingTxSigs) > 0 {
		for iNdEx := len(m.SlashingTxSigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SlashingTxSigs[iNdEx])
			copy(dAtA[i:], m.SlashingTxSigs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SlashingTxSigs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCovenantSigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCovenantSigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCovenantSigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBTCUndelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBTCUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBTCUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeSpendingTxInclusionProof != nil {
		{
			size, err := m.StakeSpendingTxInclusionProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.StakeSpendingTx) > 0 {
		i -= len(m.StakeSpendingTx)
		copy(dAtA[i:], m.StakeSpendingTx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakeSpendingTx)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBTCUndelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBTCUndelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBTCUndelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSelectiveSlashingEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectiveSlashingEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectiveSlashingEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoveredFpBtcSk) > 0 {
		i -= len(m.RecoveredFpBtcSk)
		copy(dAtA[i:], m.RecoveredFpBtcSk)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecoveredFpBtcSk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectiveSlashingEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectiveSlashingEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectiveSlashingEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateFinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BtcPk)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditFinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateBTCDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.FpBtcPkList) > 0 {
		for _, e := range m.FpBtcPkList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.StakingTime != 0 {
		n += 1 + sovTx(uint64(m.StakingTime))
	}
	if m.StakingValue != 0 {
		n += 1 + sovTx(uint64(m.StakingValue))
	}
	l = len(m.StakingTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakingTxInclusionProof != nil {
		l = m.StakingTxInclusionProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SlashingTx != nil {
		l = m.SlashingTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DelegatorSlashingSig != nil {
		l = m.DelegatorSlashingSig.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnbondingTime != 0 {
		n += 1 + sovTx(uint64(m.UnbondingTime))
	}
	l = len(m.UnbondingTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnbondingValue != 0 {
		n += 1 + sovTx(uint64(m.UnbondingValue))
	}
	if m.UnbondingSlashingTx != nil {
		l = m.UnbondingSlashingTx.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DelegatorUnbondingSlashingSig != nil {
		l = m.DelegatorUnbondingSlashingSig.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateBTCDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddBTCDelegationInclusionProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakingTxInclusionProof != nil {
		l = m.StakingTxInclusionProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddBTCDelegationInclusionProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddCovenantSigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SlashingTxSigs) > 0 {
		for _, b := range m.SlashingTxSigs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UnbondingTxSig != nil {
		l = m.UnbondingTxSig.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SlashingUnbondingTxSigs) > 0 {
		for _, b := range m.SlashingUnbondingTxSigs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddCovenantSigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBTCUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakeSpendingTx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakeSpendingTxInclusionProof != nil {
		l = m.StakeSpendingTxInclusionProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBTCUndelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSelectiveSlashingEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecoveredFpBtcSk)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectiveSlashingEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Commission = &v
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &ProofOfPossessionBTC{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateFinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcPk = append(m.BtcPk[:0], dAtA[iNdEx:postIndex]...)
			if m.BtcPk == nil {
				m.BtcPk = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Commission = &v
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBTCDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBTCDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBTCDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &ProofOfPossessionBTC{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.FpBtcPkList = append(m.FpBtcPkList, v)
			if err := m.FpBtcPkList[len(m.FpBtcPkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTime", wireType)
			}
			m.StakingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValue", wireType)
			}
			m.StakingValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTx = append(m.StakingTx[:0], dAtA[iNdEx:postIndex]...)
			if m.StakingTx == nil {
				m.StakingTx = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxInclusionProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakingTxInclusionProof == nil {
				m.StakingTxInclusionProof = &InclusionProof{}
			}
			if err := m.StakingTxInclusionProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v BTCSlashingTx
			m.SlashingTx = &v
			if err := m.SlashingTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSlashingSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340Signature
			m.DelegatorSlashingSig = &v
			if err := m.DelegatorSlashingSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			m.UnbondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingTx = append(m.UnbondingTx[:0], dAtA[iNdEx:postIndex]...)
			if m.UnbondingTx == nil {
				m.UnbondingTx = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingValue", wireType)
			}
			m.UnbondingValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingSlashingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v BTCSlashingTx
			m.UnbondingSlashingTx = &v
			if err := m.UnbondingSlashingTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorUnbondingSlashingSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340Signature
			m.DelegatorUnbondingSlashingSig = &v
			if err := m.DelegatorUnbondingSlashingSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBTCDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBTCDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBTCDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBTCDelegationInclusionProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBTCDelegationInclusionProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBTCDelegationInclusionProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxInclusionProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakingTxInclusionProof == nil {
				m.StakingTxInclusionProof = &InclusionProof{}
			}
			if err := m.StakingTxInclusionProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBTCDelegationInclusionProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBTCDelegationInclusionProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBTCDelegationInclusionProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCovenantSigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCovenantSigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCovenantSigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingTxSigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashingTxSigs = append(m.SlashingTxSigs, make([]byte, postIndex-iNdEx))
			copy(m.SlashingTxSigs[len(m.SlashingTxSigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTxSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340Signature
			m.UnbondingTxSig = &v
			if err := m.UnbondingTxSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingUnbondingTxSigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashingUnbondingTxSigs = append(m.SlashingUnbondingTxSigs, make([]byte, postIndex-iNdEx))
			copy(m.SlashingUnbondingTxSigs[len(m.SlashingUnbondingTxSigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCovenantSigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCovenantSigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCovenantSigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBTCUndelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBTCUndelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBTCUndelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeSpendingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeSpendingTx = append(m.StakeSpendingTx[:0], dAtA[iNdEx:postIndex]...)
			if m.StakeSpendingTx == nil {
				m.StakeSpendingTx = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeSpendingTxInclusionProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeSpendingTxInclusionProof == nil {
				m.StakeSpendingTxInclusionProof = &InclusionProof{}
			}
			if err := m.StakeSpendingTxInclusionProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBTCUndelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBTCUndelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBTCUndelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectiveSlashingEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectiveSlashingEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectiveSlashingEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveredFpBtcSk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveredFpBtcSk = append(m.RecoveredFpBtcSk[:0], dAtA[iNdEx:postIndex]...)
			if m.RecoveredFpBtcSk == nil {
				m.RecoveredFpBtcSk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectiveSlashingEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectiveSlashingEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectiveSlashingEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
