// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_babylonlabs_io_babylon_types "github.com/babylonlabs-io/babylon/v2/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the btcstaking module's genesis state.
type GenesisState struct {
	// different versions of params used through the history of the chain
	Params []*Params `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	// finality_providers all the finality providers registered.
	FinalityProviders []*FinalityProvider `protobuf:"bytes,2,rep,name=finality_providers,json=finalityProviders,proto3" json:"finality_providers,omitempty"`
	// btc_delegations all the btc delegations in the state.
	BtcDelegations []*BTCDelegation `protobuf:"bytes,3,rep,name=btc_delegations,json=btcDelegations,proto3" json:"btc_delegations,omitempty"`
	// block_height_chains the block height of babylon and bitcoin.
	BlockHeightChains []*BlockHeightBbnToBtc `protobuf:"bytes,5,rep,name=block_height_chains,json=blockHeightChains,proto3" json:"block_height_chains,omitempty"`
	// btc_delegators contains all the btc delegators with the associated finality
	// provider.
	BtcDelegators []*BTCDelegator `protobuf:"bytes,6,rep,name=btc_delegators,json=btcDelegators,proto3" json:"btc_delegators,omitempty"`
	// all the events and its indexes.
	Events []*EventIndex `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	// collection of the allowed staking transaction hashes (hex encoded)
	AllowedStakingTxHashes []string `protobuf:"bytes,8,rep,name=allowed_staking_tx_hashes,json=allowedStakingTxHashes,proto3" json:"allowed_staking_tx_hashes,omitempty"`
	// largest BTC block reorg
	LargestBtcReorg *LargestBtcReOrg `protobuf:"bytes,9,opt,name=largest_btc_reorg,json=largestBtcReorg,proto3" json:"largest_btc_reorg,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85d7b95fa5620238, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() []*Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetFinalityProviders() []*FinalityProvider {
	if m != nil {
		return m.FinalityProviders
	}
	return nil
}

func (m *GenesisState) GetBtcDelegations() []*BTCDelegation {
	if m != nil {
		return m.BtcDelegations
	}
	return nil
}

func (m *GenesisState) GetBlockHeightChains() []*BlockHeightBbnToBtc {
	if m != nil {
		return m.BlockHeightChains
	}
	return nil
}

func (m *GenesisState) GetBtcDelegators() []*BTCDelegator {
	if m != nil {
		return m.BtcDelegators
	}
	return nil
}

func (m *GenesisState) GetEvents() []*EventIndex {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *GenesisState) GetAllowedStakingTxHashes() []string {
	if m != nil {
		return m.AllowedStakingTxHashes
	}
	return nil
}

func (m *GenesisState) GetLargestBtcReorg() *LargestBtcReOrg {
	if m != nil {
		return m.LargestBtcReorg
	}
	return nil
}

// BlockHeightBbnToBtc stores the btc <-> bbn block.
type BlockHeightBbnToBtc struct {
	// block_height_bbn is the height of the block in the babylon chain.
	BlockHeightBbn uint64 `protobuf:"varint,1,opt,name=block_height_bbn,json=blockHeightBbn,proto3" json:"block_height_bbn,omitempty"`
	// block_height_btc is the height of the block in the BTC.
	BlockHeightBtc uint32 `protobuf:"varint,2,opt,name=block_height_btc,json=blockHeightBtc,proto3" json:"block_height_btc,omitempty"`
}

func (m *BlockHeightBbnToBtc) Reset()         { *m = BlockHeightBbnToBtc{} }
func (m *BlockHeightBbnToBtc) String() string { return proto.CompactTextString(m) }
func (*BlockHeightBbnToBtc) ProtoMessage()    {}
func (*BlockHeightBbnToBtc) Descriptor() ([]byte, []int) {
	return fileDescriptor_85d7b95fa5620238, []int{1}
}
func (m *BlockHeightBbnToBtc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeightBbnToBtc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeightBbnToBtc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeightBbnToBtc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightBbnToBtc.Merge(m, src)
}
func (m *BlockHeightBbnToBtc) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeightBbnToBtc) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightBbnToBtc.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightBbnToBtc proto.InternalMessageInfo

func (m *BlockHeightBbnToBtc) GetBlockHeightBbn() uint64 {
	if m != nil {
		return m.BlockHeightBbn
	}
	return 0
}

func (m *BlockHeightBbnToBtc) GetBlockHeightBtc() uint32 {
	if m != nil {
		return m.BlockHeightBtc
	}
	return 0
}

// BTCDelegator BTC delegator information with the associated finality provider.
type BTCDelegator struct {
	// idx the btc delegator index.
	Idx *BTCDelegatorDelegationIndex `protobuf:"bytes,1,opt,name=idx,proto3" json:"idx,omitempty"`
	// fp_btc_pk the finality provider btc public key.
	FpBtcPk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,2,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v2/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
	// del_btc_pk the delegator btc public key.
	DelBtcPk *github_com_babylonlabs_io_babylon_types.BIP340PubKey `protobuf:"bytes,3,opt,name=del_btc_pk,json=delBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v2/types.BIP340PubKey" json:"del_btc_pk,omitempty"`
}

func (m *BTCDelegator) Reset()         { *m = BTCDelegator{} }
func (m *BTCDelegator) String() string { return proto.CompactTextString(m) }
func (*BTCDelegator) ProtoMessage()    {}
func (*BTCDelegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_85d7b95fa5620238, []int{2}
}
func (m *BTCDelegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegator.Merge(m, src)
}
func (m *BTCDelegator) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegator) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegator.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegator proto.InternalMessageInfo

func (m *BTCDelegator) GetIdx() *BTCDelegatorDelegationIndex {
	if m != nil {
		return m.Idx
	}
	return nil
}

// EventIndex contains the event and its index.
type EventIndex struct {
	// idx is the index the event was stored.
	Idx uint64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	// block_height_btc is the height of the block in the BTC chain.
	BlockHeightBtc uint32 `protobuf:"varint,2,opt,name=block_height_btc,json=blockHeightBtc,proto3" json:"block_height_btc,omitempty"`
	// event the event stored.
	Event *EventPowerDistUpdate `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventIndex) Reset()         { *m = EventIndex{} }
func (m *EventIndex) String() string { return proto.CompactTextString(m) }
func (*EventIndex) ProtoMessage()    {}
func (*EventIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_85d7b95fa5620238, []int{3}
}
func (m *EventIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIndex.Merge(m, src)
}
func (m *EventIndex) XXX_Size() int {
	return m.Size()
}
func (m *EventIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIndex.DiscardUnknown(m)
}

var xxx_messageInfo_EventIndex proto.InternalMessageInfo

func (m *EventIndex) GetIdx() uint64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *EventIndex) GetBlockHeightBtc() uint32 {
	if m != nil {
		return m.BlockHeightBtc
	}
	return 0
}

func (m *EventIndex) GetEvent() *EventPowerDistUpdate {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "babylon.btcstaking.v1.GenesisState")
	proto.RegisterType((*BlockHeightBbnToBtc)(nil), "babylon.btcstaking.v1.BlockHeightBbnToBtc")
	proto.RegisterType((*BTCDelegator)(nil), "babylon.btcstaking.v1.BTCDelegator")
	proto.RegisterType((*EventIndex)(nil), "babylon.btcstaking.v1.EventIndex")
}

func init() {
	proto.RegisterFile("babylon/btcstaking/v1/genesis.proto", fileDescriptor_85d7b95fa5620238)
}

var fileDescriptor_85d7b95fa5620238 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x4f, 0xdb, 0x3e,
	0x14, 0xc0, 0x09, 0x85, 0x02, 0x2e, 0x3f, 0xcd, 0xf7, 0x3b, 0x65, 0x48, 0xeb, 0xba, 0x32, 0xb1,
	0x6a, 0xd3, 0xd2, 0x51, 0x98, 0x34, 0x8e, 0x0b, 0x6c, 0x83, 0xfd, 0xac, 0x4c, 0xc7, 0x81, 0x4b,
	0x64, 0x27, 0x6e, 0x62, 0x35, 0xc4, 0x91, 0x6d, 0x4a, 0x7b, 0xdd, 0x75, 0x97, 0xfd, 0x59, 0x3b,
	0x72, 0x9c, 0x76, 0x40, 0x13, 0xfc, 0x23, 0x53, 0x9c, 0xb0, 0x94, 0xad, 0x65, 0x48, 0xbb, 0x25,
	0xf6, 0xe7, 0x7d, 0xfc, 0xde, 0xf3, 0x93, 0xc1, 0x2a, 0xc1, 0xa4, 0x1f, 0xf2, 0xa8, 0x4e, 0x94,
	0x2b, 0x15, 0xee, 0xb0, 0xc8, 0xaf, 0x77, 0xd7, 0xeb, 0x3e, 0x8d, 0xa8, 0x64, 0xd2, 0x8a, 0x05,
	0x57, 0x1c, 0xfe, 0x9f, 0x41, 0x56, 0x0e, 0x59, 0xdd, 0xf5, 0x95, 0xff, 0x7c, 0xee, 0x73, 0x4d,
	0xd4, 0x93, 0xaf, 0x14, 0x5e, 0xa9, 0x0e, 0x37, 0xc6, 0x58, 0xe0, 0xa3, 0x4c, 0xb8, 0xb2, 0x36,
	0x9c, 0x19, 0xd0, 0x5f, 0xeb, 0xa2, 0x5d, 0x1a, 0xa9, 0xcc, 0x55, 0x3d, 0x9b, 0x00, 0xb3, 0xaf,
	0xd2, 0x74, 0xf7, 0x15, 0x56, 0x14, 0x3e, 0x05, 0xc5, 0xf4, 0x30, 0xd3, 0xa8, 0x14, 0x6a, 0xa5,
	0xc6, 0x1d, 0x6b, 0x68, 0xfa, 0x56, 0x53, 0x43, 0x28, 0x83, 0xe1, 0x01, 0x80, 0x6d, 0x16, 0xe1,
	0x90, 0xa9, 0xbe, 0x13, 0x0b, 0xde, 0x65, 0x1e, 0x15, 0xd2, 0x1c, 0xd7, 0x8a, 0x07, 0x23, 0x14,
	0x2f, 0xb3, 0x80, 0x66, 0xc6, 0xa3, 0xa5, 0xf6, 0x6f, 0x2b, 0x12, 0xbe, 0x03, 0x0b, 0x44, 0xb9,
	0x8e, 0x47, 0x43, 0xea, 0x63, 0xc5, 0x78, 0x24, 0xcd, 0x82, 0x96, 0xde, 0x1f, 0x21, 0xb5, 0x5b,
	0xdb, 0x3b, 0xbf, 0x60, 0x34, 0x4f, 0x94, 0x9b, 0xff, 0x4a, 0x78, 0x08, 0x96, 0x49, 0xc8, 0xdd,
	0x8e, 0x13, 0x50, 0xe6, 0x07, 0xca, 0x71, 0x03, 0xcc, 0x22, 0x69, 0x4e, 0x6a, 0xe5, 0xc3, 0x51,
	0xca, 0x24, 0x62, 0x57, 0x07, 0xd8, 0x24, 0x6a, 0x71, 0x5b, 0xb9, 0x68, 0x89, 0xe4, 0x8b, 0xdb,
	0x5a, 0x02, 0x5f, 0x83, 0xf9, 0x81, 0x54, 0xb9, 0x90, 0x66, 0x51, 0x6b, 0x57, 0xff, 0x9a, 0x29,
	0x17, 0x68, 0x2e, 0x4f, 0x94, 0x0b, 0x09, 0xb7, 0x40, 0x31, 0xbd, 0x26, 0x73, 0x4a, 0x3b, 0xee,
	0x8d, 0x70, 0xbc, 0x48, 0xa0, 0xbd, 0xc8, 0xa3, 0x3d, 0x94, 0x05, 0xc0, 0x2d, 0x70, 0x1b, 0x87,
	0x21, 0x3f, 0xa1, 0x9e, 0x93, 0x81, 0x8e, 0xea, 0x39, 0x01, 0x96, 0x01, 0x95, 0xe6, 0x74, 0xa5,
	0x50, 0x9b, 0x41, 0xb7, 0x32, 0x60, 0x3f, 0xdd, 0x6f, 0xf5, 0x76, 0xf5, 0x2e, 0x44, 0x60, 0x29,
	0xc4, 0xc2, 0xa7, 0x52, 0x39, 0x49, 0x25, 0x82, 0x72, 0xe1, 0x9b, 0x33, 0x15, 0xa3, 0x56, 0x6a,
	0xac, 0x8d, 0x48, 0xe0, 0x6d, 0xca, 0x27, 0x2d, 0xa1, 0x1f, 0x84, 0x8f, 0x16, 0xc2, 0x81, 0x05,
	0x2e, 0xfc, 0x2a, 0x03, 0xcb, 0x43, 0xfa, 0x07, 0x6b, 0x60, 0xf1, 0xca, 0x45, 0x10, 0x12, 0x99,
	0x46, 0xc5, 0xa8, 0x4d, 0xa0, 0x79, 0x72, 0x05, 0xff, 0x93, 0x54, 0xae, 0x39, 0x5e, 0x31, 0x6a,
	0x73, 0x57, 0x49, 0xe5, 0x56, 0x3f, 0x8d, 0x83, 0xd9, 0xc1, 0xa6, 0xc2, 0x1d, 0x50, 0x60, 0x5e,
	0x4f, 0x7b, 0x4b, 0x8d, 0xc6, 0x0d, 0xae, 0x21, 0x1f, 0x95, 0xb4, 0xa7, 0x49, 0x38, 0x6c, 0x81,
	0x99, 0x76, 0xac, 0x1b, 0x12, 0x77, 0xf4, 0xc9, 0xb3, 0xf6, 0xb3, 0xef, 0x67, 0x77, 0x37, 0x7d,
	0xa6, 0x82, 0x63, 0x62, 0xb9, 0xfc, 0xa8, 0x9e, 0x99, 0x43, 0x4c, 0xe4, 0x63, 0xc6, 0x2f, 0x7f,
	0xeb, 0xaa, 0x1f, 0x53, 0x69, 0xd9, 0x7b, 0xcd, 0x8d, 0xcd, 0x27, 0xcd, 0x63, 0xf2, 0x86, 0xf6,
	0xd1, 0x54, 0x3b, 0xb6, 0x95, 0xdb, 0xec, 0xc0, 0x03, 0x00, 0x3c, 0x1a, 0x5e, 0x6a, 0x0b, 0xff,
	0xa8, 0x9d, 0xf6, 0x68, 0xa8, 0xbd, 0xd5, 0xcf, 0x06, 0x00, 0xf9, 0x54, 0xc0, 0xc5, 0xbc, 0x05,
	0x13, 0x69, 0x39, 0x37, 0xee, 0x27, 0x7c, 0x0e, 0x26, 0xf5, 0x4c, 0xe9, 0xec, 0x4a, 0x8d, 0x47,
	0xd7, 0xcd, 0x60, 0x93, 0x9f, 0x50, 0xb1, 0xc3, 0xa4, 0xfa, 0x18, 0x7b, 0x58, 0x51, 0x94, 0x46,
	0xda, 0xef, 0xbf, 0x9e, 0x97, 0x8d, 0xd3, 0xf3, 0xb2, 0xf1, 0xe3, 0xbc, 0x6c, 0x7c, 0xb9, 0x28,
	0x8f, 0x9d, 0x5e, 0x94, 0xc7, 0xbe, 0x5d, 0x94, 0xc7, 0x0e, 0x6f, 0x50, 0x67, 0x6f, 0xf0, 0xe1,
	0xd2, 0x45, 0x93, 0xa2, 0x7e, 0xb5, 0x36, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x25, 0xcb, 0x48,
	0xd8, 0x79, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LargestBtcReorg != nil {
		{
			size, err := m.LargestBtcReorg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AllowedStakingTxHashes) > 0 {
		for iNdEx := len(m.AllowedStakingTxHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedStakingTxHashes[iNdEx])
			copy(dAtA[i:], m.AllowedStakingTxHashes[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AllowedStakingTxHashes[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BtcDelegators) > 0 {
		for iNdEx := len(m.BtcDelegators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BlockHeightChains) > 0 {
		for iNdEx := len(m.BlockHeightChains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeightChains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BtcDelegations) > 0 {
		for iNdEx := len(m.BtcDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FinalityProviders) > 0 {
		for iNdEx := len(m.FinalityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeightBbnToBtc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeightBbnToBtc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeightBbnToBtc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeightBtc != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockHeightBtc))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeightBbn != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockHeightBbn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelBtcPk != nil {
		{
			size := m.DelBtcPk.Size()
			i -= size
			if _, err := m.DelBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Idx != nil {
		{
			size, err := m.Idx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeightBtc != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockHeightBtc))
		i--
		dAtA[i] = 0x10
	}
	if m.Idx != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FinalityProviders) > 0 {
		for _, e := range m.FinalityProviders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BtcDelegations) > 0 {
		for _, e := range m.BtcDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlockHeightChains) > 0 {
		for _, e := range m.BlockHeightChains {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BtcDelegators) > 0 {
		for _, e := range m.BtcDelegators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AllowedStakingTxHashes) > 0 {
		for _, s := range m.AllowedStakingTxHashes {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LargestBtcReorg != nil {
		l = m.LargestBtcReorg.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *BlockHeightBbnToBtc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeightBbn != 0 {
		n += 1 + sovGenesis(uint64(m.BlockHeightBbn))
	}
	if m.BlockHeightBtc != 0 {
		n += 1 + sovGenesis(uint64(m.BlockHeightBtc))
	}
	return n
}

func (m *BTCDelegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != nil {
		l = m.Idx.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DelBtcPk != nil {
		l = m.DelBtcPk.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *EventIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovGenesis(uint64(m.Idx))
	}
	if m.BlockHeightBtc != 0 {
		n += 1 + sovGenesis(uint64(m.BlockHeightBtc))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, &Params{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviders = append(m.FinalityProviders, &FinalityProvider{})
			if err := m.FinalityProviders[len(m.FinalityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegations = append(m.BtcDelegations, &BTCDelegation{})
			if err := m.BtcDelegations[len(m.BtcDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightChains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeightChains = append(m.BlockHeightChains, &BlockHeightBbnToBtc{})
			if err := m.BlockHeightChains[len(m.BlockHeightChains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegators = append(m.BtcDelegators, &BTCDelegator{})
			if err := m.BtcDelegators[len(m.BtcDelegators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventIndex{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedStakingTxHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedStakingTxHashes = append(m.AllowedStakingTxHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LargestBtcReorg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LargestBtcReorg == nil {
				m.LargestBtcReorg = &LargestBtcReOrg{}
			}
			if err := m.LargestBtcReorg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeightBbnToBtc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeightBbnToBtc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeightBbnToBtc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightBbn", wireType)
			}
			m.BlockHeightBbn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightBbn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightBtc", wireType)
			}
			m.BlockHeightBtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightBtc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Idx == nil {
				m.Idx = &BTCDelegatorDelegationIndex{}
			}
			if err := m.Idx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_types.BIP340PubKey
			m.DelBtcPk = &v
			if err := m.DelBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightBtc", wireType)
			}
			m.BlockHeightBtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightBtc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &EventPowerDistUpdate{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
