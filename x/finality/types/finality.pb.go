// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/finality/v1/finality.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_babylonlabs_io_babylon_v3_types "github.com/babylonlabs-io/babylon/v3/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VotingPowerDistCache is the cache for voting power distribution of finality
// providers and their BTC delegations at a height
type VotingPowerDistCache struct {
	// total_voting_power is the total voting power of all (active) finality
	// providers in the cache
	TotalVotingPower uint64 `protobuf:"varint,1,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	// finality_providers is a list of finality providers' voting power
	// information
	FinalityProviders []*FinalityProviderDistInfo `protobuf:"bytes,2,rep,name=finality_providers,json=finalityProviders,proto3" json:"finality_providers,omitempty"`
	// num_active_fps is the number of finality providers that have active BTC
	// delegations as well as timestamped public randomness
	NumActiveFps uint32 `protobuf:"varint,3,opt,name=num_active_fps,json=numActiveFps,proto3" json:"num_active_fps,omitempty"`
}

func (m *VotingPowerDistCache) Reset()         { *m = VotingPowerDistCache{} }
func (m *VotingPowerDistCache) String() string { return proto.CompactTextString(m) }
func (*VotingPowerDistCache) ProtoMessage()    {}
func (*VotingPowerDistCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{0}
}
func (m *VotingPowerDistCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingPowerDistCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingPowerDistCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingPowerDistCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingPowerDistCache.Merge(m, src)
}
func (m *VotingPowerDistCache) XXX_Size() int {
	return m.Size()
}
func (m *VotingPowerDistCache) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingPowerDistCache.DiscardUnknown(m)
}

var xxx_messageInfo_VotingPowerDistCache proto.InternalMessageInfo

// FinalityProviderDistInfo is the reward distribution of a finality provider
// and its BTC delegations
type FinalityProviderDistInfo struct {
	// btc_pk is the Bitcoin secp256k1 PK of this finality provider
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// addr is the bytes of the address to receive commission from delegations.
	Addr []byte `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// commission defines the commission rate of finality provider
	Commission *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission,omitempty"`
	// total_bonded_sat is the total amount of bonded BTC stake (in Satoshi) of
	// the finality provider
	TotalBondedSat uint64 `protobuf:"varint,4,opt,name=total_bonded_sat,json=totalBondedSat,proto3" json:"total_bonded_sat,omitempty"`
	// is_timestamped indicates whether the finality provider
	// has timestamped public randomness committed
	// if no, it should not be assigned voting power
	IsTimestamped bool `protobuf:"varint,5,opt,name=is_timestamped,json=isTimestamped,proto3" json:"is_timestamped,omitempty"`
	// is_jailed indicates whether the finality provider
	// is jailed, if so, it should not be assigned voting power
	IsJailed bool `protobuf:"varint,6,opt,name=is_jailed,json=isJailed,proto3" json:"is_jailed,omitempty"`
	// is_slashed indicates whether the finality provider
	// is slashed, if so, it should not be assigned voting power
	IsSlashed bool `protobuf:"varint,7,opt,name=is_slashed,json=isSlashed,proto3" json:"is_slashed,omitempty"`
}

func (m *FinalityProviderDistInfo) Reset()         { *m = FinalityProviderDistInfo{} }
func (m *FinalityProviderDistInfo) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderDistInfo) ProtoMessage()    {}
func (*FinalityProviderDistInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{1}
}
func (m *FinalityProviderDistInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderDistInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderDistInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderDistInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderDistInfo.Merge(m, src)
}
func (m *FinalityProviderDistInfo) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderDistInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderDistInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderDistInfo proto.InternalMessageInfo

func (m *FinalityProviderDistInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *FinalityProviderDistInfo) GetTotalBondedSat() uint64 {
	if m != nil {
		return m.TotalBondedSat
	}
	return 0
}

func (m *FinalityProviderDistInfo) GetIsTimestamped() bool {
	if m != nil {
		return m.IsTimestamped
	}
	return false
}

func (m *FinalityProviderDistInfo) GetIsJailed() bool {
	if m != nil {
		return m.IsJailed
	}
	return false
}

func (m *FinalityProviderDistInfo) GetIsSlashed() bool {
	if m != nil {
		return m.IsSlashed
	}
	return false
}

// IndexedBlock is the necessary metadata and finalization status of a block
type IndexedBlock struct {
	// height is the height of the block
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// app_hash is the AppHash of the block
	AppHash []byte `protobuf:"bytes,2,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
	// finalized indicates whether the IndexedBlock is finalised by 2/3
	// finality providers or not
	Finalized bool `protobuf:"varint,3,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (m *IndexedBlock) Reset()         { *m = IndexedBlock{} }
func (m *IndexedBlock) String() string { return proto.CompactTextString(m) }
func (*IndexedBlock) ProtoMessage()    {}
func (*IndexedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{2}
}
func (m *IndexedBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedBlock.Merge(m, src)
}
func (m *IndexedBlock) XXX_Size() int {
	return m.Size()
}
func (m *IndexedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedBlock proto.InternalMessageInfo

func (m *IndexedBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IndexedBlock) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

func (m *IndexedBlock) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

// PubRandCommit is a commitment to a series of public randomness
// currently, the commitment is a root of a Merkle tree that includes
// a series of public randomness
type PubRandCommit struct {
	// start_height is the height of the first commitment
	StartHeight uint64 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// num_pub_rand is the number of committed public randomness
	NumPubRand uint64 `protobuf:"varint,2,opt,name=num_pub_rand,json=numPubRand,proto3" json:"num_pub_rand,omitempty"`
	// commitment is the value of the commitment
	// currently, it is the root of the merkle tree constructed by the public
	// randomness
	Commitment []byte `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// epoch_num defines the epoch number that the commit falls into
	EpochNum uint64 `protobuf:"varint,4,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
}

func (m *PubRandCommit) Reset()         { *m = PubRandCommit{} }
func (m *PubRandCommit) String() string { return proto.CompactTextString(m) }
func (*PubRandCommit) ProtoMessage()    {}
func (*PubRandCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{3}
}
func (m *PubRandCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubRandCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubRandCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubRandCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRandCommit.Merge(m, src)
}
func (m *PubRandCommit) XXX_Size() int {
	return m.Size()
}
func (m *PubRandCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRandCommit.DiscardUnknown(m)
}

var xxx_messageInfo_PubRandCommit proto.InternalMessageInfo

func (m *PubRandCommit) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *PubRandCommit) GetNumPubRand() uint64 {
	if m != nil {
		return m.NumPubRand
	}
	return 0
}

func (m *PubRandCommit) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *PubRandCommit) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

// PubRandCommitIndexValue represents a list of sorted start heights for public
// randomness commitments.
type PubRandCommitIndexValue struct {
	// A list of start heights corresponding to committed public randomness
	// ranges.
	Heights []uint64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (m *PubRandCommitIndexValue) Reset()         { *m = PubRandCommitIndexValue{} }
func (m *PubRandCommitIndexValue) String() string { return proto.CompactTextString(m) }
func (*PubRandCommitIndexValue) ProtoMessage()    {}
func (*PubRandCommitIndexValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{4}
}
func (m *PubRandCommitIndexValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubRandCommitIndexValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubRandCommitIndexValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubRandCommitIndexValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubRandCommitIndexValue.Merge(m, src)
}
func (m *PubRandCommitIndexValue) XXX_Size() int {
	return m.Size()
}
func (m *PubRandCommitIndexValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PubRandCommitIndexValue.DiscardUnknown(m)
}

var xxx_messageInfo_PubRandCommitIndexValue proto.InternalMessageInfo

// Evidence is the evidence that a finality provider has signed finality
// signatures with correct public randomness on two conflicting Babylon headers
type Evidence struct {
	// fp_btc_pk is the BTC PK of the finality provider that casts this vote
	FpBtcPk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,1,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
	// block_height is the height of the conflicting blocks
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// pub_rand is the public randomness the finality provider has committed to
	PubRand *github_com_babylonlabs_io_babylon_v3_types.SchnorrPubRand `protobuf:"bytes,3,opt,name=pub_rand,json=pubRand,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.SchnorrPubRand" json:"pub_rand,omitempty"`
	// canonical_app_hash is the AppHash of the canonical block
	CanonicalAppHash []byte `protobuf:"bytes,4,opt,name=canonical_app_hash,json=canonicalAppHash,proto3" json:"canonical_app_hash,omitempty"`
	// fork_app_hash is the AppHash of the fork block
	ForkAppHash []byte `protobuf:"bytes,5,opt,name=fork_app_hash,json=forkAppHash,proto3" json:"fork_app_hash,omitempty"`
	// canonical_finality_sig is the finality signature to the canonical block
	// where finality signature is an EOTS signature, i.e.,
	// the `s` in a Schnorr signature `(r, s)`
	// `r` is the public randomness that is already committed by the finality
	// provider
	CanonicalFinalitySig *github_com_babylonlabs_io_babylon_v3_types.SchnorrEOTSSig `protobuf:"bytes,6,opt,name=canonical_finality_sig,json=canonicalFinalitySig,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.SchnorrEOTSSig" json:"canonical_finality_sig,omitempty"`
	// fork_finality_sig is the finality signature to the fork block
	// where finality signature is an EOTS signature
	ForkFinalitySig *github_com_babylonlabs_io_babylon_v3_types.SchnorrEOTSSig `protobuf:"bytes,7,opt,name=fork_finality_sig,json=forkFinalitySig,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.SchnorrEOTSSig" json:"fork_finality_sig,omitempty"`
}

func (m *Evidence) Reset()         { *m = Evidence{} }
func (m *Evidence) String() string { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()    {}
func (*Evidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{5}
}
func (m *Evidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Evidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Evidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Evidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Evidence.Merge(m, src)
}
func (m *Evidence) XXX_Size() int {
	return m.Size()
}
func (m *Evidence) XXX_DiscardUnknown() {
	xxx_messageInfo_Evidence.DiscardUnknown(m)
}

var xxx_messageInfo_Evidence proto.InternalMessageInfo

func (m *Evidence) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Evidence) GetCanonicalAppHash() []byte {
	if m != nil {
		return m.CanonicalAppHash
	}
	return nil
}

func (m *Evidence) GetForkAppHash() []byte {
	if m != nil {
		return m.ForkAppHash
	}
	return nil
}

// FinalityProviderSigningInfo defines a finality provider's signing info for
// monitoring their liveness activity.
type FinalityProviderSigningInfo struct {
	// fp_btc_pk is the BTC PK of the finality provider that casts this vote
	FpBtcPk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,1,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
	// start_height is the block height at which finality provider become active
	StartHeight int64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// missed_blocks_counter defines a counter to avoid unnecessary array reads.
	// Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
	MissedBlocksCounter int64 `protobuf:"varint,3,opt,name=missed_blocks_counter,json=missedBlocksCounter,proto3" json:"missed_blocks_counter,omitempty"`
	// Timestamp until which the validator is jailed due to liveness downtime.
	JailedUntil time.Time `protobuf:"bytes,4,opt,name=jailed_until,json=jailedUntil,proto3,stdtime" json:"jailed_until"`
}

func (m *FinalityProviderSigningInfo) Reset()         { *m = FinalityProviderSigningInfo{} }
func (m *FinalityProviderSigningInfo) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderSigningInfo) ProtoMessage()    {}
func (*FinalityProviderSigningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{6}
}
func (m *FinalityProviderSigningInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderSigningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderSigningInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderSigningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderSigningInfo.Merge(m, src)
}
func (m *FinalityProviderSigningInfo) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderSigningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderSigningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderSigningInfo proto.InternalMessageInfo

func (m *FinalityProviderSigningInfo) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *FinalityProviderSigningInfo) GetMissedBlocksCounter() int64 {
	if m != nil {
		return m.MissedBlocksCounter
	}
	return 0
}

func (m *FinalityProviderSigningInfo) GetJailedUntil() time.Time {
	if m != nil {
		return m.JailedUntil
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*VotingPowerDistCache)(nil), "babylon.finality.v1.VotingPowerDistCache")
	proto.RegisterType((*FinalityProviderDistInfo)(nil), "babylon.finality.v1.FinalityProviderDistInfo")
	proto.RegisterType((*IndexedBlock)(nil), "babylon.finality.v1.IndexedBlock")
	proto.RegisterType((*PubRandCommit)(nil), "babylon.finality.v1.PubRandCommit")
	proto.RegisterType((*PubRandCommitIndexValue)(nil), "babylon.finality.v1.PubRandCommitIndexValue")
	proto.RegisterType((*Evidence)(nil), "babylon.finality.v1.Evidence")
	proto.RegisterType((*FinalityProviderSigningInfo)(nil), "babylon.finality.v1.FinalityProviderSigningInfo")
}

func init() {
	proto.RegisterFile("babylon/finality/v1/finality.proto", fileDescriptor_ca5b87e52e3e6d02)
}

var fileDescriptor_ca5b87e52e3e6d02 = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0x6f, 0xb2, 0x9b, 0x64, 0x92, 0x2c, 0xdd, 0xe9, 0x52, 0xdc, 0x5d, 0x48, 0xd2, 0x08,
	0xa4, 0x08, 0x75, 0x6d, 0xba, 0x0b, 0x42, 0x05, 0x71, 0x68, 0x76, 0x5b, 0x75, 0xa1, 0xd0, 0xc8,
	0x29, 0x05, 0x21, 0xa4, 0xd1, 0xd8, 0x9e, 0xd8, 0x43, 0xec, 0x19, 0xcb, 0x33, 0x0e, 0x0d, 0xbf,
	0x80, 0x63, 0xe1, 0xca, 0x85, 0x23, 0x47, 0x0e, 0xfc, 0x88, 0x9e, 0x50, 0xc5, 0x09, 0xed, 0x21,
	0xa0, 0xdd, 0x03, 0x7f, 0x03, 0x79, 0x3c, 0x49, 0x36, 0x15, 0x48, 0x80, 0xca, 0xc5, 0x9a, 0xf7,
	0xbd, 0xe7, 0xf7, 0xde, 0x7c, 0xef, 0xf3, 0x33, 0xe8, 0xba, 0xd8, 0x9d, 0x46, 0x9c, 0xd9, 0x23,
	0xca, 0x70, 0x44, 0xe5, 0xd4, 0x9e, 0xdc, 0x58, 0x9c, 0xad, 0x24, 0xe5, 0x92, 0xc3, 0xcb, 0x3a,
	0xc6, 0x5a, 0xe0, 0x93, 0x1b, 0xbb, 0x57, 0x3d, 0x2e, 0x62, 0x2e, 0x90, 0x0a, 0xb1, 0x0b, 0xa3,
	0x88, 0xdf, 0xdd, 0x09, 0x78, 0xc0, 0x0b, 0x3c, 0x3f, 0x69, 0x74, 0x1b, 0xc7, 0x94, 0x71, 0x5b,
	0x3d, 0x35, 0xd4, 0x0e, 0x38, 0x0f, 0x22, 0x62, 0x2b, 0xcb, 0xcd, 0x46, 0xb6, 0xa4, 0x31, 0x11,
	0x12, 0xc7, 0x49, 0x11, 0xd0, 0xfd, 0xd9, 0x00, 0x3b, 0x0f, 0xb9, 0xa4, 0x2c, 0x18, 0xf0, 0x2f,
	0x49, 0x7a, 0x4c, 0x85, 0x3c, 0xc2, 0x5e, 0x48, 0xe0, 0x75, 0x00, 0x25, 0x97, 0x38, 0x42, 0x13,
	0xe5, 0x45, 0x49, 0xee, 0x36, 0x8d, 0x8e, 0xd1, 0x2b, 0x3b, 0x97, 0x94, 0xe7, 0xc2, 0x6b, 0xf0,
	0x73, 0x00, 0xe7, 0xad, 0xe7, 0xfd, 0x4e, 0xa8, 0x4f, 0x52, 0x61, 0xae, 0x77, 0x4a, 0xbd, 0xfa,
	0xc1, 0xbe, 0xf5, 0x17, 0xb7, 0xb3, 0xee, 0xe8, 0xf3, 0x40, 0x47, 0xe7, 0x95, 0x4f, 0xd8, 0x88,
	0x3b, 0xdb, 0xa3, 0x67, 0x3c, 0x02, 0xbe, 0x0a, 0xb6, 0x58, 0x16, 0x23, 0xec, 0x49, 0x3a, 0x21,
	0x68, 0x94, 0x08, 0xb3, 0xd4, 0x31, 0x7a, 0x4d, 0xa7, 0xc1, 0xb2, 0xf8, 0x96, 0x02, 0xef, 0x24,
	0xe2, 0x9d, 0xf2, 0xd7, 0xdf, 0xb7, 0xd7, 0xba, 0xb3, 0x75, 0x60, 0xfe, 0x5d, 0x6e, 0xe8, 0x80,
	0x4d, 0x57, 0x7a, 0x28, 0x19, 0xab, 0x8b, 0x34, 0xfa, 0xef, 0x9e, 0xce, 0xda, 0x6f, 0x07, 0x54,
	0x86, 0x99, 0x6b, 0x79, 0x3c, 0xb6, 0x75, 0xa3, 0x11, 0x76, 0xc5, 0x3e, 0xe5, 0x73, 0xd3, 0x9e,
	0x1c, 0xda, 0x72, 0x9a, 0x10, 0x61, 0xf5, 0x4f, 0x06, 0x87, 0x6f, 0xbe, 0x31, 0xc8, 0xdc, 0x0f,
	0xc8, 0xd4, 0xd9, 0x70, 0xa5, 0x37, 0x18, 0x43, 0x08, 0xca, 0xd8, 0xf7, 0x53, 0x73, 0x3d, 0xcf,
	0xe8, 0xa8, 0x33, 0xfc, 0x10, 0x00, 0x8f, 0xc7, 0x31, 0x15, 0x82, 0x72, 0xa6, 0x9a, 0xad, 0xf5,
	0xf7, 0x4f, 0x67, 0xed, 0xbd, 0x62, 0x8a, 0xc2, 0x1f, 0x5b, 0x94, 0xdb, 0x31, 0x96, 0xa1, 0x75,
	0x8f, 0x04, 0xd8, 0x9b, 0x1e, 0x13, 0xef, 0x97, 0x9f, 0xf6, 0x81, 0x1e, 0xf2, 0x31, 0xf1, 0x9c,
	0x0b, 0x09, 0x60, 0x0f, 0x14, 0x8c, 0x23, 0x97, 0x33, 0x9f, 0xf8, 0x48, 0x60, 0x69, 0x96, 0xd5,
	0x24, 0xb6, 0x14, 0xde, 0x57, 0xf0, 0x10, 0x4b, 0xf8, 0x1a, 0xd8, 0xa2, 0x02, 0x2d, 0x86, 0x4c,
	0x7c, 0x73, 0xa3, 0x63, 0xf4, 0xaa, 0x4e, 0x93, 0x8a, 0x07, 0x4b, 0x10, 0xee, 0x81, 0x1a, 0x15,
	0xe8, 0x0b, 0x4c, 0x23, 0xe2, 0x9b, 0x9b, 0x2a, 0xa2, 0x4a, 0xc5, 0xfb, 0xca, 0x86, 0xaf, 0x00,
	0x40, 0x05, 0x12, 0x11, 0x16, 0x21, 0xf1, 0xcd, 0x8a, 0xf2, 0xd6, 0xa8, 0x18, 0x16, 0x40, 0x17,
	0x81, 0xc6, 0x09, 0xf3, 0xc9, 0x23, 0xe2, 0xf7, 0x23, 0xee, 0x8d, 0xe1, 0x15, 0xb0, 0x19, 0x12,
	0x1a, 0x84, 0x52, 0x8b, 0x43, 0x5b, 0xf0, 0x2a, 0xa8, 0xe2, 0x24, 0x41, 0x21, 0x16, 0xa1, 0xe6,
	0xa6, 0x82, 0x93, 0xe4, 0x2e, 0x16, 0x21, 0x7c, 0x19, 0xd4, 0x8a, 0x21, 0x7f, 0x45, 0x7c, 0xc5,
	0x4e, 0xd5, 0x59, 0x02, 0xdd, 0x6f, 0x0c, 0xd0, 0x1c, 0x64, 0xae, 0x83, 0x99, 0x7f, 0x94, 0x73,
	0x20, 0xe1, 0x35, 0xd0, 0x10, 0x12, 0xa7, 0x12, 0xad, 0x14, 0xaa, 0x2b, 0xec, 0x6e, 0x51, 0xad,
	0x03, 0x72, 0x31, 0xa0, 0x24, 0x73, 0x51, 0x8a, 0x99, 0xaf, 0x2a, 0x96, 0x1d, 0xc0, 0xb2, 0x58,
	0xa7, 0x82, 0x2d, 0x3d, 0x13, 0x19, 0x13, 0x26, 0x55, 0xd5, 0x86, 0x73, 0x01, 0xc9, 0x39, 0x21,
	0x09, 0xf7, 0x42, 0xc4, 0xb2, 0x58, 0xb3, 0x5b, 0x55, 0xc0, 0x47, 0x59, 0xdc, 0xbd, 0x09, 0x5e,
	0x5a, 0x69, 0x49, 0x31, 0xf0, 0x10, 0x47, 0x19, 0x81, 0x26, 0xa8, 0x14, 0x6d, 0x09, 0xd3, 0xe8,
	0x94, 0x7a, 0x65, 0x67, 0x6e, 0x6a, 0x41, 0x7e, 0x5b, 0x06, 0xd5, 0xdb, 0xb9, 0x0c, 0x99, 0x47,
	0xe0, 0x27, 0xa0, 0x36, 0x4a, 0xd0, 0xf3, 0xd3, 0x60, 0x65, 0x94, 0xf4, 0x95, 0x0a, 0xaf, 0x81,
	0x86, 0x9b, 0x8f, 0x63, 0x4e, 0x51, 0x71, 0xff, 0xba, 0xc2, 0x34, 0x45, 0x9f, 0x82, 0xea, 0x82,
	0x1e, 0x75, 0xfd, 0xfe, 0x7b, 0xa7, 0xb3, 0xf6, 0xcd, 0x7f, 0x51, 0x7a, 0xe8, 0x85, 0x8c, 0xa7,
	0xa9, 0x66, 0xc2, 0xa9, 0x24, 0x9a, 0xda, 0xeb, 0x00, 0x7a, 0x98, 0x71, 0x46, 0x3d, 0x1c, 0xa1,
	0xc5, 0xd0, 0xcb, 0x8a, 0xe2, 0x4b, 0x0b, 0xcf, 0x2d, 0x3d, 0xfd, 0x2e, 0x68, 0x8e, 0x78, 0x3a,
	0x5e, 0x06, 0x6e, 0xa8, 0xc0, 0x7a, 0x0e, 0xce, 0x63, 0x04, 0xb8, 0xb2, 0xcc, 0xb8, 0xd8, 0x2c,
	0x82, 0x06, 0x4a, 0xad, 0xff, 0xb9, 0xf3, 0xdb, 0xf7, 0x1f, 0x0c, 0x87, 0x34, 0x70, 0x76, 0x16,
	0xc9, 0xe7, 0xab, 0x62, 0x48, 0x03, 0x48, 0xc1, 0xb6, 0x6a, 0x6c, 0xa5, 0x5e, 0xe5, 0x79, 0xd4,
	0x7b, 0x21, 0xcf, 0x7b, 0xa1, 0x54, 0xf7, 0xbb, 0x75, 0xb0, 0xf7, 0xec, 0x96, 0x1a, 0xd2, 0x80,
	0x51, 0x16, 0xa8, 0x45, 0xf5, 0x7f, 0xea, 0x64, 0xe5, 0x53, 0xca, 0x75, 0x52, 0x5a, 0xfd, 0x94,
	0x0e, 0xc0, 0x8b, 0xf9, 0xe2, 0x21, 0x3e, 0x52, 0xea, 0x11, 0xc8, 0xe3, 0x19, 0x93, 0x24, 0x55,
	0xa2, 0x29, 0x39, 0x97, 0x0b, 0xa7, 0xfa, 0xf8, 0xc5, 0x51, 0xe1, 0x82, 0xf7, 0x40, 0xa3, 0xd8,
	0x26, 0x28, 0x63, 0x92, 0x46, 0x6a, 0xf6, 0xf5, 0x83, 0x5d, 0xab, 0xf8, 0xfd, 0x58, 0xf3, 0xdf,
	0x8f, 0xb5, 0x58, 0x42, 0xfd, 0xe6, 0x93, 0x59, 0x7b, 0xed, 0xf1, 0x6f, 0x6d, 0xe3, 0x87, 0x3f,
	0x7e, 0x7c, 0xdd, 0x70, 0xea, 0xc5, 0xeb, 0x1f, 0xe7, 0x6f, 0xf7, 0xef, 0x3f, 0x39, 0x6b, 0x19,
	0x4f, 0xcf, 0x5a, 0xc6, 0xef, 0x67, 0x2d, 0xe3, 0xf1, 0x79, 0x6b, 0xed, 0xe9, 0x79, 0x6b, 0xed,
	0xd7, 0xf3, 0xd6, 0xda, 0x67, 0x6f, 0xfd, 0x23, 0x02, 0x1e, 0x2d, 0xff, 0xb5, 0x8a, 0x0b, 0x77,
	0x53, 0x35, 0x70, 0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x7e, 0xe9, 0x14, 0x8c, 0x07,
	0x00, 0x00,
}

func (m *VotingPowerDistCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingPowerDistCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingPowerDistCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumActiveFps != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.NumActiveFps))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FinalityProviders) > 0 {
		for iNdEx := len(m.FinalityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFinality(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalVotingPower != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.TotalVotingPower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderDistInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderDistInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderDistInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSlashed {
		i--
		if m.IsSlashed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsJailed {
		i--
		if m.IsJailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsTimestamped {
		i--
		if m.IsTimestamped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.TotalBondedSat != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.TotalBondedSat))
		i--
		dAtA[i] = 0x20
	}
	if m.Commission != nil {
		{
			size := m.Commission.Size()
			i -= size
			if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintFinality(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexedBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintFinality(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubRandCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubRandCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubRandCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNum != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintFinality(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NumPubRand != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.NumPubRand))
		i--
		dAtA[i] = 0x10
	}
	if m.StartHeight != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubRandCommitIndexValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubRandCommitIndexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubRandCommitIndexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Heights) > 0 {
		dAtA2 := make([]byte, len(m.Heights)*10)
		var j1 int
		for _, num := range m.Heights {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintFinality(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Evidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Evidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Evidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForkFinalitySig != nil {
		{
			size := m.ForkFinalitySig.Size()
			i -= size
			if _, err := m.ForkFinalitySig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CanonicalFinalitySig != nil {
		{
			size := m.CanonicalFinalitySig.Size()
			i -= size
			if _, err := m.CanonicalFinalitySig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ForkAppHash) > 0 {
		i -= len(m.ForkAppHash)
		copy(dAtA[i:], m.ForkAppHash)
		i = encodeVarintFinality(dAtA, i, uint64(len(m.ForkAppHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CanonicalAppHash) > 0 {
		i -= len(m.CanonicalAppHash)
		copy(dAtA[i:], m.CanonicalAppHash)
		i = encodeVarintFinality(dAtA, i, uint64(len(m.CanonicalAppHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.PubRand != nil {
		{
			size := m.PubRand.Size()
			i -= size
			if _, err := m.PubRand.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderSigningInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderSigningInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderSigningInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.JailedUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JailedUntil):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintFinality(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if m.MissedBlocksCounter != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.MissedBlocksCounter))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFinality(dAtA []byte, offset int, v uint64) int {
	offset -= sovFinality(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VotingPowerDistCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalVotingPower != 0 {
		n += 1 + sovFinality(uint64(m.TotalVotingPower))
	}
	if len(m.FinalityProviders) > 0 {
		for _, e := range m.FinalityProviders {
			l = e.Size()
			n += 1 + l + sovFinality(uint64(l))
		}
	}
	if m.NumActiveFps != 0 {
		n += 1 + sovFinality(uint64(m.NumActiveFps))
	}
	return n
}

func (m *FinalityProviderDistInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.TotalBondedSat != 0 {
		n += 1 + sovFinality(uint64(m.TotalBondedSat))
	}
	if m.IsTimestamped {
		n += 2
	}
	if m.IsJailed {
		n += 2
	}
	if m.IsSlashed {
		n += 2
	}
	return n
}

func (m *IndexedBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovFinality(uint64(m.Height))
	}
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	return n
}

func (m *PubRandCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovFinality(uint64(m.StartHeight))
	}
	if m.NumPubRand != 0 {
		n += 1 + sovFinality(uint64(m.NumPubRand))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.EpochNum != 0 {
		n += 1 + sovFinality(uint64(m.EpochNum))
	}
	return n
}

func (m *PubRandCommitIndexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Heights) > 0 {
		l = 0
		for _, e := range m.Heights {
			l += sovFinality(uint64(e))
		}
		n += 1 + sovFinality(uint64(l)) + l
	}
	return n
}

func (m *Evidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFinality(uint64(m.BlockHeight))
	}
	if m.PubRand != nil {
		l = m.PubRand.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	l = len(m.CanonicalAppHash)
	if l > 0 {
		n += 1 + l + sovFinality(uint64(l))
	}
	l = len(m.ForkAppHash)
	if l > 0 {
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.CanonicalFinalitySig != nil {
		l = m.CanonicalFinalitySig.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.ForkFinalitySig != nil {
		l = m.ForkFinalitySig.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	return n
}

func (m *FinalityProviderSigningInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovFinality(uint64(m.StartHeight))
	}
	if m.MissedBlocksCounter != 0 {
		n += 1 + sovFinality(uint64(m.MissedBlocksCounter))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JailedUntil)
	n += 1 + l + sovFinality(uint64(l))
	return n
}

func sovFinality(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFinality(x uint64) (n int) {
	return sovFinality(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VotingPowerDistCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingPowerDistCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingPowerDistCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			m.TotalVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviders = append(m.FinalityProviders, &FinalityProviderDistInfo{})
			if err := m.FinalityProviders[len(m.FinalityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumActiveFps", wireType)
			}
			m.NumActiveFps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumActiveFps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderDistInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderDistInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderDistInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Commission = &v
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondedSat", wireType)
			}
			m.TotalBondedSat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBondedSat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTimestamped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTimestamped = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsJailed = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSlashed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSlashed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = append(m.AppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AppHash == nil {
				m.AppHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubRandCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubRandCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubRandCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPubRand", wireType)
			}
			m.NumPubRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPubRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubRandCommitIndexValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubRandCommitIndexValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubRandCommitIndexValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFinality
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heights = append(m.Heights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFinality
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFinality
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFinality
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Heights) == 0 {
					m.Heights = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFinality
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heights = append(m.Heights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Evidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Evidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Evidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubRand", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.SchnorrPubRand
			m.PubRand = &v
			if err := m.PubRand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanonicalAppHash = append(m.CanonicalAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CanonicalAppHash == nil {
				m.CanonicalAppHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForkAppHash = append(m.ForkAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ForkAppHash == nil {
				m.ForkAppHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalFinalitySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.SchnorrEOTSSig
			m.CanonicalFinalitySig = &v
			if err := m.CanonicalFinalitySig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkFinalitySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.SchnorrEOTSSig
			m.ForkFinalitySig = &v
			if err := m.ForkFinalitySig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderSigningInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderSigningInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderSigningInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocksCounter", wireType)
			}
			m.MissedBlocksCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedBlocksCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.JailedUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFinality(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFinality
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFinality
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFinality
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFinality        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFinality          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFinality = fmt.Errorf("proto: unexpected end of group")
)
