// Code generated by MockGen. DO NOT EDIT.
// Source: x/finality/types/hooks.go

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	types "github.com/babylonlabs-io/babylon/v4/x/btcstaking/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFinalityHooks is a mock of FinalityHooks interface.
type MockFinalityHooks struct {
	ctrl     *gomock.Controller
	recorder *MockFinalityHooksMockRecorder
}

// MockFinalityHooksMockRecorder is the mock recorder for MockFinalityHooks.
type MockFinalityHooksMockRecorder struct {
	mock *MockFinalityHooks
}

// NewMockFinalityHooks creates a new mock instance.
func NewMockFinalityHooks(ctrl *gomock.Controller) *MockFinalityHooks {
	mock := &MockFinalityHooks{ctrl: ctrl}
	mock.recorder = &MockFinalityHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalityHooks) EXPECT() *MockFinalityHooksMockRecorder {
	return m.recorder
}

// AfterBtcDelegationActivated mocks base method.
func (m *MockFinalityHooks) AfterBtcDelegationActivated(ctx context.Context, fpAddr, btcDelAddr types0.AccAddress, fpSecuresBabylon bool, sats uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBtcDelegationActivated", ctx, fpAddr, btcDelAddr, fpSecuresBabylon, sats)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBtcDelegationActivated indicates an expected call of AfterBtcDelegationActivated.
func (mr *MockFinalityHooksMockRecorder) AfterBtcDelegationActivated(ctx, fpAddr, btcDelAddr, fpSecuresBabylon, sats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBtcDelegationActivated", reflect.TypeOf((*MockFinalityHooks)(nil).AfterBtcDelegationActivated), ctx, fpAddr, btcDelAddr, fpSecuresBabylon, sats)
}

// AfterBtcDelegationUnbonded mocks base method.
func (m *MockFinalityHooks) AfterBtcDelegationUnbonded(ctx context.Context, fpAddr, btcDelAddr types0.AccAddress, fpSecuresBabylon bool, sats uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBtcDelegationUnbonded", ctx, fpAddr, btcDelAddr, fpSecuresBabylon, sats)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBtcDelegationUnbonded indicates an expected call of AfterBtcDelegationUnbonded.
func (mr *MockFinalityHooksMockRecorder) AfterBtcDelegationUnbonded(ctx, fpAddr, btcDelAddr, fpSecuresBabylon, sats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBtcDelegationUnbonded", reflect.TypeOf((*MockFinalityHooks)(nil).AfterBtcDelegationUnbonded), ctx, fpAddr, btcDelAddr, fpSecuresBabylon, sats)
}

// AfterFpStatusChange mocks base method.
func (m *MockFinalityHooks) AfterFpStatusChange(ctx context.Context, fpAddr types0.AccAddress, fpSecuresBabylon bool, newStatus types.FinalityProviderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterFpStatusChange", ctx, fpAddr, fpSecuresBabylon, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterFpStatusChange indicates an expected call of AfterFpStatusChange.
func (mr *MockFinalityHooksMockRecorder) AfterFpStatusChange(ctx, fpAddr, fpSecuresBabylon, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterFpStatusChange", reflect.TypeOf((*MockFinalityHooks)(nil).AfterFpStatusChange), ctx, fpAddr, fpSecuresBabylon, newStatus)
}
