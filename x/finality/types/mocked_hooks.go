// Code generated by MockGen. DO NOT EDIT.
// Source: x/finality/types/hooks.go

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFinalityHooks is a mock of FinalityHooks interface.
type MockFinalityHooks struct {
	ctrl     *gomock.Controller
	recorder *MockFinalityHooksMockRecorder
}

// MockFinalityHooksMockRecorder is the mock recorder for MockFinalityHooks.
type MockFinalityHooksMockRecorder struct {
	mock *MockFinalityHooks
}

// NewMockFinalityHooks creates a new mock instance.
func NewMockFinalityHooks(ctrl *gomock.Controller) *MockFinalityHooks {
	mock := &MockFinalityHooks{ctrl: ctrl}
	mock.recorder = &MockFinalityHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalityHooks) EXPECT() *MockFinalityHooksMockRecorder {
	return m.recorder
}

// AfterBbnFpEntersActiveSet mocks base method.
func (m *MockFinalityHooks) AfterBbnFpEntersActiveSet(ctx context.Context, fpAddr types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBbnFpEntersActiveSet", ctx, fpAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBbnFpEntersActiveSet indicates an expected call of AfterBbnFpEntersActiveSet.
func (mr *MockFinalityHooksMockRecorder) AfterBbnFpEntersActiveSet(ctx, fpAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBbnFpEntersActiveSet", reflect.TypeOf((*MockFinalityHooks)(nil).AfterBbnFpEntersActiveSet), ctx, fpAddr)
}

// AfterBbnFpRemovedFromActiveSet mocks base method.
func (m *MockFinalityHooks) AfterBbnFpRemovedFromActiveSet(ctx context.Context, fpAddr types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBbnFpRemovedFromActiveSet", ctx, fpAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBbnFpRemovedFromActiveSet indicates an expected call of AfterBbnFpRemovedFromActiveSet.
func (mr *MockFinalityHooksMockRecorder) AfterBbnFpRemovedFromActiveSet(ctx, fpAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBbnFpRemovedFromActiveSet", reflect.TypeOf((*MockFinalityHooks)(nil).AfterBbnFpRemovedFromActiveSet), ctx, fpAddr)
}

// AfterBtcDelegationActivated mocks base method.
func (m *MockFinalityHooks) AfterBtcDelegationActivated(ctx context.Context, fpAddr, btcDelAddr types.AccAddress, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet bool, sats uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBtcDelegationActivated", ctx, fpAddr, btcDelAddr, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet, sats)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBtcDelegationActivated indicates an expected call of AfterBtcDelegationActivated.
func (mr *MockFinalityHooksMockRecorder) AfterBtcDelegationActivated(ctx, fpAddr, btcDelAddr, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet, sats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBtcDelegationActivated", reflect.TypeOf((*MockFinalityHooks)(nil).AfterBtcDelegationActivated), ctx, fpAddr, btcDelAddr, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet, sats)
}

// AfterBtcDelegationUnbonded mocks base method.
func (m *MockFinalityHooks) AfterBtcDelegationUnbonded(ctx context.Context, fpAddr, btcDelAddr types.AccAddress, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet bool, sats uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBtcDelegationUnbonded", ctx, fpAddr, btcDelAddr, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet, sats)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBtcDelegationUnbonded indicates an expected call of AfterBtcDelegationUnbonded.
func (mr *MockFinalityHooksMockRecorder) AfterBtcDelegationUnbonded(ctx, fpAddr, btcDelAddr, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet, sats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBtcDelegationUnbonded", reflect.TypeOf((*MockFinalityHooks)(nil).AfterBtcDelegationUnbonded), ctx, fpAddr, btcDelAddr, fpSecuresBabylon, isFpActiveInPrevSet, isFpActiveInCurrSet, sats)
}
