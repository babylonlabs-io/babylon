// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/finality/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_babylonlabs_io_babylon_v3_types "github.com/babylonlabs-io/babylon/v3/types"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCommitPubRandList defines a message for committing a list of public randomness for EOTS
type MsgCommitPubRandList struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// fp_btc_pk is the BTC PK of the finality provider that commits the public randomness
	FpBtcPk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,2,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
	// start_height is the start block height of the list of public randomness
	StartHeight uint64 `protobuf:"varint,3,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// num_pub_rand is the number of public randomness committed
	NumPubRand uint64 `protobuf:"varint,4,opt,name=num_pub_rand,json=numPubRand,proto3" json:"num_pub_rand,omitempty"`
	// commitment is the commitment of these public randomness
	// currently it's the root of the Merkle tree that includes these public randomness
	Commitment []byte `protobuf:"bytes,5,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// sig is the signature on (start_height || num_pub_rand || commitment) signed by
	// SK corresponding to fp_btc_pk. This prevents others to commit public
	// randomness on behalf of fp_btc_pk
	// TODO: another option is to restrict signer to correspond to fp_btc_pk. This restricts
	// the tx submitter to be the holder of fp_btc_pk. Decide this later
	Sig *github_com_babylonlabs_io_babylon_v3_types.BIP340Signature `protobuf:"bytes,6,opt,name=sig,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340Signature" json:"sig,omitempty"`
}

func (m *MsgCommitPubRandList) Reset()         { *m = MsgCommitPubRandList{} }
func (m *MsgCommitPubRandList) String() string { return proto.CompactTextString(m) }
func (*MsgCommitPubRandList) ProtoMessage()    {}
func (*MsgCommitPubRandList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{0}
}
func (m *MsgCommitPubRandList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitPubRandList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitPubRandList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitPubRandList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitPubRandList.Merge(m, src)
}
func (m *MsgCommitPubRandList) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitPubRandList) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitPubRandList.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitPubRandList proto.InternalMessageInfo

func (m *MsgCommitPubRandList) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCommitPubRandList) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *MsgCommitPubRandList) GetNumPubRand() uint64 {
	if m != nil {
		return m.NumPubRand
	}
	return 0
}

func (m *MsgCommitPubRandList) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

// MsgCommitPubRandListResponse is the response to the MsgCommitPubRandList message
type MsgCommitPubRandListResponse struct {
}

func (m *MsgCommitPubRandListResponse) Reset()         { *m = MsgCommitPubRandListResponse{} }
func (m *MsgCommitPubRandListResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitPubRandListResponse) ProtoMessage()    {}
func (*MsgCommitPubRandListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{1}
}
func (m *MsgCommitPubRandListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitPubRandListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitPubRandListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitPubRandListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitPubRandListResponse.Merge(m, src)
}
func (m *MsgCommitPubRandListResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitPubRandListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitPubRandListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitPubRandListResponse proto.InternalMessageInfo

// MsgAddFinalitySig defines a message for adding a finality vote
type MsgAddFinalitySig struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// fp_btc_pk is the BTC PK of the finality provider that casts this vote
	FpBtcPk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,2,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
	// block_height is the height of the voted block
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// pub_rand is the public randomness committed at this height
	PubRand *github_com_babylonlabs_io_babylon_v3_types.SchnorrPubRand `protobuf:"bytes,4,opt,name=pub_rand,json=pubRand,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.SchnorrPubRand" json:"pub_rand,omitempty"`
	// proof is the proof that the given public randomness is committed under the commitment
	Proof *crypto.Proof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	// block_app_hash is the AppHash of the voted block
	BlockAppHash []byte `protobuf:"bytes,6,opt,name=block_app_hash,json=blockAppHash,proto3" json:"block_app_hash,omitempty"`
	// finality_sig is the finality signature to this block
	// where finality signature is an EOTS signature, i.e.,
	// the `s` in a Schnorr signature `(r, s)`
	// `r` is the public randomness that is already committed by the finality provider
	FinalitySig *github_com_babylonlabs_io_babylon_v3_types.SchnorrEOTSSig `protobuf:"bytes,7,opt,name=finality_sig,json=finalitySig,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.SchnorrEOTSSig" json:"finality_sig,omitempty"`
}

func (m *MsgAddFinalitySig) Reset()         { *m = MsgAddFinalitySig{} }
func (m *MsgAddFinalitySig) String() string { return proto.CompactTextString(m) }
func (*MsgAddFinalitySig) ProtoMessage()    {}
func (*MsgAddFinalitySig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{2}
}
func (m *MsgAddFinalitySig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFinalitySig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFinalitySig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFinalitySig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFinalitySig.Merge(m, src)
}
func (m *MsgAddFinalitySig) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFinalitySig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFinalitySig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFinalitySig proto.InternalMessageInfo

func (m *MsgAddFinalitySig) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddFinalitySig) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgAddFinalitySig) GetProof() *crypto.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddFinalitySig) GetBlockAppHash() []byte {
	if m != nil {
		return m.BlockAppHash
	}
	return nil
}

// MsgAddFinalitySigResponse is the response to the MsgAddFinalitySig message
type MsgAddFinalitySigResponse struct {
}

func (m *MsgAddFinalitySigResponse) Reset()         { *m = MsgAddFinalitySigResponse{} }
func (m *MsgAddFinalitySigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddFinalitySigResponse) ProtoMessage()    {}
func (*MsgAddFinalitySigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{3}
}
func (m *MsgAddFinalitySigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFinalitySigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFinalitySigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFinalitySigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFinalitySigResponse.Merge(m, src)
}
func (m *MsgAddFinalitySigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFinalitySigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFinalitySigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFinalitySigResponse proto.InternalMessageInfo

// MsgUpdateParams defines a message for updating finality module parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	// just FYI: cosmos.AddressString marks that this field should use type alias
	// for AddressString instead of string, but the functionality is not yet implemented
	// in cosmos-proto
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the finality parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{4}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{5}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgUnjailFinalityProvider defines the Msg/UnjailFinalityProvider request type
type MsgUnjailFinalityProvider struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// fp_btc_pk is the BTC PK of the finality provider that commits the public randomness
	FpBtcPk *github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey `protobuf:"bytes,2,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v3/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
}

func (m *MsgUnjailFinalityProvider) Reset()         { *m = MsgUnjailFinalityProvider{} }
func (m *MsgUnjailFinalityProvider) String() string { return proto.CompactTextString(m) }
func (*MsgUnjailFinalityProvider) ProtoMessage()    {}
func (*MsgUnjailFinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{6}
}
func (m *MsgUnjailFinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjailFinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjailFinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjailFinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjailFinalityProvider.Merge(m, src)
}
func (m *MsgUnjailFinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjailFinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjailFinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjailFinalityProvider proto.InternalMessageInfo

// MsgUnjailFinalityProviderResponse defines the Msg/UnjailFinalityProvider response type
type MsgUnjailFinalityProviderResponse struct {
}

func (m *MsgUnjailFinalityProviderResponse) Reset()         { *m = MsgUnjailFinalityProviderResponse{} }
func (m *MsgUnjailFinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnjailFinalityProviderResponse) ProtoMessage()    {}
func (*MsgUnjailFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{7}
}
func (m *MsgUnjailFinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjailFinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjailFinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjailFinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjailFinalityProviderResponse.Merge(m, src)
}
func (m *MsgUnjailFinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjailFinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjailFinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjailFinalityProviderResponse proto.InternalMessageInfo

// MsgEquivocationEvidence is the message for handling evidence of equivocation
type MsgEquivocationEvidence struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// fp_btc_pk_hex is the BTC PK of the finality provider that casts this vote
	FpBtcPkHex string `protobuf:"bytes,2,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
	// block_height is the height of the conflicting blocks
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// pub_rand_hex is the public randomness the finality provider has committed to
	PubRandHex string `protobuf:"bytes,4,opt,name=pub_rand_hex,json=pubRandHex,proto3" json:"pub_rand_hex,omitempty"`
	// canonical_app_hash_hex is the AppHash of the canonical block
	CanonicalAppHashHex string `protobuf:"bytes,5,opt,name=canonical_app_hash_hex,json=canonicalAppHashHex,proto3" json:"canonical_app_hash_hex,omitempty"`
	// fork_app_hash_hex is the AppHash of the fork block
	ForkAppHashHex string `protobuf:"bytes,6,opt,name=fork_app_hash_hex,json=forkAppHashHex,proto3" json:"fork_app_hash_hex,omitempty"`
	// canonical_finality_sig_hex is the finality signature to the canonical block
	// where finality signature is an EOTS signature, i.e.,
	// the `s` in a Schnorr signature `(r, s)`
	// `r` is the public randomness that is already committed by the finality provider
	CanonicalFinalitySigHex string `protobuf:"bytes,7,opt,name=canonical_finality_sig_hex,json=canonicalFinalitySigHex,proto3" json:"canonical_finality_sig_hex,omitempty"`
	// fork_finality_sig_hex is the finality signature to the fork block
	// where finality signature is an EOTS signature
	ForkFinalitySigHex string `protobuf:"bytes,8,opt,name=fork_finality_sig_hex,json=forkFinalitySigHex,proto3" json:"fork_finality_sig_hex,omitempty"`
	// signing_context is the context in which the finality signatures were used.
	// It must be hex encoded 32 bytes, of the sha256 hash of the context string
	SigningContext string `protobuf:"bytes,9,opt,name=signing_context,json=signingContext,proto3" json:"signing_context,omitempty"`
}

func (m *MsgEquivocationEvidence) Reset()         { *m = MsgEquivocationEvidence{} }
func (m *MsgEquivocationEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgEquivocationEvidence) ProtoMessage()    {}
func (*MsgEquivocationEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{8}
}
func (m *MsgEquivocationEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEquivocationEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEquivocationEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEquivocationEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEquivocationEvidence.Merge(m, src)
}
func (m *MsgEquivocationEvidence) XXX_Size() int {
	return m.Size()
}
func (m *MsgEquivocationEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEquivocationEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEquivocationEvidence proto.InternalMessageInfo

func (m *MsgEquivocationEvidence) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgEquivocationEvidence) GetPubRandHex() string {
	if m != nil {
		return m.PubRandHex
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetCanonicalAppHashHex() string {
	if m != nil {
		return m.CanonicalAppHashHex
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetForkAppHashHex() string {
	if m != nil {
		return m.ForkAppHashHex
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetCanonicalFinalitySigHex() string {
	if m != nil {
		return m.CanonicalFinalitySigHex
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetForkFinalitySigHex() string {
	if m != nil {
		return m.ForkFinalitySigHex
	}
	return ""
}

func (m *MsgEquivocationEvidence) GetSigningContext() string {
	if m != nil {
		return m.SigningContext
	}
	return ""
}

// MsgEquivocationEvidenceResponse is the response for MsgEquivocationEvidence
type MsgEquivocationEvidenceResponse struct {
}

func (m *MsgEquivocationEvidenceResponse) Reset()         { *m = MsgEquivocationEvidenceResponse{} }
func (m *MsgEquivocationEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEquivocationEvidenceResponse) ProtoMessage()    {}
func (*MsgEquivocationEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{9}
}
func (m *MsgEquivocationEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEquivocationEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEquivocationEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEquivocationEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEquivocationEvidenceResponse.Merge(m, src)
}
func (m *MsgEquivocationEvidenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEquivocationEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEquivocationEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEquivocationEvidenceResponse proto.InternalMessageInfo

// MsgResumeFinalityProposal is a governance proposal to resume finality from halting
type MsgResumeFinalityProposal struct {
	// authority is the address of the governance account.
	// just FYI: cosmos.AddressString marks that this field should use type alias
	// for AddressString instead of string, but the functionality is not yet implemented
	// in cosmos-proto
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// fp_pks_hex is a list of finality provider public keys to jail
	// the public key follows encoding in BIP-340 spec
	FpPksHex []string `protobuf:"bytes,2,rep,name=fp_pks_hex,json=fpPksHex,proto3" json:"fp_pks_hex,omitempty"`
	// halting_height is the height where the finality halting begins
	HaltingHeight uint32 `protobuf:"varint,3,opt,name=halting_height,json=haltingHeight,proto3" json:"halting_height,omitempty"`
}

func (m *MsgResumeFinalityProposal) Reset()         { *m = MsgResumeFinalityProposal{} }
func (m *MsgResumeFinalityProposal) String() string { return proto.CompactTextString(m) }
func (*MsgResumeFinalityProposal) ProtoMessage()    {}
func (*MsgResumeFinalityProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{10}
}
func (m *MsgResumeFinalityProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResumeFinalityProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResumeFinalityProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResumeFinalityProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResumeFinalityProposal.Merge(m, src)
}
func (m *MsgResumeFinalityProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgResumeFinalityProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResumeFinalityProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResumeFinalityProposal proto.InternalMessageInfo

func (m *MsgResumeFinalityProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgResumeFinalityProposal) GetFpPksHex() []string {
	if m != nil {
		return m.FpPksHex
	}
	return nil
}

func (m *MsgResumeFinalityProposal) GetHaltingHeight() uint32 {
	if m != nil {
		return m.HaltingHeight
	}
	return 0
}

// MsgResumeFinalityProposalResponse is the response to the MsgResumeFinalityProposal message.
type MsgResumeFinalityProposalResponse struct {
}

func (m *MsgResumeFinalityProposalResponse) Reset()         { *m = MsgResumeFinalityProposalResponse{} }
func (m *MsgResumeFinalityProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResumeFinalityProposalResponse) ProtoMessage()    {}
func (*MsgResumeFinalityProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dd6da066b6baf1d, []int{11}
}
func (m *MsgResumeFinalityProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResumeFinalityProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResumeFinalityProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResumeFinalityProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResumeFinalityProposalResponse.Merge(m, src)
}
func (m *MsgResumeFinalityProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResumeFinalityProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResumeFinalityProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResumeFinalityProposalResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCommitPubRandList)(nil), "babylon.finality.v1.MsgCommitPubRandList")
	proto.RegisterType((*MsgCommitPubRandListResponse)(nil), "babylon.finality.v1.MsgCommitPubRandListResponse")
	proto.RegisterType((*MsgAddFinalitySig)(nil), "babylon.finality.v1.MsgAddFinalitySig")
	proto.RegisterType((*MsgAddFinalitySigResponse)(nil), "babylon.finality.v1.MsgAddFinalitySigResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "babylon.finality.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "babylon.finality.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUnjailFinalityProvider)(nil), "babylon.finality.v1.MsgUnjailFinalityProvider")
	proto.RegisterType((*MsgUnjailFinalityProviderResponse)(nil), "babylon.finality.v1.MsgUnjailFinalityProviderResponse")
	proto.RegisterType((*MsgEquivocationEvidence)(nil), "babylon.finality.v1.MsgEquivocationEvidence")
	proto.RegisterType((*MsgEquivocationEvidenceResponse)(nil), "babylon.finality.v1.MsgEquivocationEvidenceResponse")
	proto.RegisterType((*MsgResumeFinalityProposal)(nil), "babylon.finality.v1.MsgResumeFinalityProposal")
	proto.RegisterType((*MsgResumeFinalityProposalResponse)(nil), "babylon.finality.v1.MsgResumeFinalityProposalResponse")
}

func init() { proto.RegisterFile("babylon/finality/v1/tx.proto", fileDescriptor_2dd6da066b6baf1d) }

var fileDescriptor_2dd6da066b6baf1d = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xd6, 0xf9, 0xe5, 0x17, 0x27, 0x51, 0xb6, 0x21, 0x71, 0xdc, 0x60, 0x3b, 0xa1, 0x40,
	0x5a, 0xd1, 0x35, 0x49, 0x4a, 0x51, 0x53, 0x81, 0x14, 0x57, 0x41, 0x41, 0x10, 0xd5, 0x5a, 0x53,
	0x81, 0xb8, 0x2c, 0xb3, 0xeb, 0xf5, 0xee, 0x60, 0xef, 0xcc, 0x74, 0x67, 0x1c, 0xc5, 0x9c, 0x2a,
	0x4e, 0x1c, 0x39, 0x70, 0x45, 0x70, 0xe4, 0xd8, 0x03, 0x7f, 0x03, 0xaa, 0xc4, 0x81, 0x8a, 0x13,
	0xca, 0x21, 0x42, 0xc9, 0xa1, 0xff, 0x06, 0xda, 0xd9, 0xf1, 0xaf, 0x64, 0x17, 0x25, 0x20, 0xc1,
	0xcd, 0x3b, 0xef, 0x7b, 0xef, 0x7d, 0xef, 0x7d, 0xef, 0xcd, 0x18, 0x56, 0x6d, 0x64, 0x77, 0xdb,
	0x94, 0x54, 0x9a, 0x98, 0xa0, 0x36, 0x16, 0xdd, 0xca, 0xe1, 0x66, 0x45, 0x1c, 0x19, 0x2c, 0xa4,
	0x82, 0xea, 0xd7, 0x95, 0xd5, 0xe8, 0x59, 0x8d, 0xc3, 0xcd, 0xc2, 0xa2, 0x47, 0x3d, 0x2a, 0xed,
	0x95, 0xe8, 0x57, 0x0c, 0x2d, 0xbc, 0x2a, 0x5c, 0xd2, 0x70, 0xc3, 0x00, 0x13, 0x51, 0x71, 0xc2,
	0x2e, 0x13, 0xb4, 0xc2, 0x42, 0x4a, 0x9b, 0xca, 0xbc, 0xe2, 0x50, 0x1e, 0x50, 0x6e, 0xc5, 0x7e,
	0xf1, 0x87, 0x32, 0x2d, 0xc7, 0x5f, 0x95, 0x80, 0x7b, 0x51, 0xf2, 0x80, 0x7b, 0xca, 0x50, 0x4e,
	0xe2, 0xc6, 0x50, 0x88, 0x02, 0xe5, 0xba, 0xfe, 0xeb, 0x35, 0x58, 0x3c, 0xe0, 0xde, 0x43, 0x1a,
	0x04, 0x58, 0xd4, 0x3a, 0xb6, 0x89, 0x48, 0xe3, 0x63, 0xcc, 0x85, 0xbe, 0x04, 0x93, 0x1c, 0x7b,
	0xc4, 0x0d, 0xf3, 0x5a, 0x59, 0xdb, 0xc8, 0x9a, 0xea, 0x4b, 0xff, 0x14, 0xb2, 0x4d, 0x66, 0xd9,
	0xc2, 0xb1, 0x58, 0x2b, 0x7f, 0xad, 0xac, 0x6d, 0xe4, 0xaa, 0x0f, 0x8e, 0x4f, 0x4a, 0xef, 0x7a,
	0x58, 0xf8, 0x1d, 0xdb, 0x70, 0x68, 0x50, 0x51, 0x49, 0xdb, 0xc8, 0xe6, 0x77, 0x30, 0xed, 0x7d,
	0x56, 0x0e, 0xb7, 0x2b, 0xa2, 0xcb, 0x5c, 0x6e, 0x54, 0x3f, 0xac, 0x6d, 0xdf, 0x7d, 0xbb, 0xd6,
	0xb1, 0x3f, 0x72, 0xbb, 0xe6, 0x54, 0x93, 0x55, 0x85, 0x53, 0x6b, 0xe9, 0x6b, 0x90, 0xe3, 0x02,
	0x85, 0xc2, 0xf2, 0x5d, 0xec, 0xf9, 0x22, 0x9f, 0x29, 0x6b, 0x1b, 0xe3, 0xe6, 0x8c, 0x3c, 0xdb,
	0x97, 0x47, 0x7a, 0x19, 0x72, 0xa4, 0x13, 0x58, 0xac, 0x63, 0x5b, 0x21, 0x22, 0x8d, 0xfc, 0xb8,
	0x84, 0x00, 0xe9, 0x04, 0x8a, 0xb9, 0x5e, 0x04, 0x70, 0x64, 0x29, 0x81, 0x4b, 0x44, 0x7e, 0x22,
	0xa2, 0x67, 0x0e, 0x9d, 0xe8, 0x35, 0xc8, 0x70, 0xec, 0xe5, 0x27, 0x25, 0xef, 0xf7, 0x8f, 0x4f,
	0x4a, 0x3b, 0x57, 0xe6, 0x5d, 0xc7, 0x1e, 0x41, 0xa2, 0x13, 0xba, 0x66, 0x14, 0x6a, 0x67, 0xe6,
	0xeb, 0x97, 0xcf, 0x6e, 0xab, 0xe6, 0xac, 0x17, 0x61, 0x35, 0xa9, 0x99, 0xa6, 0xcb, 0x19, 0x25,
	0xdc, 0x5d, 0xff, 0x25, 0x03, 0x0b, 0x07, 0xdc, 0xdb, 0x6d, 0x34, 0x3e, 0x50, 0x82, 0xd4, 0xb1,
	0xf7, 0xbf, 0xb4, 0xda, 0x6e, 0x53, 0xa7, 0x75, 0xae, 0xd5, 0xf2, 0x4c, 0xb5, 0xfa, 0x33, 0x98,
	0x1e, 0x69, 0x73, 0xae, 0xfa, 0xde, 0xf1, 0x49, 0xe9, 0xfe, 0x15, 0x52, 0xd7, 0x1d, 0x9f, 0xd0,
	0x30, 0x54, 0x6d, 0x30, 0xa7, 0x98, 0x92, 0xc8, 0x80, 0x09, 0x39, 0xd6, 0x52, 0x9d, 0x99, 0xad,
	0xbc, 0x31, 0x18, 0x7b, 0x23, 0x1e, 0x7b, 0xa3, 0x16, 0xd9, 0xcd, 0x18, 0xa6, 0xdf, 0x84, 0xb9,
	0x98, 0x2c, 0x62, 0xcc, 0xf2, 0x11, 0xf7, 0x63, 0xf5, 0xcc, 0xb8, 0x84, 0x5d, 0xc6, 0xf6, 0x11,
	0xf7, 0xf5, 0x2f, 0x20, 0xd7, 0x9b, 0x71, 0x2b, 0x52, 0x78, 0xea, 0xdf, 0x70, 0xde, 0x7b, 0xf4,
	0x49, 0xbd, 0x8e, 0x3d, 0x73, 0xa6, 0x39, 0x50, 0x69, 0x54, 0xe8, 0x1b, 0xb0, 0x72, 0x41, 0xc7,
	0xbe, 0xca, 0xdf, 0x69, 0x30, 0x7f, 0xc0, 0xbd, 0xc7, 0xac, 0x81, 0x84, 0x5b, 0x93, 0xdb, 0xa6,
	0xdf, 0x83, 0x2c, 0xea, 0x08, 0x9f, 0x86, 0x58, 0x74, 0x63, 0x99, 0xab, 0xf9, 0xdf, 0x7f, 0xbe,
	0xb3, 0xa8, 0xf6, 0x78, 0xb7, 0xd1, 0x08, 0x5d, 0xce, 0xeb, 0x22, 0xc4, 0xc4, 0x33, 0x07, 0x50,
	0xfd, 0x3e, 0x4c, 0xc6, 0xfb, 0x2a, 0x07, 0x60, 0x66, 0xeb, 0x86, 0x91, 0x70, 0xa1, 0x18, 0x71,
	0x92, 0xea, 0xf8, 0xf3, 0x93, 0xd2, 0x98, 0xa9, 0x1c, 0x76, 0xe6, 0x22, 0xc2, 0x83, 0x50, 0xeb,
	0x2b, 0xb0, 0x7c, 0x8e, 0x55, 0x9f, 0xf1, 0xf7, 0x9a, 0xac, 0xe7, 0x31, 0xf9, 0x12, 0xe1, 0x76,
	0xaf, 0xa4, 0x5a, 0x48, 0x0f, 0x71, 0xc3, 0x0d, 0xff, 0xf3, 0xf9, 0xdc, 0x99, 0xff, 0xe6, 0xc7,
	0xd2, 0xd8, 0x70, 0xbb, 0x5f, 0x83, 0xb5, 0x54, 0x7a, 0xfd, 0x22, 0x7e, 0xc8, 0xc8, 0x02, 0xf7,
	0x9e, 0x74, 0xf0, 0x21, 0x75, 0x90, 0xc0, 0x94, 0xec, 0x45, 0x08, 0xe2, 0xb8, 0xa9, 0x25, 0xac,
	0xc1, 0x6c, 0xbf, 0x04, 0xcb, 0x77, 0x8f, 0x64, 0x19, 0x59, 0x13, 0x14, 0x93, 0x7d, 0xf7, 0xe8,
	0x32, 0xcb, 0x52, 0x86, 0x5c, 0x6f, 0x59, 0x64, 0x90, 0xf1, 0x38, 0x88, 0x9a, 0xf8, 0x28, 0xc8,
	0x36, 0x2c, 0x39, 0x88, 0x50, 0x82, 0x1d, 0xd4, 0xee, 0x0f, 0xb2, 0xc4, 0x4e, 0x48, 0xec, 0xf5,
	0xbe, 0x55, 0x0d, 0x74, 0xe4, 0x74, 0x0b, 0x16, 0x9a, 0x34, 0x6c, 0x8d, 0xe2, 0x27, 0x25, 0x7e,
	0x2e, 0x32, 0x0c, 0x41, 0x1f, 0x40, 0x61, 0x10, 0x7f, 0x78, 0x11, 0xa4, 0xcf, 0x94, 0xf4, 0x59,
	0xee, 0x23, 0x86, 0x86, 0x36, 0x72, 0xde, 0x84, 0x57, 0x64, 0x9e, 0x0b, 0x7e, 0xd3, 0xd2, 0x4f,
	0x8f, 0x8c, 0xe7, 0x5c, 0xde, 0x84, 0xf9, 0xa8, 0x83, 0x98, 0x78, 0x96, 0x43, 0x89, 0x70, 0x8f,
	0x44, 0x3e, 0x1b, 0x13, 0x53, 0xc7, 0x0f, 0xe3, 0xd3, 0xd1, 0xad, 0x59, 0x83, 0x52, 0x8a, 0x40,
	0x7d, 0x11, 0x7f, 0x8a, 0x27, 0xd1, 0x74, 0x79, 0x27, 0x70, 0x87, 0xa4, 0x66, 0x94, 0xa3, 0xf6,
	0x3f, 0xde, 0xa2, 0x55, 0x80, 0x26, 0xb3, 0x58, 0x8b, 0x2b, 0x8d, 0x33, 0x1b, 0x59, 0x73, 0xba,
	0xc9, 0x6a, 0x2d, 0x1e, 0x15, 0xf3, 0x3a, 0xcc, 0xf9, 0xa8, 0x2d, 0xa2, 0x62, 0x86, 0x34, 0x9e,
	0x35, 0x67, 0xd5, 0x69, 0xac, 0xf2, 0x85, 0x7d, 0x8a, 0x87, 0x32, 0x99, 0x69, 0xaf, 0x9e, 0xad,
	0xdf, 0x26, 0x20, 0x73, 0xc0, 0x3d, 0xfd, 0x09, 0x2c, 0x5c, 0x7c, 0x63, 0x6f, 0x25, 0x2e, 0x73,
	0xd2, 0x0b, 0x52, 0xd8, 0xbc, 0x34, 0xb4, 0x97, 0x5a, 0xf7, 0x61, 0xee, 0xdc, 0x43, 0xf3, 0x46,
	0x5a, 0x90, 0x51, 0x5c, 0xc1, 0xb8, 0x1c, 0xae, 0x9f, 0xc9, 0x86, 0xdc, 0xc8, 0x65, 0x77, 0x33,
	0xcd, 0x7f, 0x18, 0x55, 0x78, 0xeb, 0x32, 0xa8, 0x7e, 0x8e, 0xa7, 0x1a, 0x2c, 0xa5, 0xdc, 0x4f,
	0xa9, 0x74, 0x93, 0xf1, 0x85, 0x7b, 0x57, 0xc3, 0x8f, 0x50, 0x48, 0x19, 0xcc, 0x54, 0x0a, 0xc9,
	0xf8, 0x74, 0x0a, 0x7f, 0x3f, 0x4e, 0xfa, 0x57, 0xb0, 0x98, 0x78, 0xbf, 0xa5, 0xf6, 0x32, 0x09,
	0x5d, 0xb8, 0x7b, 0x15, 0x74, 0x2f, 0x77, 0x61, 0xe2, 0xe9, 0xcb, 0x67, 0xb7, 0xb5, 0xea, 0xa3,
	0xe7, 0xa7, 0x45, 0xed, 0xc5, 0x69, 0x51, 0xfb, 0xf3, 0xb4, 0xa8, 0x7d, 0x7b, 0x56, 0x1c, 0x7b,
	0x71, 0x56, 0x1c, 0xfb, 0xe3, 0xac, 0x38, 0xf6, 0xf9, 0x3b, 0x97, 0xba, 0xf8, 0x8f, 0x06, 0x7f,
	0x46, 0xe5, 0x1b, 0x60, 0x4f, 0xca, 0x7f, 0xa2, 0xdb, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xf2, 0x2f, 0x49, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CommitPubRandList commits a list of public randomness for EOTS
	CommitPubRandList(ctx context.Context, in *MsgCommitPubRandList, opts ...grpc.CallOption) (*MsgCommitPubRandListResponse, error)
	// AddFinalitySig adds a finality signature to a given block
	AddFinalitySig(ctx context.Context, in *MsgAddFinalitySig, opts ...grpc.CallOption) (*MsgAddFinalitySigResponse, error)
	// UpdateParams updates the finality module parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UnjailFinalityProvider defines a method for unjailing a jailed
	// finality provider, thus it can receive voting power
	UnjailFinalityProvider(ctx context.Context, in *MsgUnjailFinalityProvider, opts ...grpc.CallOption) (*MsgUnjailFinalityProviderResponse, error)
	// ResumeFinalityProposal handles the proposal of resuming finality.
	ResumeFinalityProposal(ctx context.Context, in *MsgResumeFinalityProposal, opts ...grpc.CallOption) (*MsgResumeFinalityProposalResponse, error)
	// EquivocationEvidence handles the evidence of equivocation message sent from
	// the finality gadget cw contract
	EquivocationEvidence(ctx context.Context, in *MsgEquivocationEvidence, opts ...grpc.CallOption) (*MsgEquivocationEvidenceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CommitPubRandList(ctx context.Context, in *MsgCommitPubRandList, opts ...grpc.CallOption) (*MsgCommitPubRandListResponse, error) {
	out := new(MsgCommitPubRandListResponse)
	err := c.cc.Invoke(ctx, "/babylon.finality.v1.Msg/CommitPubRandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFinalitySig(ctx context.Context, in *MsgAddFinalitySig, opts ...grpc.CallOption) (*MsgAddFinalitySigResponse, error) {
	out := new(MsgAddFinalitySigResponse)
	err := c.cc.Invoke(ctx, "/babylon.finality.v1.Msg/AddFinalitySig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.finality.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnjailFinalityProvider(ctx context.Context, in *MsgUnjailFinalityProvider, opts ...grpc.CallOption) (*MsgUnjailFinalityProviderResponse, error) {
	out := new(MsgUnjailFinalityProviderResponse)
	err := c.cc.Invoke(ctx, "/babylon.finality.v1.Msg/UnjailFinalityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResumeFinalityProposal(ctx context.Context, in *MsgResumeFinalityProposal, opts ...grpc.CallOption) (*MsgResumeFinalityProposalResponse, error) {
	out := new(MsgResumeFinalityProposalResponse)
	err := c.cc.Invoke(ctx, "/babylon.finality.v1.Msg/ResumeFinalityProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EquivocationEvidence(ctx context.Context, in *MsgEquivocationEvidence, opts ...grpc.CallOption) (*MsgEquivocationEvidenceResponse, error) {
	out := new(MsgEquivocationEvidenceResponse)
	err := c.cc.Invoke(ctx, "/babylon.finality.v1.Msg/EquivocationEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CommitPubRandList commits a list of public randomness for EOTS
	CommitPubRandList(context.Context, *MsgCommitPubRandList) (*MsgCommitPubRandListResponse, error)
	// AddFinalitySig adds a finality signature to a given block
	AddFinalitySig(context.Context, *MsgAddFinalitySig) (*MsgAddFinalitySigResponse, error)
	// UpdateParams updates the finality module parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UnjailFinalityProvider defines a method for unjailing a jailed
	// finality provider, thus it can receive voting power
	UnjailFinalityProvider(context.Context, *MsgUnjailFinalityProvider) (*MsgUnjailFinalityProviderResponse, error)
	// ResumeFinalityProposal handles the proposal of resuming finality.
	ResumeFinalityProposal(context.Context, *MsgResumeFinalityProposal) (*MsgResumeFinalityProposalResponse, error)
	// EquivocationEvidence handles the evidence of equivocation message sent from
	// the finality gadget cw contract
	EquivocationEvidence(context.Context, *MsgEquivocationEvidence) (*MsgEquivocationEvidenceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CommitPubRandList(ctx context.Context, req *MsgCommitPubRandList) (*MsgCommitPubRandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitPubRandList not implemented")
}
func (*UnimplementedMsgServer) AddFinalitySig(ctx context.Context, req *MsgAddFinalitySig) (*MsgAddFinalitySigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFinalitySig not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UnjailFinalityProvider(ctx context.Context, req *MsgUnjailFinalityProvider) (*MsgUnjailFinalityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnjailFinalityProvider not implemented")
}
func (*UnimplementedMsgServer) ResumeFinalityProposal(ctx context.Context, req *MsgResumeFinalityProposal) (*MsgResumeFinalityProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFinalityProposal not implemented")
}
func (*UnimplementedMsgServer) EquivocationEvidence(ctx context.Context, req *MsgEquivocationEvidence) (*MsgEquivocationEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquivocationEvidence not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CommitPubRandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitPubRandList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitPubRandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.finality.v1.Msg/CommitPubRandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitPubRandList(ctx, req.(*MsgCommitPubRandList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFinalitySig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddFinalitySig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFinalitySig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.finality.v1.Msg/AddFinalitySig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFinalitySig(ctx, req.(*MsgAddFinalitySig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.finality.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnjailFinalityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnjailFinalityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnjailFinalityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.finality.v1.Msg/UnjailFinalityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnjailFinalityProvider(ctx, req.(*MsgUnjailFinalityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResumeFinalityProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResumeFinalityProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResumeFinalityProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.finality.v1.Msg/ResumeFinalityProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResumeFinalityProposal(ctx, req.(*MsgResumeFinalityProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EquivocationEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEquivocationEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EquivocationEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.finality.v1.Msg/EquivocationEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EquivocationEvidence(ctx, req.(*MsgEquivocationEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.finality.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitPubRandList",
			Handler:    _Msg_CommitPubRandList_Handler,
		},
		{
			MethodName: "AddFinalitySig",
			Handler:    _Msg_AddFinalitySig_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UnjailFinalityProvider",
			Handler:    _Msg_UnjailFinalityProvider_Handler,
		},
		{
			MethodName: "ResumeFinalityProposal",
			Handler:    _Msg_ResumeFinalityProposal_Handler,
		},
		{
			MethodName: "EquivocationEvidence",
			Handler:    _Msg_EquivocationEvidence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/finality/v1/tx.proto",
}

func (m *MsgCommitPubRandList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitPubRandList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitPubRandList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sig != nil {
		{
			size := m.Sig.Size()
			i -= size
			if _, err := m.Sig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NumPubRand != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumPubRand))
		i--
		dAtA[i] = 0x20
	}
	if m.StartHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitPubRandListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitPubRandListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitPubRandListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddFinalitySig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFinalitySig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFinalitySig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalitySig != nil {
		{
			size := m.FinalitySig.Size()
			i -= size
			if _, err := m.FinalitySig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BlockAppHash) > 0 {
		i -= len(m.BlockAppHash)
		copy(dAtA[i:], m.BlockAppHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockAppHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PubRand != nil {
		{
			size := m.PubRand.Size()
			i -= size
			if _, err := m.PubRand.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddFinalitySigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFinalitySigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFinalitySigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnjailFinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjailFinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjailFinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnjailFinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjailFinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjailFinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEquivocationEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEquivocationEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEquivocationEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigningContext) > 0 {
		i -= len(m.SigningContext)
		copy(dAtA[i:], m.SigningContext)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SigningContext)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ForkFinalitySigHex) > 0 {
		i -= len(m.ForkFinalitySigHex)
		copy(dAtA[i:], m.ForkFinalitySigHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ForkFinalitySigHex)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CanonicalFinalitySigHex) > 0 {
		i -= len(m.CanonicalFinalitySigHex)
		copy(dAtA[i:], m.CanonicalFinalitySigHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CanonicalFinalitySigHex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ForkAppHashHex) > 0 {
		i -= len(m.ForkAppHashHex)
		copy(dAtA[i:], m.ForkAppHashHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ForkAppHashHex)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CanonicalAppHashHex) > 0 {
		i -= len(m.CanonicalAppHashHex)
		copy(dAtA[i:], m.CanonicalAppHashHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CanonicalAppHashHex)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PubRandHex) > 0 {
		i -= len(m.PubRandHex)
		copy(dAtA[i:], m.PubRandHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubRandHex)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEquivocationEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEquivocationEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEquivocationEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgResumeFinalityProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResumeFinalityProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResumeFinalityProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HaltingHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HaltingHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FpPksHex) > 0 {
		for iNdEx := len(m.FpPksHex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FpPksHex[iNdEx])
			copy(dAtA[i:], m.FpPksHex[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.FpPksHex[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResumeFinalityProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResumeFinalityProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResumeFinalityProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCommitPubRandList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovTx(uint64(m.StartHeight))
	}
	if m.NumPubRand != 0 {
		n += 1 + sovTx(uint64(m.NumPubRand))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Sig != nil {
		l = m.Sig.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitPubRandListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddFinalitySig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	if m.PubRand != nil {
		l = m.PubRand.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockAppHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FinalitySig != nil {
		l = m.FinalitySig.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddFinalitySigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnjailFinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnjailFinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEquivocationEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.PubRandHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CanonicalAppHashHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ForkAppHashHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CanonicalFinalitySigHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ForkFinalitySigHex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SigningContext)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEquivocationEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgResumeFinalityProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.FpPksHex) > 0 {
		for _, s := range m.FpPksHex {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.HaltingHeight != 0 {
		n += 1 + sovTx(uint64(m.HaltingHeight))
	}
	return n
}

func (m *MsgResumeFinalityProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCommitPubRandList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitPubRandList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitPubRandList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPubRand", wireType)
			}
			m.NumPubRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPubRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340Signature
			m.Sig = &v
			if err := m.Sig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitPubRandListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitPubRandListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitPubRandListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFinalitySig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFinalitySig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFinalitySig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubRand", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.SchnorrPubRand
			m.PubRand = &v
			if err := m.PubRand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &crypto.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockAppHash = append(m.BlockAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockAppHash == nil {
				m.BlockAppHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalitySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.SchnorrEOTSSig
			m.FinalitySig = &v
			if err := m.FinalitySig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFinalitySigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFinalitySigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFinalitySigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjailFinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjailFinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjailFinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v3_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjailFinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjailFinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjailFinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEquivocationEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEquivocationEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEquivocationEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubRandHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubRandHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalAppHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanonicalAppHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkAppHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForkAppHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalFinalitySigHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanonicalFinalitySigHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkFinalitySigHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForkFinalitySigHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEquivocationEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEquivocationEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEquivocationEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResumeFinalityProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResumeFinalityProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResumeFinalityProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpPksHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpPksHex = append(m.FpPksHex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaltingHeight", wireType)
			}
			m.HaltingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaltingHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResumeFinalityProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResumeFinalityProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResumeFinalityProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
