// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstkconsumer/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryConsumerRegistryListRequest is request type for the Query/ConsumerRegistryList RPC method
type QueryConsumerRegistryListRequest struct {
	// pagination defines whether to have the pagination in the request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConsumerRegistryListRequest) Reset()         { *m = QueryConsumerRegistryListRequest{} }
func (m *QueryConsumerRegistryListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerRegistryListRequest) ProtoMessage()    {}
func (*QueryConsumerRegistryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{2}
}
func (m *QueryConsumerRegistryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerRegistryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerRegistryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerRegistryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerRegistryListRequest.Merge(m, src)
}
func (m *QueryConsumerRegistryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerRegistryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerRegistryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerRegistryListRequest proto.InternalMessageInfo

func (m *QueryConsumerRegistryListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryConsumerRegistryListResponse is response type for the Query/ConsumerRegistryList RPC method
type QueryConsumerRegistryListResponse struct {
	// consumer_registers are the registered consumers in ascending alphabetical order
	ConsumerRegisters []*ConsumerRegisterResponse `protobuf:"bytes,1,rep,name=consumer_registers,json=consumerRegisters,proto3" json:"consumer_registers,omitempty"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConsumerRegistryListResponse) Reset()         { *m = QueryConsumerRegistryListResponse{} }
func (m *QueryConsumerRegistryListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerRegistryListResponse) ProtoMessage()    {}
func (*QueryConsumerRegistryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{3}
}
func (m *QueryConsumerRegistryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerRegistryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerRegistryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerRegistryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerRegistryListResponse.Merge(m, src)
}
func (m *QueryConsumerRegistryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerRegistryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerRegistryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerRegistryListResponse proto.InternalMessageInfo

func (m *QueryConsumerRegistryListResponse) GetConsumerRegisters() []*ConsumerRegisterResponse {
	if m != nil {
		return m.ConsumerRegisters
	}
	return nil
}

func (m *QueryConsumerRegistryListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryConsumersRegistryRequest is request type for the Query/ConsumersRegistry RPC method.
type QueryConsumersRegistryRequest struct {
	ConsumerIds []string `protobuf:"bytes,1,rep,name=consumer_ids,json=consumerIds,proto3" json:"consumer_ids,omitempty"`
}

func (m *QueryConsumersRegistryRequest) Reset()         { *m = QueryConsumersRegistryRequest{} }
func (m *QueryConsumersRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumersRegistryRequest) ProtoMessage()    {}
func (*QueryConsumersRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{4}
}
func (m *QueryConsumersRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumersRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumersRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumersRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumersRegistryRequest.Merge(m, src)
}
func (m *QueryConsumersRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumersRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumersRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumersRegistryRequest proto.InternalMessageInfo

func (m *QueryConsumersRegistryRequest) GetConsumerIds() []string {
	if m != nil {
		return m.ConsumerIds
	}
	return nil
}

// QueryConsumersRegistryResponse is response type for the Query/ConsumersRegistry RPC method.
type QueryConsumersRegistryResponse struct {
	ConsumerRegisters []*ConsumerRegisterResponse `protobuf:"bytes,1,rep,name=consumer_registers,json=consumerRegisters,proto3" json:"consumer_registers,omitempty"`
}

func (m *QueryConsumersRegistryResponse) Reset()         { *m = QueryConsumersRegistryResponse{} }
func (m *QueryConsumersRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumersRegistryResponse) ProtoMessage()    {}
func (*QueryConsumersRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{5}
}
func (m *QueryConsumersRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumersRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumersRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumersRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumersRegistryResponse.Merge(m, src)
}
func (m *QueryConsumersRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumersRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumersRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumersRegistryResponse proto.InternalMessageInfo

func (m *QueryConsumersRegistryResponse) GetConsumerRegisters() []*ConsumerRegisterResponse {
	if m != nil {
		return m.ConsumerRegisters
	}
	return nil
}

// ConsumerRegisterResponse contains the information for a registered consumer
// The struct is used in the query responses
type ConsumerRegisterResponse struct {
	// consumer_id is the ID of the consumer
	//   - for Cosmos SDK chains, the consumer ID will be the IBC client ID
	//   - for rollup chains, the consumer ID will be the chain ID of the rollup
	//     chain
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// consumer_name is the name of the consumer
	ConsumerName string `protobuf:"bytes,2,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// consumer_description is a description for the consumer (can be empty)
	ConsumerDescription string `protobuf:"bytes,3,opt,name=consumer_description,json=consumerDescription,proto3" json:"consumer_description,omitempty"`
	// cosmos_channel_id is the IBC channel ID for the consumer
	// set only for Cosmos integration
	CosmosChannelId string `protobuf:"bytes,4,opt,name=cosmos_channel_id,json=cosmosChannelId,proto3" json:"cosmos_channel_id,omitempty"`
	// rollup_finality_contract_address is the address of the finality contract
	// set only for rollup integration
	RollupFinalityContractAddress string `protobuf:"bytes,5,opt,name=rollup_finality_contract_address,json=rollupFinalityContractAddress,proto3" json:"rollup_finality_contract_address,omitempty"`
	// babylon_rewards_commission is the commission rate that Babylon takes from rewards
	// distributed to finality providers for this BSN consumer
	BabylonRewardsCommission cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=babylon_rewards_commission,json=babylonRewardsCommission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"babylon_rewards_commission"`
}

func (m *ConsumerRegisterResponse) Reset()         { *m = ConsumerRegisterResponse{} }
func (m *ConsumerRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumerRegisterResponse) ProtoMessage()    {}
func (*ConsumerRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{6}
}
func (m *ConsumerRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerRegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRegisterResponse.Merge(m, src)
}
func (m *ConsumerRegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRegisterResponse proto.InternalMessageInfo

func (m *ConsumerRegisterResponse) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetConsumerName() string {
	if m != nil {
		return m.ConsumerName
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetConsumerDescription() string {
	if m != nil {
		return m.ConsumerDescription
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetCosmosChannelId() string {
	if m != nil {
		return m.CosmosChannelId
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetRollupFinalityContractAddress() string {
	if m != nil {
		return m.RollupFinalityContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.btcstkconsumer.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.btcstkconsumer.v1.QueryParamsResponse")
	proto.RegisterType((*QueryConsumerRegistryListRequest)(nil), "babylon.btcstkconsumer.v1.QueryConsumerRegistryListRequest")
	proto.RegisterType((*QueryConsumerRegistryListResponse)(nil), "babylon.btcstkconsumer.v1.QueryConsumerRegistryListResponse")
	proto.RegisterType((*QueryConsumersRegistryRequest)(nil), "babylon.btcstkconsumer.v1.QueryConsumersRegistryRequest")
	proto.RegisterType((*QueryConsumersRegistryResponse)(nil), "babylon.btcstkconsumer.v1.QueryConsumersRegistryResponse")
	proto.RegisterType((*ConsumerRegisterResponse)(nil), "babylon.btcstkconsumer.v1.ConsumerRegisterResponse")
}

func init() {
	proto.RegisterFile("babylon/btcstkconsumer/v1/query.proto", fileDescriptor_4e6c48e60b6a8bd8)
}

var fileDescriptor_4e6c48e60b6a8bd8 = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0xb3, 0xfd, 0x13, 0xc8, 0xe4, 0xf7, 0x43, 0x32, 0xcd, 0x21, 0x8d, 0x36, 0x6d, 0x52,
	0xac, 0xb5, 0x90, 0x5d, 0xd2, 0x80, 0x58, 0x5a, 0x04, 0x93, 0x50, 0x29, 0x14, 0xa9, 0x2b, 0x5e,
	0xf4, 0xb0, 0xcc, 0xee, 0x8e, 0xdb, 0xb5, 0xbb, 0x3b, 0xdb, 0x9d, 0x49, 0x34, 0x88, 0x17, 0xf1,
	0x05, 0x88, 0x5e, 0x7c, 0x09, 0x1e, 0x3d, 0xf4, 0xe8, 0x0b, 0xe8, 0x41, 0xa4, 0xd4, 0x8b, 0x78,
	0x28, 0xd2, 0x0a, 0xbe, 0x0d, 0xd9, 0x99, 0x49, 0x9a, 0xa4, 0x26, 0x2d, 0x3d, 0x78, 0x69, 0x77,
	0xe7, 0xf9, 0x3e, 0xdf, 0xe7, 0xf9, 0xcc, 0xec, 0x33, 0x01, 0xd7, 0x4d, 0x64, 0xb6, 0x3d, 0x12,
	0x68, 0x26, 0xb3, 0x28, 0xdb, 0xb1, 0x48, 0x40, 0x9b, 0x3e, 0x8e, 0xb4, 0x56, 0x45, 0xdb, 0x6d,
	0xe2, 0xa8, 0xad, 0x86, 0x11, 0x61, 0x04, 0x4e, 0x4b, 0x99, 0xda, 0x2f, 0x53, 0x5b, 0x95, 0x7c,
	0x06, 0xf9, 0x6e, 0x40, 0x34, 0xfe, 0x57, 0xa8, 0xf3, 0x59, 0x87, 0x38, 0x84, 0x3f, 0x6a, 0xf1,
	0x93, 0x5c, 0xbd, 0xe6, 0x10, 0xe2, 0x78, 0x58, 0x43, 0xa1, 0xab, 0xa1, 0x20, 0x20, 0x0c, 0x31,
	0x97, 0x04, 0x54, 0x46, 0xa7, 0x2d, 0x42, 0x7d, 0x42, 0x0d, 0x91, 0x26, 0x5e, 0x64, 0x68, 0x49,
	0xbc, 0x69, 0x26, 0xa2, 0x58, 0x74, 0xa5, 0xb5, 0x2a, 0x26, 0x66, 0xa8, 0xa2, 0x85, 0xc8, 0x71,
	0x03, 0xee, 0x23, 0xb5, 0x0b, 0xc3, 0x79, 0x42, 0x14, 0x21, 0x5f, 0x7a, 0x96, 0xb2, 0x00, 0x3e,
	0x88, 0x9d, 0xb6, 0xf8, 0xa2, 0x8e, 0x77, 0x9b, 0x98, 0xb2, 0xd2, 0x13, 0x30, 0xd5, 0xb7, 0x4a,
	0x43, 0x12, 0x50, 0x0c, 0x1b, 0x20, 0x29, 0x92, 0x73, 0xca, 0x9c, 0xb2, 0x98, 0x5e, 0x2e, 0xaa,
	0x43, 0xb7, 0x43, 0x15, 0xa9, 0xb5, 0xd4, 0xfe, 0xd1, 0x6c, 0xe2, 0xe3, 0xef, 0x4f, 0x4b, 0x8a,
	0x2e, 0x73, 0x4b, 0xcf, 0xc0, 0x1c, 0x37, 0xaf, 0x4b, 0xb5, 0x8e, 0x1d, 0x97, 0xb2, 0xa8, 0xbd,
	0xe9, 0x52, 0x26, 0x1b, 0x80, 0xeb, 0x00, 0x9c, 0x22, 0xc9, 0x6a, 0x0b, 0xaa, 0xdc, 0x8d, 0x98,
	0x5f, 0x15, 0xa7, 0x22, 0xf9, 0xd5, 0x2d, 0xe4, 0x60, 0x99, 0xab, 0xf7, 0x64, 0x96, 0x0e, 0x14,
	0x50, 0x1c, 0x51, 0x4c, 0x72, 0x99, 0x00, 0x76, 0x5a, 0x37, 0x22, 0x2e, 0xc0, 0x51, 0xcc, 0x38,
	0xbe, 0x98, 0x5e, 0xae, 0x8e, 0x60, 0xec, 0x37, 0x8d, 0xff, 0x0b, 0x43, 0x3d, 0x63, 0x0d, 0x44,
	0x28, 0xbc, 0xd7, 0x47, 0x34, 0xc6, 0x89, 0x6e, 0x9c, 0x4b, 0x24, 0xfd, 0x7a, 0x91, 0x6a, 0x60,
	0xa6, 0x8f, 0x88, 0x76, 0x90, 0x3a, 0x7b, 0x57, 0x04, 0xff, 0x75, 0x69, 0x5c, 0x5b, 0x70, 0xa4,
	0xf4, 0x74, 0x67, 0x6d, 0xc3, 0xa6, 0xa5, 0x37, 0x0a, 0x28, 0x0c, 0x33, 0xf9, 0x77, 0x7b, 0x52,
	0xfa, 0x30, 0x0e, 0x72, 0xc3, 0xf4, 0x70, 0x16, 0xa4, 0x7b, 0x30, 0xf8, 0x37, 0x90, 0xd2, 0xc1,
	0x29, 0x05, 0x9c, 0x07, 0xff, 0x77, 0x05, 0x01, 0xf2, 0x31, 0xdf, 0xd4, 0x94, 0xde, 0x85, 0xbf,
	0x8f, 0x7c, 0x0c, 0x2b, 0x20, 0xdb, 0x15, 0xd9, 0x98, 0x5a, 0x91, 0x1b, 0xf2, 0x03, 0x18, 0xe7,
	0xda, 0xa9, 0x4e, 0xac, 0x71, 0x1a, 0x82, 0x4b, 0x20, 0x23, 0x67, 0xd0, 0xda, 0x46, 0x41, 0x80,
	0xbd, 0xb8, 0xfc, 0x04, 0xd7, 0x5f, 0x11, 0x81, 0xba, 0x58, 0xdf, 0xb0, 0x21, 0x02, 0x73, 0x11,
	0xf1, 0xbc, 0x66, 0x68, 0x3c, 0x75, 0x03, 0xe4, 0xb9, 0xac, 0x6d, 0x58, 0x24, 0x60, 0x11, 0xb2,
	0x98, 0x81, 0x6c, 0x3b, 0xc2, 0x94, 0xe6, 0x26, 0xe3, 0xd4, 0x5a, 0xee, 0x70, 0xaf, 0x9c, 0x95,
	0xc7, 0x7d, 0x57, 0x44, 0x1e, 0xb2, 0xc8, 0x0d, 0x1c, 0x7d, 0x46, 0x38, 0xac, 0x4b, 0x83, 0xba,
	0xcc, 0x97, 0x22, 0xc8, 0x40, 0x5e, 0xee, 0xb6, 0x11, 0xe1, 0xe7, 0x28, 0xb2, 0xa9, 0x61, 0x11,
	0xdf, 0x77, 0x29, 0x8d, 0x39, 0x92, 0xdc, 0xfc, 0x56, 0x3c, 0x65, 0x3f, 0x8e, 0x66, 0xaf, 0x8a,
	0x02, 0xd4, 0xde, 0x51, 0x5d, 0xa2, 0xf9, 0x88, 0x6d, 0xab, 0x9b, 0xd8, 0x41, 0x56, 0xbb, 0x81,
	0xad, 0xc3, 0xbd, 0x32, 0x90, 0xf5, 0x1b, 0xd8, 0x12, 0x23, 0x99, 0x93, 0xce, 0xba, 0x30, 0xae,
	0x77, 0x7d, 0x97, 0x3f, 0x4f, 0x80, 0x49, 0xfe, 0x85, 0xc0, 0x77, 0x0a, 0x48, 0x8a, 0x61, 0x86,
	0xe5, 0x11, 0xe7, 0x7e, 0xf6, 0x16, 0xc9, 0xab, 0x17, 0x95, 0x8b, 0x13, 0x2f, 0xdd, 0x7c, 0xfd,
	0xed, 0xd7, 0xfb, 0xb1, 0x79, 0x58, 0xd4, 0xce, 0xbb, 0xbc, 0xe0, 0x17, 0x05, 0x64, 0xff, 0x36,
	0xd2, 0x70, 0xf5, 0xbc, 0x9a, 0x23, 0x6e, 0x9d, 0xfc, 0xda, 0xe5, 0x92, 0x65, 0xfb, 0x2b, 0xbc,
	0xfd, 0x2a, 0xac, 0x8c, 0x68, 0x7f, 0x60, 0xa4, 0xa2, 0xb6, 0xe1, 0xc5, 0x5d, 0x7f, 0x55, 0x40,
	0xe6, 0xcc, 0x28, 0xc2, 0xdb, 0x17, 0x6d, 0x67, 0xf0, 0x0a, 0xc8, 0xaf, 0x5c, 0x22, 0x53, 0x52,
	0x34, 0x38, 0xc5, 0x1d, 0xb8, 0x76, 0x01, 0x0a, 0xda, 0xc5, 0xd0, 0x5e, 0xf6, 0x5e, 0x39, 0xaf,
	0x6a, 0x8f, 0xf6, 0x8f, 0x0b, 0xca, 0xc1, 0x71, 0x41, 0xf9, 0x79, 0x5c, 0x50, 0xde, 0x9e, 0x14,
	0x12, 0x07, 0x27, 0x85, 0xc4, 0xf7, 0x93, 0x42, 0xe2, 0xf1, 0xaa, 0xe3, 0xb2, 0xed, 0xa6, 0xa9,
	0x5a, 0xc4, 0xef, 0x54, 0xf0, 0x90, 0x49, 0xcb, 0x2e, 0xe9, 0x16, 0x6c, 0x55, 0xb5, 0x17, 0x83,
	0x55, 0x59, 0x3b, 0xc4, 0xd4, 0x4c, 0xf2, 0x1f, 0xad, 0xea, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x18, 0xda, 0x21, 0xae, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ConsumerRegistryList queries the list of consumers that are registered to Babylon
	ConsumerRegistryList(ctx context.Context, in *QueryConsumerRegistryListRequest, opts ...grpc.CallOption) (*QueryConsumerRegistryListResponse, error)
	// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
	ConsumersRegistry(ctx context.Context, in *QueryConsumersRegistryRequest, opts ...grpc.CallOption) (*QueryConsumersRegistryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsumerRegistryList(ctx context.Context, in *QueryConsumerRegistryListRequest, opts ...grpc.CallOption) (*QueryConsumerRegistryListResponse, error) {
	out := new(QueryConsumerRegistryListResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/ConsumerRegistryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsumersRegistry(ctx context.Context, in *QueryConsumersRegistryRequest, opts ...grpc.CallOption) (*QueryConsumersRegistryResponse, error) {
	out := new(QueryConsumersRegistryResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/ConsumersRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ConsumerRegistryList queries the list of consumers that are registered to Babylon
	ConsumerRegistryList(context.Context, *QueryConsumerRegistryListRequest) (*QueryConsumerRegistryListResponse, error)
	// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
	ConsumersRegistry(context.Context, *QueryConsumersRegistryRequest) (*QueryConsumersRegistryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ConsumerRegistryList(ctx context.Context, req *QueryConsumerRegistryListRequest) (*QueryConsumerRegistryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerRegistryList not implemented")
}
func (*UnimplementedQueryServer) ConsumersRegistry(ctx context.Context, req *QueryConsumersRegistryRequest) (*QueryConsumersRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumersRegistry not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsumerRegistryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumerRegistryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumerRegistryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/ConsumerRegistryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumerRegistryList(ctx, req.(*QueryConsumerRegistryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsumersRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumersRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumersRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/ConsumersRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumersRegistry(ctx, req.(*QueryConsumersRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.btcstkconsumer.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ConsumerRegistryList",
			Handler:    _Query_ConsumerRegistryList_Handler,
		},
		{
			MethodName: "ConsumersRegistry",
			Handler:    _Query_ConsumersRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/btcstkconsumer/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConsumerRegistryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerRegistryListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerRegistryListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumerRegistryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerRegistryListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerRegistryListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerRegisters) > 0 {
		for iNdEx := len(m.ConsumerRegisters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerRegisters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumersRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumersRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumersRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerIds) > 0 {
		for iNdEx := len(m.ConsumerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConsumerIds[iNdEx])
			copy(dAtA[i:], m.ConsumerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumersRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumersRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumersRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerRegisters) > 0 {
		for iNdEx := len(m.ConsumerRegisters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerRegisters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BabylonRewardsCommission.Size()
		i -= size
		if _, err := m.BabylonRewardsCommission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.RollupFinalityContractAddress) > 0 {
		i -= len(m.RollupFinalityContractAddress)
		copy(dAtA[i:], m.RollupFinalityContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupFinalityContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CosmosChannelId) > 0 {
		i -= len(m.CosmosChannelId)
		copy(dAtA[i:], m.CosmosChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsumerDescription) > 0 {
		i -= len(m.ConsumerDescription)
		copy(dAtA[i:], m.ConsumerDescription)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerName) > 0 {
		i -= len(m.ConsumerName)
		copy(dAtA[i:], m.ConsumerName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConsumerRegistryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumerRegistryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerRegisters) > 0 {
		for _, e := range m.ConsumerRegisters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumersRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerIds) > 0 {
		for _, s := range m.ConsumerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryConsumersRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerRegisters) > 0 {
		for _, e := range m.ConsumerRegisters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ConsumerRegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConsumerName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConsumerDescription)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CosmosChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RollupFinalityContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.BabylonRewardsCommission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerRegistryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerRegistryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerRegistryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerRegistryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerRegistryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerRegistryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRegisters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerRegisters = append(m.ConsumerRegisters, &ConsumerRegisterResponse{})
			if err := m.ConsumerRegisters[len(m.ConsumerRegisters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumersRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumersRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumersRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerIds = append(m.ConsumerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumersRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumersRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumersRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRegisters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerRegisters = append(m.ConsumerRegisters, &ConsumerRegisterResponse{})
			if err := m.ConsumerRegisters[len(m.ConsumerRegisters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupFinalityContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupFinalityContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonRewardsCommission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BabylonRewardsCommission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
