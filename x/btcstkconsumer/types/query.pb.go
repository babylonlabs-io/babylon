// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstkconsumer/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_babylonlabs_io_babylon_v2_types "github.com/babylonlabs-io/babylon/v2/types"
	types1 "github.com/babylonlabs-io/babylon/v2/x/btcstaking/types"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryConsumerRegistryListRequest is request type for the Query/ConsumerRegistryList RPC method
type QueryConsumerRegistryListRequest struct {
	// pagination defines whether to have the pagination in the request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConsumerRegistryListRequest) Reset()         { *m = QueryConsumerRegistryListRequest{} }
func (m *QueryConsumerRegistryListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerRegistryListRequest) ProtoMessage()    {}
func (*QueryConsumerRegistryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{2}
}
func (m *QueryConsumerRegistryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerRegistryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerRegistryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerRegistryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerRegistryListRequest.Merge(m, src)
}
func (m *QueryConsumerRegistryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerRegistryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerRegistryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerRegistryListRequest proto.InternalMessageInfo

func (m *QueryConsumerRegistryListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryConsumerRegistryListResponse is response type for the Query/ConsumerRegistryList RPC method
type QueryConsumerRegistryListResponse struct {
	// consumer_registers are the registered consumers in ascending alphabetical order
	ConsumerRegisters []*ConsumerRegisterResponse `protobuf:"bytes,1,rep,name=consumer_registers,json=consumerRegisters,proto3" json:"consumer_registers,omitempty"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryConsumerRegistryListResponse) Reset()         { *m = QueryConsumerRegistryListResponse{} }
func (m *QueryConsumerRegistryListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumerRegistryListResponse) ProtoMessage()    {}
func (*QueryConsumerRegistryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{3}
}
func (m *QueryConsumerRegistryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumerRegistryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumerRegistryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumerRegistryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumerRegistryListResponse.Merge(m, src)
}
func (m *QueryConsumerRegistryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumerRegistryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumerRegistryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumerRegistryListResponse proto.InternalMessageInfo

func (m *QueryConsumerRegistryListResponse) GetConsumerRegisters() []*ConsumerRegisterResponse {
	if m != nil {
		return m.ConsumerRegisters
	}
	return nil
}

func (m *QueryConsumerRegistryListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryConsumersRegistryRequest is request type for the Query/ConsumersRegistry RPC method.
type QueryConsumersRegistryRequest struct {
	ConsumerIds []string `protobuf:"bytes,1,rep,name=consumer_ids,json=consumerIds,proto3" json:"consumer_ids,omitempty"`
}

func (m *QueryConsumersRegistryRequest) Reset()         { *m = QueryConsumersRegistryRequest{} }
func (m *QueryConsumersRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConsumersRegistryRequest) ProtoMessage()    {}
func (*QueryConsumersRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{4}
}
func (m *QueryConsumersRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumersRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumersRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumersRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumersRegistryRequest.Merge(m, src)
}
func (m *QueryConsumersRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumersRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumersRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumersRegistryRequest proto.InternalMessageInfo

func (m *QueryConsumersRegistryRequest) GetConsumerIds() []string {
	if m != nil {
		return m.ConsumerIds
	}
	return nil
}

// QueryConsumersRegistryResponse is response type for the Query/ConsumersRegistry RPC method.
type QueryConsumersRegistryResponse struct {
	ConsumerRegisters []*ConsumerRegisterResponse `protobuf:"bytes,1,rep,name=consumer_registers,json=consumerRegisters,proto3" json:"consumer_registers,omitempty"`
}

func (m *QueryConsumersRegistryResponse) Reset()         { *m = QueryConsumersRegistryResponse{} }
func (m *QueryConsumersRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConsumersRegistryResponse) ProtoMessage()    {}
func (*QueryConsumersRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{5}
}
func (m *QueryConsumersRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConsumersRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConsumersRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConsumersRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConsumersRegistryResponse.Merge(m, src)
}
func (m *QueryConsumersRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConsumersRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConsumersRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConsumersRegistryResponse proto.InternalMessageInfo

func (m *QueryConsumersRegistryResponse) GetConsumerRegisters() []*ConsumerRegisterResponse {
	if m != nil {
		return m.ConsumerRegisters
	}
	return nil
}

// QueryFinalityProvidersRequest is the request type for the
// Query/FinalityProviders RPC method.
type QueryFinalityProvidersRequest struct {
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalityProvidersRequest) Reset()         { *m = QueryFinalityProvidersRequest{} }
func (m *QueryFinalityProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProvidersRequest) ProtoMessage()    {}
func (*QueryFinalityProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{6}
}
func (m *QueryFinalityProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProvidersRequest.Merge(m, src)
}
func (m *QueryFinalityProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProvidersRequest proto.InternalMessageInfo

func (m *QueryFinalityProvidersRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *QueryFinalityProvidersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFinalityProvidersResponse is the response type for the
// Query/FinalityProviders RPC method.
type QueryFinalityProvidersResponse struct {
	// finality_providers contains all the finality providers
	FinalityProviders []*FinalityProviderResponse `protobuf:"bytes,1,rep,name=finality_providers,json=finalityProviders,proto3" json:"finality_providers,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalityProvidersResponse) Reset()         { *m = QueryFinalityProvidersResponse{} }
func (m *QueryFinalityProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProvidersResponse) ProtoMessage()    {}
func (*QueryFinalityProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{7}
}
func (m *QueryFinalityProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProvidersResponse.Merge(m, src)
}
func (m *QueryFinalityProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProvidersResponse proto.InternalMessageInfo

func (m *QueryFinalityProvidersResponse) GetFinalityProviders() []*FinalityProviderResponse {
	if m != nil {
		return m.FinalityProviders
	}
	return nil
}

func (m *QueryFinalityProvidersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFinalityProviderRequest requests information about a finality provider
type QueryFinalityProviderRequest struct {
	// consumer id is the consumer id this finality provider is registered to
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
	FpBtcPkHex string `protobuf:"bytes,2,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
}

func (m *QueryFinalityProviderRequest) Reset()         { *m = QueryFinalityProviderRequest{} }
func (m *QueryFinalityProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderRequest) ProtoMessage()    {}
func (*QueryFinalityProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{8}
}
func (m *QueryFinalityProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderRequest.Merge(m, src)
}
func (m *QueryFinalityProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderRequest proto.InternalMessageInfo

func (m *QueryFinalityProviderRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *QueryFinalityProviderRequest) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

// QueryFinalityProviderResponse contains information about a finality provider
type QueryFinalityProviderResponse struct {
	// finality_provider contains the FinalityProvider
	FinalityProvider *FinalityProviderResponse `protobuf:"bytes,1,opt,name=finality_provider,json=finalityProvider,proto3" json:"finality_provider,omitempty"`
}

func (m *QueryFinalityProviderResponse) Reset()         { *m = QueryFinalityProviderResponse{} }
func (m *QueryFinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderResponse) ProtoMessage()    {}
func (*QueryFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{9}
}
func (m *QueryFinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderResponse.Merge(m, src)
}
func (m *QueryFinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderResponse proto.InternalMessageInfo

func (m *QueryFinalityProviderResponse) GetFinalityProvider() *FinalityProviderResponse {
	if m != nil {
		return m.FinalityProvider
	}
	return nil
}

// FinalityProviderResponse defines a finality provider with voting power information.
type FinalityProviderResponse struct {
	// description defines the description terms for the finality provider.
	Description *types.Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate of the finality provider.
	Commission *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission,omitempty"`
	// babylon_pk is the Babylon secp256k1 PK of this finality provider
	Addr string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of this finality provider
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonlabs_io_babylon_v2_types.BIP340PubKey `protobuf:"bytes,4,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonlabs-io/babylon/v2/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// pop is the proof of possession of babylon_pk and btc_pk
	Pop *types1.ProofOfPossessionBTC `protobuf:"bytes,5,opt,name=pop,proto3" json:"pop,omitempty"`
	// slashed_babylon_height indicates the Babylon height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBabylonHeight uint64 `protobuf:"varint,6,opt,name=slashed_babylon_height,json=slashedBabylonHeight,proto3" json:"slashed_babylon_height,omitempty"`
	// slashed_btc_height indicates the BTC height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBtcHeight uint32 `protobuf:"varint,7,opt,name=slashed_btc_height,json=slashedBtcHeight,proto3" json:"slashed_btc_height,omitempty"`
	// height is the queried Babylon height
	Height uint64 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	// voting_power is the voting power of this finality provider at the given height
	VotingPower uint64 `protobuf:"varint,9,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	// consumer_id is the consumer id this finality provider is registered to
	ConsumerId string `protobuf:"bytes,10,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (m *FinalityProviderResponse) Reset()         { *m = FinalityProviderResponse{} }
func (m *FinalityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderResponse) ProtoMessage()    {}
func (*FinalityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{10}
}
func (m *FinalityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderResponse.Merge(m, src)
}
func (m *FinalityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderResponse proto.InternalMessageInfo

func (m *FinalityProviderResponse) GetDescription() *types.Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *FinalityProviderResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *FinalityProviderResponse) GetPop() *types1.ProofOfPossessionBTC {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *FinalityProviderResponse) GetSlashedBabylonHeight() uint64 {
	if m != nil {
		return m.SlashedBabylonHeight
	}
	return 0
}

func (m *FinalityProviderResponse) GetSlashedBtcHeight() uint32 {
	if m != nil {
		return m.SlashedBtcHeight
	}
	return 0
}

func (m *FinalityProviderResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FinalityProviderResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *FinalityProviderResponse) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

// QueryFinalityProviderConsumerRequest requests the consumer id a Consumer finality
// provider belongs to
type QueryFinalityProviderConsumerRequest struct {
	// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
	FpBtcPkHex string `protobuf:"bytes,1,opt,name=fp_btc_pk_hex,json=fpBtcPkHex,proto3" json:"fp_btc_pk_hex,omitempty"`
}

func (m *QueryFinalityProviderConsumerRequest) Reset()         { *m = QueryFinalityProviderConsumerRequest{} }
func (m *QueryFinalityProviderConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderConsumerRequest) ProtoMessage()    {}
func (*QueryFinalityProviderConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{11}
}
func (m *QueryFinalityProviderConsumerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderConsumerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderConsumerRequest.Merge(m, src)
}
func (m *QueryFinalityProviderConsumerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderConsumerRequest proto.InternalMessageInfo

func (m *QueryFinalityProviderConsumerRequest) GetFpBtcPkHex() string {
	if m != nil {
		return m.FpBtcPkHex
	}
	return ""
}

// QueryFinalityProviderConsumerResponse returns the Consumer finality provider
// consumer id
type QueryFinalityProviderConsumerResponse struct {
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (m *QueryFinalityProviderConsumerResponse) Reset()         { *m = QueryFinalityProviderConsumerResponse{} }
func (m *QueryFinalityProviderConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalityProviderConsumerResponse) ProtoMessage()    {}
func (*QueryFinalityProviderConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{12}
}
func (m *QueryFinalityProviderConsumerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalityProviderConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalityProviderConsumerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalityProviderConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalityProviderConsumerResponse.Merge(m, src)
}
func (m *QueryFinalityProviderConsumerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalityProviderConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalityProviderConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalityProviderConsumerResponse proto.InternalMessageInfo

func (m *QueryFinalityProviderConsumerResponse) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

// ConsumerRegisterResponse contains the information for a registered consumer
// The struct is used in the query responses
type ConsumerRegisterResponse struct {
	// consumer_id is the ID of the consumer
	// - for Cosmos SDK chains, the consumer ID will be the IBC client ID
	// - for ETH L2 chains, the consumer ID will be the chain ID of the ETH L2
	//   chain
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// consumer_name is the name of the consumer
	ConsumerName string `protobuf:"bytes,2,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// consumer_description is a description for the consumer (can be empty)
	ConsumerDescription string `protobuf:"bytes,3,opt,name=consumer_description,json=consumerDescription,proto3" json:"consumer_description,omitempty"`
	// cosmos_channel_id is the IBC channel ID for the consumer
	// set only for Cosmos integration
	CosmosChannelId string `protobuf:"bytes,4,opt,name=cosmos_channel_id,json=cosmosChannelId,proto3" json:"cosmos_channel_id,omitempty"`
	// eth_l2_finality_contract_address is the address of the finality contract
	// set only for ETH L2 integration
	EthL2FinalityContractAddress string `protobuf:"bytes,5,opt,name=eth_l2_finality_contract_address,json=ethL2FinalityContractAddress,proto3" json:"eth_l2_finality_contract_address,omitempty"`
}

func (m *ConsumerRegisterResponse) Reset()         { *m = ConsumerRegisterResponse{} }
func (m *ConsumerRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumerRegisterResponse) ProtoMessage()    {}
func (*ConsumerRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e6c48e60b6a8bd8, []int{13}
}
func (m *ConsumerRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerRegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRegisterResponse.Merge(m, src)
}
func (m *ConsumerRegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRegisterResponse proto.InternalMessageInfo

func (m *ConsumerRegisterResponse) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetConsumerName() string {
	if m != nil {
		return m.ConsumerName
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetConsumerDescription() string {
	if m != nil {
		return m.ConsumerDescription
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetCosmosChannelId() string {
	if m != nil {
		return m.CosmosChannelId
	}
	return ""
}

func (m *ConsumerRegisterResponse) GetEthL2FinalityContractAddress() string {
	if m != nil {
		return m.EthL2FinalityContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.btcstkconsumer.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.btcstkconsumer.v1.QueryParamsResponse")
	proto.RegisterType((*QueryConsumerRegistryListRequest)(nil), "babylon.btcstkconsumer.v1.QueryConsumerRegistryListRequest")
	proto.RegisterType((*QueryConsumerRegistryListResponse)(nil), "babylon.btcstkconsumer.v1.QueryConsumerRegistryListResponse")
	proto.RegisterType((*QueryConsumersRegistryRequest)(nil), "babylon.btcstkconsumer.v1.QueryConsumersRegistryRequest")
	proto.RegisterType((*QueryConsumersRegistryResponse)(nil), "babylon.btcstkconsumer.v1.QueryConsumersRegistryResponse")
	proto.RegisterType((*QueryFinalityProvidersRequest)(nil), "babylon.btcstkconsumer.v1.QueryFinalityProvidersRequest")
	proto.RegisterType((*QueryFinalityProvidersResponse)(nil), "babylon.btcstkconsumer.v1.QueryFinalityProvidersResponse")
	proto.RegisterType((*QueryFinalityProviderRequest)(nil), "babylon.btcstkconsumer.v1.QueryFinalityProviderRequest")
	proto.RegisterType((*QueryFinalityProviderResponse)(nil), "babylon.btcstkconsumer.v1.QueryFinalityProviderResponse")
	proto.RegisterType((*FinalityProviderResponse)(nil), "babylon.btcstkconsumer.v1.FinalityProviderResponse")
	proto.RegisterType((*QueryFinalityProviderConsumerRequest)(nil), "babylon.btcstkconsumer.v1.QueryFinalityProviderConsumerRequest")
	proto.RegisterType((*QueryFinalityProviderConsumerResponse)(nil), "babylon.btcstkconsumer.v1.QueryFinalityProviderConsumerResponse")
	proto.RegisterType((*ConsumerRegisterResponse)(nil), "babylon.btcstkconsumer.v1.ConsumerRegisterResponse")
}

func init() {
	proto.RegisterFile("babylon/btcstkconsumer/v1/query.proto", fileDescriptor_4e6c48e60b6a8bd8)
}

var fileDescriptor_4e6c48e60b6a8bd8 = []byte{
	// 1228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0xcf, 0xe6, 0xc5, 0xff, 0xbf, 0xc7, 0x8d, 0x88, 0xa7, 0x56, 0xe5, 0x9a, 0xe0, 0x38, 0x9b,
	0xb6, 0x84, 0xd0, 0xec, 0x62, 0xa7, 0x52, 0x5b, 0xa5, 0xe5, 0xc5, 0x49, 0xdb, 0x04, 0x52, 0x30,
	0x0b, 0x5c, 0xe0, 0xb0, 0x9d, 0x5d, 0x8f, 0xd7, 0x4b, 0xec, 0x9d, 0xed, 0xce, 0xc4, 0xc4, 0xaa,
	0x72, 0x00, 0x71, 0xe0, 0x88, 0xe0, 0x13, 0x70, 0xe3, 0x08, 0x52, 0x3f, 0x44, 0x0f, 0x14, 0x45,
	0xe5, 0x00, 0xf4, 0x10, 0xa1, 0x04, 0x89, 0x0b, 0x1f, 0x02, 0xed, 0xec, 0xac, 0x5f, 0xd6, 0xaf,
	0x89, 0x10, 0x97, 0x64, 0x67, 0x9e, 0xdf, 0xf3, 0xcc, 0xf3, 0xfb, 0xcd, 0x33, 0x33, 0x8f, 0xc1,
	0x65, 0x03, 0x19, 0xcd, 0x1a, 0x71, 0x54, 0x83, 0x99, 0x94, 0xed, 0x9a, 0xc4, 0xa1, 0x7b, 0x75,
	0xec, 0xa9, 0x8d, 0xbc, 0xfa, 0x70, 0x0f, 0x7b, 0x4d, 0xc5, 0xf5, 0x08, 0x23, 0xf0, 0xa2, 0x80,
	0x29, 0xdd, 0x30, 0xa5, 0x91, 0xcf, 0x24, 0x51, 0xdd, 0x76, 0x88, 0xca, 0xff, 0x06, 0xe8, 0x4c,
	0xca, 0x22, 0x16, 0xe1, 0x9f, 0xaa, 0xff, 0x25, 0x66, 0xe7, 0x2d, 0x42, 0xac, 0x1a, 0x56, 0x91,
	0x6b, 0xab, 0xc8, 0x71, 0x08, 0x43, 0xcc, 0x26, 0x0e, 0x15, 0xd6, 0x8b, 0x26, 0xa1, 0x75, 0x42,
	0xf5, 0xc0, 0x2d, 0x18, 0x08, 0xd3, 0xa5, 0x60, 0xa4, 0x52, 0x86, 0x76, 0x6d, 0xc7, 0x52, 0x1b,
	0x79, 0x03, 0x33, 0x94, 0x0f, 0xc7, 0x02, 0xb5, 0x22, 0x50, 0x06, 0xa2, 0x38, 0xc8, 0xbd, 0x05,
	0x74, 0x91, 0x65, 0x3b, 0x7c, 0x35, 0x81, 0xbd, 0xd2, 0xc5, 0x3a, 0x8c, 0xda, 0x31, 0x12, 0xb8,
	0x85, 0xfe, 0x38, 0x97, 0xb8, 0x7d, 0x03, 0x75, 0xc9, 0xe7, 0x22, 0x0f, 0xd5, 0x05, 0x05, 0x39,
	0x05, 0xe0, 0xfb, 0x7e, 0x4a, 0x25, 0x3e, 0xa9, 0xe1, 0x87, 0x7b, 0x98, 0x32, 0xf9, 0x13, 0x70,
	0xbe, 0x6b, 0x96, 0xba, 0xc4, 0xa1, 0x18, 0x6e, 0x82, 0x58, 0xe0, 0x9c, 0x96, 0x72, 0xd2, 0x72,
	0xa2, 0xb0, 0xa8, 0x0c, 0x54, 0x5f, 0x09, 0x5c, 0x8b, 0xf1, 0x27, 0x47, 0x0b, 0x13, 0xdf, 0xff,
	0xf5, 0xc3, 0x8a, 0xa4, 0x09, 0x5f, 0xf9, 0x53, 0x90, 0xe3, 0xc1, 0x37, 0x04, 0x5a, 0xc3, 0x96,
	0x4d, 0x99, 0xd7, 0xdc, 0xb1, 0x29, 0x13, 0x09, 0xc0, 0xbb, 0x00, 0xb4, 0xb5, 0x11, 0xab, 0x5d,
	0x51, 0x84, 0xf8, 0xbe, 0x90, 0x4a, 0x50, 0x04, 0x42, 0x48, 0xa5, 0x84, 0x2c, 0x2c, 0x7c, 0xb5,
	0x0e, 0x4f, 0xf9, 0x50, 0x02, 0x8b, 0x43, 0x16, 0x13, 0xbc, 0x0c, 0x00, 0xc3, 0xd4, 0x75, 0x8f,
	0x03, 0xb0, 0xe7, 0x73, 0x9c, 0x5a, 0x4e, 0x14, 0xd6, 0x86, 0x70, 0xec, 0x0e, 0xea, 0xff, 0x0f,
	0x02, 0x6a, 0x49, 0x33, 0x62, 0xa1, 0xf0, 0x5e, 0x17, 0xa3, 0x49, 0xce, 0xe8, 0xe5, 0x91, 0x8c,
	0x44, 0xbc, 0x4e, 0x4a, 0x45, 0xf0, 0x52, 0x17, 0x23, 0x1a, 0x52, 0x0a, 0xb5, 0x5b, 0x04, 0xe7,
	0x5a, 0x6c, 0xec, 0x72, 0xc0, 0x23, 0xae, 0x25, 0xc2, 0xb9, 0xed, 0x32, 0x95, 0xbf, 0x94, 0x40,
	0x76, 0x50, 0x90, 0xff, 0x4e, 0x13, 0xf9, 0x2b, 0x49, 0x70, 0xb9, 0x6b, 0x3b, 0xa8, 0x66, 0xb3,
	0x66, 0xc9, 0x23, 0x0d, 0xbb, 0xcc, 0xd3, 0x09, 0xb8, 0x2c, 0x80, 0x44, 0x07, 0x17, 0x5e, 0x08,
	0x71, 0x0d, 0xb4, 0xa9, 0x44, 0x0a, 0x65, 0xf2, 0xcc, 0x85, 0xf2, 0x34, 0x54, 0xa4, 0x4f, 0x2a,
	0x6d, 0x45, 0x2a, 0xc2, 0xe8, 0x5f, 0x06, 0x81, 0x75, 0x0c, 0x45, 0xa2, 0x11, 0xdb, 0x8a, 0x54,
	0xa2, 0x6b, 0xfd, 0x7b, 0x55, 0x62, 0x80, 0xf9, 0xbe, 0x74, 0xc6, 0x16, 0x76, 0x11, 0xcc, 0x56,
	0x5c, 0xdd, 0x60, 0xa6, 0xee, 0xee, 0xea, 0x55, 0xbc, 0xcf, 0x93, 0x89, 0x6b, 0xa0, 0xe2, 0x16,
	0x99, 0x59, 0xda, 0xdd, 0xc2, 0xfb, 0xf2, 0xe7, 0x83, 0xb6, 0xaf, 0x25, 0xd9, 0x03, 0x90, 0xec,
	0x91, 0x4c, 0x9c, 0xe6, 0x33, 0x29, 0x36, 0x17, 0x55, 0x4c, 0xfe, 0x71, 0x1a, 0xa4, 0x07, 0x2e,
	0x7f, 0x07, 0x24, 0xca, 0x98, 0x9a, 0x9e, 0xed, 0x76, 0x5c, 0x23, 0x4b, 0xa1, 0x9c, 0xe1, 0x8d,
	0x1a, 0x6a, 0xb9, 0xd9, 0x86, 0x6a, 0x9d, 0x7e, 0xf0, 0x3e, 0x00, 0x26, 0xa9, 0xd7, 0x6d, 0x4a,
	0xc3, 0x4d, 0x89, 0x17, 0x57, 0x9f, 0x1f, 0x2d, 0xbc, 0x18, 0x04, 0xa2, 0xe5, 0x5d, 0xc5, 0x26,
	0x6a, 0x1d, 0xb1, 0xaa, 0xb2, 0x83, 0x2d, 0x64, 0x36, 0x37, 0xb1, 0xf9, 0xec, 0xf1, 0x2a, 0x10,
	0xeb, 0x6c, 0x62, 0x53, 0xeb, 0x08, 0x00, 0xaf, 0x82, 0x69, 0x54, 0x2e, 0x7b, 0xe9, 0x29, 0x1e,
	0x28, 0xfd, 0xec, 0xf1, 0x6a, 0x4a, 0x20, 0xdf, 0x2a, 0x97, 0x3d, 0x4c, 0xe9, 0x07, 0xcc, 0xb3,
	0x1d, 0x4b, 0xe3, 0x28, 0xa8, 0x81, 0x58, 0xb0, 0x09, 0xe9, 0xe9, 0x9c, 0xb4, 0x7c, 0xae, 0xb8,
	0xfe, 0xfc, 0x68, 0xe1, 0xba, 0x65, 0xb3, 0xea, 0x9e, 0xa1, 0x98, 0xa4, 0xae, 0x0a, 0x15, 0x6b,
	0xc8, 0xa0, 0xab, 0x36, 0x09, 0x87, 0x6a, 0xa3, 0xa0, 0xb2, 0xa6, 0x8b, 0xa9, 0x52, 0xdc, 0x2e,
	0xad, 0x5d, 0x7b, 0xad, 0xb4, 0x67, 0xbc, 0x83, 0x9b, 0xda, 0x8c, 0xe1, 0xef, 0x1d, 0xbc, 0x0d,
	0xa6, 0x5c, 0xe2, 0xa6, 0x67, 0xb8, 0x1e, 0xaf, 0x76, 0x6f, 0x44, 0xa8, 0x89, 0x52, 0xf2, 0x08,
	0xa9, 0xbc, 0x57, 0x29, 0x11, 0x4a, 0x31, 0x4f, 0xbc, 0xf8, 0xe1, 0x86, 0xe6, 0xfb, 0xc1, 0x6b,
	0xe0, 0x02, 0xad, 0x21, 0x5a, 0xc5, 0x65, 0x5d, 0xb8, 0xea, 0x55, 0x6c, 0x5b, 0x55, 0x96, 0x8e,
	0xe5, 0xa4, 0xe5, 0x69, 0x2d, 0x25, 0xac, 0xc5, 0xc0, 0xb8, 0xc5, 0x6d, 0xf0, 0x2a, 0x80, 0x2d,
	0x2f, 0x66, 0x86, 0x1e, 0xff, 0xcb, 0x49, 0xcb, 0xb3, 0xda, 0x5c, 0xe8, 0xc1, 0x4c, 0x81, 0xbe,
	0x00, 0x62, 0x02, 0xf1, 0x7f, 0x1e, 0x53, 0x8c, 0xfc, 0xcb, 0xad, 0x41, 0x98, 0xed, 0x58, 0xba,
	0x4b, 0x3e, 0xc3, 0x5e, 0x3a, 0xce, 0xad, 0x89, 0x60, 0xae, 0xe4, 0x4f, 0x45, 0x4b, 0x1b, 0x44,
	0x4b, 0x5b, 0xde, 0x06, 0x97, 0xfa, 0x96, 0x6d, 0xfb, 0xea, 0x0a, 0x2f, 0xd2, 0xc8, 0x11, 0x90,
	0x7a, 0x8e, 0xc0, 0x16, 0xb8, 0x3c, 0x22, 0x94, 0x28, 0xc5, 0x51, 0xe7, 0x4d, 0xfe, 0x6e, 0x12,
	0xa4, 0x07, 0xdd, 0x9d, 0xa3, 0x4f, 0xeb, 0x12, 0x98, 0x6d, 0x01, 0x1c, 0x54, 0xc7, 0xe2, 0xb4,
	0xb6, 0x1e, 0x82, 0x77, 0x51, 0x1d, 0xc3, 0x3c, 0x48, 0xb5, 0x40, 0x9d, 0xe7, 0x82, 0x17, 0xa2,
	0x76, 0x3e, 0xb4, 0x75, 0x9c, 0x03, 0xb8, 0x02, 0x92, 0xa2, 0xfd, 0x31, 0xab, 0xc8, 0x71, 0x70,
	0xcd, 0x5f, 0x7e, 0x9a, 0xe3, 0x5f, 0x08, 0x0c, 0x1b, 0xc1, 0xfc, 0x76, 0x19, 0x3e, 0x00, 0x39,
	0xcc, 0xaa, 0x7a, 0xad, 0xa0, 0xb7, 0xce, 0xbc, 0x49, 0x1c, 0xe6, 0x21, 0x93, 0xe9, 0x28, 0xa8,
	0x6c, 0x5e, 0x72, 0xc3, 0x6a, 0x7e, 0x1e, 0xb3, 0xea, 0x4e, 0x21, 0x54, 0x73, 0x43, 0xb8, 0x0b,
	0x4c, 0xe1, 0xd7, 0x38, 0x98, 0xe1, 0x72, 0xc3, 0x6f, 0x24, 0x10, 0x0b, 0x3a, 0x0c, 0xb8, 0x3a,
	0xe4, 0x22, 0xe9, 0x6d, 0x6d, 0x32, 0xca, 0xb8, 0xf0, 0x40, 0x7a, 0xf9, 0x95, 0x2f, 0x7e, 0xf9,
	0xf3, 0xdb, 0xc9, 0x25, 0xb8, 0xa8, 0x8e, 0xea, 0xa8, 0xe0, 0x4f, 0x12, 0x48, 0xf5, 0xeb, 0x33,
	0xe0, 0xfa, 0xa8, 0x35, 0x87, 0xb4, 0x42, 0x99, 0x5b, 0x67, 0x73, 0x16, 0xe9, 0xdf, 0xe4, 0xe9,
	0xaf, 0xc1, 0xfc, 0x90, 0xf4, 0x23, 0xef, 0xbc, 0xd7, 0xd4, 0x6b, 0x7e, 0xd6, 0x3f, 0x4b, 0x20,
	0xd9, 0xd3, 0x1f, 0xc0, 0x1b, 0xe3, 0xa6, 0x13, 0xed, 0x4b, 0x32, 0x37, 0xcf, 0xe0, 0x29, 0x58,
	0x6c, 0x72, 0x16, 0xaf, 0xc3, 0x5b, 0x63, 0xb0, 0xa0, 0x2d, 0x1a, 0xea, 0xa3, 0xce, 0x3e, 0xe8,
	0x00, 0xfe, 0x2d, 0xf5, 0xbe, 0x15, 0xe1, 0x9a, 0xf0, 0x8d, 0x51, 0xd9, 0x8d, 0xb8, 0x2d, 0x32,
	0x6f, 0x9e, 0x3d, 0x80, 0x60, 0x79, 0x9f, 0xb3, 0xbc, 0x07, 0xef, 0x0c, 0x61, 0xd9, 0xf3, 0x9c,
	0xea, 0x2d, 0xeb, 0xa3, 0xae, 0xcb, 0xea, 0x00, 0x3e, 0x95, 0x40, 0xb2, 0xa7, 0x9b, 0x19, 0xbd,
	0x7f, 0x83, 0x7a, 0xb1, 0xd1, 0xfb, 0x37, 0xb0, 0x75, 0x92, 0x37, 0x38, 0xb3, 0xdb, 0x70, 0xfd,
	0x34, 0xcc, 0x68, 0xd7, 0xfe, 0x1d, 0xc0, 0xdf, 0x25, 0x30, 0x17, 0x5d, 0x02, 0x5e, 0x3f, 0x6d,
	0x52, 0x21, 0x9b, 0x1b, 0xa7, 0x77, 0x14, 0x64, 0x34, 0x4e, 0x66, 0x07, 0xbe, 0x7d, 0x1a, 0x32,
	0xdd, 0x5c, 0xa2, 0x7b, 0x55, 0xfc, 0xe8, 0xc9, 0x71, 0x56, 0x3a, 0x3c, 0xce, 0x4a, 0x7f, 0x1c,
	0x67, 0xa5, 0xaf, 0x4f, 0xb2, 0x13, 0x87, 0x27, 0xd9, 0x89, 0xdf, 0x4e, 0xb2, 0x13, 0x1f, 0xaf,
	0x8f, 0xf5, 0xd6, 0xef, 0x47, 0x73, 0xe0, 0x8f, 0xbf, 0x11, 0xe3, 0x3f, 0xf2, 0xd6, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x20, 0xb9, 0x26, 0x86, 0x4d, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ConsumerRegistryList queries the list of consumers that are registered to Babylon
	ConsumerRegistryList(ctx context.Context, in *QueryConsumerRegistryListRequest, opts ...grpc.CallOption) (*QueryConsumerRegistryListResponse, error)
	// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
	ConsumersRegistry(ctx context.Context, in *QueryConsumersRegistryRequest, opts ...grpc.CallOption) (*QueryConsumersRegistryResponse, error)
	// FinalityProviderConsumer info about one finality provider's consumer id
	FinalityProviderConsumer(ctx context.Context, in *QueryFinalityProviderConsumerRequest, opts ...grpc.CallOption) (*QueryFinalityProviderConsumerResponse, error)
	// FinalityProviders queries all finality providers for a given consumer
	FinalityProviders(ctx context.Context, in *QueryFinalityProvidersRequest, opts ...grpc.CallOption) (*QueryFinalityProvidersResponse, error)
	// FinalityProvider info about one finality provider
	FinalityProvider(ctx context.Context, in *QueryFinalityProviderRequest, opts ...grpc.CallOption) (*QueryFinalityProviderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsumerRegistryList(ctx context.Context, in *QueryConsumerRegistryListRequest, opts ...grpc.CallOption) (*QueryConsumerRegistryListResponse, error) {
	out := new(QueryConsumerRegistryListResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/ConsumerRegistryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsumersRegistry(ctx context.Context, in *QueryConsumersRegistryRequest, opts ...grpc.CallOption) (*QueryConsumersRegistryResponse, error) {
	out := new(QueryConsumersRegistryResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/ConsumersRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProviderConsumer(ctx context.Context, in *QueryFinalityProviderConsumerRequest, opts ...grpc.CallOption) (*QueryFinalityProviderConsumerResponse, error) {
	out := new(QueryFinalityProviderConsumerResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/FinalityProviderConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProviders(ctx context.Context, in *QueryFinalityProvidersRequest, opts ...grpc.CallOption) (*QueryFinalityProvidersResponse, error) {
	out := new(QueryFinalityProvidersResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/FinalityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalityProvider(ctx context.Context, in *QueryFinalityProviderRequest, opts ...grpc.CallOption) (*QueryFinalityProviderResponse, error) {
	out := new(QueryFinalityProviderResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstkconsumer.v1.Query/FinalityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ConsumerRegistryList queries the list of consumers that are registered to Babylon
	ConsumerRegistryList(context.Context, *QueryConsumerRegistryListRequest) (*QueryConsumerRegistryListResponse, error)
	// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
	ConsumersRegistry(context.Context, *QueryConsumersRegistryRequest) (*QueryConsumersRegistryResponse, error)
	// FinalityProviderConsumer info about one finality provider's consumer id
	FinalityProviderConsumer(context.Context, *QueryFinalityProviderConsumerRequest) (*QueryFinalityProviderConsumerResponse, error)
	// FinalityProviders queries all finality providers for a given consumer
	FinalityProviders(context.Context, *QueryFinalityProvidersRequest) (*QueryFinalityProvidersResponse, error)
	// FinalityProvider info about one finality provider
	FinalityProvider(context.Context, *QueryFinalityProviderRequest) (*QueryFinalityProviderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ConsumerRegistryList(ctx context.Context, req *QueryConsumerRegistryListRequest) (*QueryConsumerRegistryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerRegistryList not implemented")
}
func (*UnimplementedQueryServer) ConsumersRegistry(ctx context.Context, req *QueryConsumersRegistryRequest) (*QueryConsumersRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumersRegistry not implemented")
}
func (*UnimplementedQueryServer) FinalityProviderConsumer(ctx context.Context, req *QueryFinalityProviderConsumerRequest) (*QueryFinalityProviderConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProviderConsumer not implemented")
}
func (*UnimplementedQueryServer) FinalityProviders(ctx context.Context, req *QueryFinalityProvidersRequest) (*QueryFinalityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProviders not implemented")
}
func (*UnimplementedQueryServer) FinalityProvider(ctx context.Context, req *QueryFinalityProviderRequest) (*QueryFinalityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalityProvider not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsumerRegistryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumerRegistryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumerRegistryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/ConsumerRegistryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumerRegistryList(ctx, req.(*QueryConsumerRegistryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsumersRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsumersRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsumersRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/ConsumersRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsumersRegistry(ctx, req.(*QueryConsumersRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProviderConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProviderConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProviderConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/FinalityProviderConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProviderConsumer(ctx, req.(*QueryFinalityProviderConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/FinalityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProviders(ctx, req.(*QueryFinalityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstkconsumer.v1.Query/FinalityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalityProvider(ctx, req.(*QueryFinalityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.btcstkconsumer.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ConsumerRegistryList",
			Handler:    _Query_ConsumerRegistryList_Handler,
		},
		{
			MethodName: "ConsumersRegistry",
			Handler:    _Query_ConsumersRegistry_Handler,
		},
		{
			MethodName: "FinalityProviderConsumer",
			Handler:    _Query_FinalityProviderConsumer_Handler,
		},
		{
			MethodName: "FinalityProviders",
			Handler:    _Query_FinalityProviders_Handler,
		},
		{
			MethodName: "FinalityProvider",
			Handler:    _Query_FinalityProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/btcstkconsumer/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConsumerRegistryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerRegistryListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerRegistryListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumerRegistryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumerRegistryListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumerRegistryListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerRegisters) > 0 {
		for iNdEx := len(m.ConsumerRegisters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerRegisters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumersRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumersRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumersRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerIds) > 0 {
		for iNdEx := len(m.ConsumerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConsumerIds[iNdEx])
			copy(dAtA[i:], m.ConsumerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConsumersRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConsumersRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConsumersRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerRegisters) > 0 {
		for iNdEx := len(m.ConsumerRegisters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerRegisters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalityProviders) > 0 {
		for iNdEx := len(m.FinalityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalityProvider != nil {
		{
			size, err := m.FinalityProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0x52
	}
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x48
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x40
	}
	if m.SlashedBtcHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SlashedBtcHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.SlashedBabylonHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SlashedBabylonHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Commission != nil {
		{
			size := m.Commission.Size()
			i -= size
			if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderConsumerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderConsumerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderConsumerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FpBtcPkHex) > 0 {
		i -= len(m.FpBtcPkHex)
		copy(dAtA[i:], m.FpBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FpBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalityProviderConsumerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalityProviderConsumerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalityProviderConsumerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthL2FinalityContractAddress) > 0 {
		i -= len(m.EthL2FinalityContractAddress)
		copy(dAtA[i:], m.EthL2FinalityContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthL2FinalityContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CosmosChannelId) > 0 {
		i -= len(m.CosmosChannelId)
		copy(dAtA[i:], m.CosmosChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsumerDescription) > 0 {
		i -= len(m.ConsumerDescription)
		copy(dAtA[i:], m.ConsumerDescription)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerName) > 0 {
		i -= len(m.ConsumerName)
		copy(dAtA[i:], m.ConsumerName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConsumerRegistryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumerRegistryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerRegisters) > 0 {
		for _, e := range m.ConsumerRegisters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConsumersRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerIds) > 0 {
		for _, s := range m.ConsumerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryConsumersRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerRegisters) > 0 {
		for _, e := range m.ConsumerRegisters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFinalityProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalityProviders) > 0 {
		for _, e := range m.FinalityProviders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalityProvider != nil {
		l = m.FinalityProvider.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FinalityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SlashedBabylonHeight != 0 {
		n += 1 + sovQuery(uint64(m.SlashedBabylonHeight))
	}
	if m.SlashedBtcHeight != 0 {
		n += 1 + sovQuery(uint64(m.SlashedBtcHeight))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderConsumerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FpBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalityProviderConsumerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ConsumerRegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConsumerName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConsumerDescription)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CosmosChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EthL2FinalityContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerRegistryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerRegistryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerRegistryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumerRegistryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumerRegistryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumerRegistryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRegisters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerRegisters = append(m.ConsumerRegisters, &ConsumerRegisterResponse{})
			if err := m.ConsumerRegisters[len(m.ConsumerRegisters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumersRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumersRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumersRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerIds = append(m.ConsumerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConsumersRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConsumersRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConsumersRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerRegisters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerRegisters = append(m.ConsumerRegisters, &ConsumerRegisterResponse{})
			if err := m.ConsumerRegisters[len(m.ConsumerRegisters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviders = append(m.FinalityProviders, &FinalityProviderResponse{})
			if err := m.FinalityProviders[len(m.FinalityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalityProvider == nil {
				m.FinalityProvider = &FinalityProviderResponse{}
			}
			if err := m.FinalityProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Commission = &v
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonlabs_io_babylon_v2_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &types1.ProofOfPossessionBTC{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBabylonHeight", wireType)
			}
			m.SlashedBabylonHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBabylonHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBtcHeight", wireType)
			}
			m.SlashedBtcHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBtcHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderConsumerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderConsumerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderConsumerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalityProviderConsumerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalityProviderConsumerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalityProviderConsumerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthL2FinalityContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthL2FinalityContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
