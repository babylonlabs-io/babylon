// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstkconsumer/v1/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventConsumerRegistered is the event emitted when a consumer is registered
type EventConsumerRegistered struct {
	// consumer_id is the id of the consumer
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// consumer_name is the name of the consumer
	ConsumerName string `protobuf:"bytes,2,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// consumer_description is a description for the consumer
	ConsumerDescription string `protobuf:"bytes,3,opt,name=consumer_description,json=consumerDescription,proto3" json:"consumer_description,omitempty"`
	// consumer_type is the type of the consumer
	ConsumerType ConsumerType `protobuf:"varint,4,opt,name=consumer_type,json=consumerType,proto3,enum=babylon.btcstkconsumer.v1.ConsumerType" json:"consumer_type,omitempty"`
	// consumer_metadata is necessary metadata of the consumer, and the data
	// depends on the type of integration
	RollupConsumerMetadata *RollupConsumerMetadata `protobuf:"bytes,5,opt,name=rollup_consumer_metadata,json=rollupConsumerMetadata,proto3" json:"rollup_consumer_metadata,omitempty"`
	// babylon_rewards_commission is the commission rate that Babylon takes from rewards
	// distributed to finality providers for this BSN consumer
	BabylonRewardsCommission cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=babylon_rewards_commission,json=babylonRewardsCommission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"babylon_rewards_commission"`
}

func (m *EventConsumerRegistered) Reset()         { *m = EventConsumerRegistered{} }
func (m *EventConsumerRegistered) String() string { return proto.CompactTextString(m) }
func (*EventConsumerRegistered) ProtoMessage()    {}
func (*EventConsumerRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_164b43d81342e810, []int{0}
}
func (m *EventConsumerRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventConsumerRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventConsumerRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventConsumerRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventConsumerRegistered.Merge(m, src)
}
func (m *EventConsumerRegistered) XXX_Size() int {
	return m.Size()
}
func (m *EventConsumerRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventConsumerRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_EventConsumerRegistered proto.InternalMessageInfo

func (m *EventConsumerRegistered) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *EventConsumerRegistered) GetConsumerName() string {
	if m != nil {
		return m.ConsumerName
	}
	return ""
}

func (m *EventConsumerRegistered) GetConsumerDescription() string {
	if m != nil {
		return m.ConsumerDescription
	}
	return ""
}

func (m *EventConsumerRegistered) GetConsumerType() ConsumerType {
	if m != nil {
		return m.ConsumerType
	}
	return ConsumerType_COSMOS
}

func (m *EventConsumerRegistered) GetRollupConsumerMetadata() *RollupConsumerMetadata {
	if m != nil {
		return m.RollupConsumerMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*EventConsumerRegistered)(nil), "babylon.btcstkconsumer.v1.EventConsumerRegistered")
}

func init() {
	proto.RegisterFile("babylon/btcstkconsumer/v1/events.proto", fileDescriptor_164b43d81342e810)
}

var fileDescriptor_164b43d81342e810 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0x80, 0xcf, 0x94, 0x56, 0xc2, 0x05, 0x24, 0x42, 0x05, 0xe9, 0x21, 0xa5, 0x27, 0x86, 0x72,
	0xaa, 0x54, 0x5b, 0xd7, 0x4a, 0x08, 0x89, 0xad, 0x3d, 0x06, 0x24, 0x60, 0x08, 0xb0, 0xb0, 0x44,
	0x8e, 0xf3, 0x94, 0x5a, 0x77, 0x8e, 0x23, 0xdb, 0x77, 0x90, 0x7f, 0xc1, 0xcf, 0x60, 0x64, 0xe0,
	0x47, 0x74, 0xac, 0x98, 0x10, 0x43, 0x41, 0x77, 0x03, 0x7f, 0x03, 0x25, 0x76, 0xc2, 0x51, 0x68,
	0x97, 0x28, 0xef, 0xbd, 0xef, 0x7d, 0xb6, 0x9f, 0x8d, 0x77, 0x53, 0x96, 0x56, 0x53, 0x55, 0xd0,
	0xd4, 0x72, 0x63, 0x27, 0x5c, 0x15, 0x66, 0x26, 0x41, 0xd3, 0xf9, 0x88, 0xc2, 0x1c, 0x0a, 0x6b,
	0x48, 0xa9, 0x95, 0x55, 0xc1, 0xb6, 0xe7, 0xc8, 0xdf, 0x1c, 0x99, 0x8f, 0xfa, 0x77, 0x98, 0x14,
	0x85, 0xa2, 0xcd, 0xd7, 0xd1, 0x7d, 0x72, 0xb9, 0xf5, 0x42, 0xbf, 0xe3, 0xb7, 0xb9, 0x32, 0x52,
	0x99, 0xa4, 0x89, 0xa8, 0x0b, 0x7c, 0x69, 0x2b, 0x57, 0xb9, 0x72, 0xf9, 0xfa, 0xcf, 0x65, 0x1f,
	0xfe, 0x58, 0xc3, 0xf7, 0x9f, 0xd5, 0xfb, 0x3b, 0xf6, 0xa2, 0x18, 0x72, 0x61, 0x2c, 0x68, 0xc8,
	0x82, 0x5d, 0xbc, 0xd9, 0xea, 0x13, 0x91, 0x85, 0x68, 0x80, 0x86, 0x37, 0x8e, 0xd6, 0x3f, 0xfd,
	0xfa, 0xbc, 0x87, 0x62, 0xdc, 0x56, 0x9e, 0x67, 0xc1, 0x1e, 0xbe, 0xd5, 0x71, 0x05, 0x93, 0x10,
	0x5e, 0x5b, 0x25, 0x6f, 0xb6, 0xb5, 0x57, 0x4c, 0x42, 0xf0, 0x04, 0x6f, 0x75, 0x6c, 0x06, 0x86,
	0x6b, 0x51, 0x5a, 0xa1, 0x8a, 0x70, 0x6d, 0xb5, 0xe5, 0x6e, 0x8b, 0x8c, 0xff, 0x10, 0xc1, 0xeb,
	0x95, 0x55, 0x6c, 0x55, 0x42, 0x78, 0x7d, 0x80, 0x86, 0xb7, 0x0f, 0x1e, 0x91, 0x4b, 0x07, 0x4a,
	0xda, 0x33, 0xbd, 0xa9, 0x4a, 0xf8, 0x67, 0x3b, 0x75, 0x32, 0x98, 0xe0, 0x50, 0xab, 0xe9, 0x74,
	0x56, 0x26, 0x9d, 0x5b, 0x82, 0x65, 0x19, 0xb3, 0x2c, 0x5c, 0x1f, 0xa0, 0xe1, 0xe6, 0xc1, 0xe8,
	0x0a, 0x7f, 0xdc, 0xb4, 0xb6, 0xab, 0xbc, 0xf4, 0x8d, 0xf1, 0x3d, 0xfd, 0xdf, 0x7c, 0x60, 0x71,
	0xdf, 0xbb, 0x12, 0x0d, 0xef, 0x99, 0xce, 0x4c, 0xc2, 0x95, 0x94, 0xc2, 0x98, 0x7a, 0x02, 0x1b,
	0xcd, 0x04, 0x1e, 0x9f, 0x9e, 0xef, 0xf4, 0xbe, 0x9f, 0xef, 0x3c, 0x70, 0x77, 0x67, 0xb2, 0x09,
	0x11, 0x8a, 0x4a, 0x66, 0x4f, 0xc8, 0x0b, 0xc8, 0x19, 0xaf, 0xc6, 0xc0, 0xbf, 0x7e, 0xd9, 0xc7,
	0xfe, 0x6a, 0xc7, 0xc0, 0xdd, 0xb1, 0x42, 0x6f, 0x8e, 0x9d, 0xf8, 0xb8, 0xf3, 0x1e, 0xbd, 0x3d,
	0x5d, 0x44, 0xe8, 0x6c, 0x11, 0xa1, 0x9f, 0x8b, 0x08, 0x7d, 0x5c, 0x46, 0xbd, 0xb3, 0x65, 0xd4,
	0xfb, 0xb6, 0x8c, 0x7a, 0xef, 0x9e, 0xe6, 0xc2, 0x9e, 0xcc, 0x52, 0xc2, 0x95, 0xa4, 0xbe, 0x7d,
	0xca, 0x52, 0xb3, 0x2f, 0x54, 0x1b, 0xd2, 0xf9, 0x21, 0xfd, 0x70, 0xf1, 0xed, 0xd5, 0xc3, 0x37,
	0xe9, 0x46, 0xf3, 0x7e, 0x0e, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x56, 0x4e, 0x25, 0xac, 0xf8,
	0x02, 0x00, 0x00,
}

func (m *EventConsumerRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventConsumerRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventConsumerRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BabylonRewardsCommission.Size()
		i -= size
		if _, err := m.BabylonRewardsCommission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.RollupConsumerMetadata != nil {
		{
			size, err := m.RollupConsumerMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ConsumerType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ConsumerType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ConsumerDescription) > 0 {
		i -= len(m.ConsumerDescription)
		copy(dAtA[i:], m.ConsumerDescription)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConsumerDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerName) > 0 {
		i -= len(m.ConsumerName)
		copy(dAtA[i:], m.ConsumerName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConsumerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventConsumerRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ConsumerName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ConsumerDescription)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ConsumerType != 0 {
		n += 1 + sovEvents(uint64(m.ConsumerType))
	}
	if m.RollupConsumerMetadata != nil {
		l = m.RollupConsumerMetadata.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.BabylonRewardsCommission.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventConsumerRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventConsumerRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventConsumerRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerType", wireType)
			}
			m.ConsumerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumerType |= ConsumerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupConsumerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollupConsumerMetadata == nil {
				m.RollupConsumerMetadata = &RollupConsumerMetadata{}
			}
			if err := m.RollupConsumerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonRewardsCommission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BabylonRewardsCommission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
