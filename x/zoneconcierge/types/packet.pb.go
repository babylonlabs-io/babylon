// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/v1/packet.proto

package types

import (
	fmt "fmt"
	types4 "github.com/babylonlabs-io/babylon/v3/x/btccheckpoint/types"
	types1 "github.com/babylonlabs-io/babylon/v3/x/btclightclient/types"
	types "github.com/babylonlabs-io/babylon/v3/x/btcstaking/types"
	types3 "github.com/babylonlabs-io/babylon/v3/x/checkpointing/types"
	types2 "github.com/babylonlabs-io/babylon/v3/x/epoching/types"
	types5 "github.com/babylonlabs-io/babylon/v3/x/finality/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OutboundPacket represents packets sent from Babylon to other chains
type OutboundPacket struct {
	// packet is the actual message carried in the IBC packet
	//
	// Types that are valid to be assigned to Packet:
	//	*OutboundPacket_BtcTimestamp
	//	*OutboundPacket_BtcStaking
	//	*OutboundPacket_BtcHeaders
	Packet isOutboundPacket_Packet `protobuf_oneof:"packet"`
}

func (m *OutboundPacket) Reset()         { *m = OutboundPacket{} }
func (m *OutboundPacket) String() string { return proto.CompactTextString(m) }
func (*OutboundPacket) ProtoMessage()    {}
func (*OutboundPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_be12e124c5c4fdb9, []int{0}
}
func (m *OutboundPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundPacket.Merge(m, src)
}
func (m *OutboundPacket) XXX_Size() int {
	return m.Size()
}
func (m *OutboundPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundPacket.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundPacket proto.InternalMessageInfo

type isOutboundPacket_Packet interface {
	isOutboundPacket_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OutboundPacket_BtcTimestamp struct {
	BtcTimestamp *BTCTimestamp `protobuf:"bytes,1,opt,name=btc_timestamp,json=btcTimestamp,proto3,oneof" json:"btc_timestamp,omitempty"`
}
type OutboundPacket_BtcStaking struct {
	BtcStaking *types.BTCStakingIBCPacket `protobuf:"bytes,2,opt,name=btc_staking,json=btcStaking,proto3,oneof" json:"btc_staking,omitempty"`
}
type OutboundPacket_BtcHeaders struct {
	BtcHeaders *BTCHeaders `protobuf:"bytes,3,opt,name=btc_headers,json=btcHeaders,proto3,oneof" json:"btc_headers,omitempty"`
}

func (*OutboundPacket_BtcTimestamp) isOutboundPacket_Packet() {}
func (*OutboundPacket_BtcStaking) isOutboundPacket_Packet()   {}
func (*OutboundPacket_BtcHeaders) isOutboundPacket_Packet()   {}

func (m *OutboundPacket) GetPacket() isOutboundPacket_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *OutboundPacket) GetBtcTimestamp() *BTCTimestamp {
	if x, ok := m.GetPacket().(*OutboundPacket_BtcTimestamp); ok {
		return x.BtcTimestamp
	}
	return nil
}

func (m *OutboundPacket) GetBtcStaking() *types.BTCStakingIBCPacket {
	if x, ok := m.GetPacket().(*OutboundPacket_BtcStaking); ok {
		return x.BtcStaking
	}
	return nil
}

func (m *OutboundPacket) GetBtcHeaders() *BTCHeaders {
	if x, ok := m.GetPacket().(*OutboundPacket_BtcHeaders); ok {
		return x.BtcHeaders
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OutboundPacket) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OutboundPacket_BtcTimestamp)(nil),
		(*OutboundPacket_BtcStaking)(nil),
		(*OutboundPacket_BtcHeaders)(nil),
	}
}

// InboundPacket represents packets received by Babylon from other chains
type InboundPacket struct {
	// packet is the actual message carried in the IBC packet
	//
	// Types that are valid to be assigned to Packet:
	//	*InboundPacket_ConsumerSlashing
	//	*InboundPacket_BsnBaseBtcHeader
	Packet isInboundPacket_Packet `protobuf_oneof:"packet"`
}

func (m *InboundPacket) Reset()         { *m = InboundPacket{} }
func (m *InboundPacket) String() string { return proto.CompactTextString(m) }
func (*InboundPacket) ProtoMessage()    {}
func (*InboundPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_be12e124c5c4fdb9, []int{1}
}
func (m *InboundPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundPacket.Merge(m, src)
}
func (m *InboundPacket) XXX_Size() int {
	return m.Size()
}
func (m *InboundPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InboundPacket proto.InternalMessageInfo

type isInboundPacket_Packet interface {
	isInboundPacket_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InboundPacket_ConsumerSlashing struct {
	ConsumerSlashing *ConsumerSlashingIBCPacket `protobuf:"bytes,1,opt,name=consumer_slashing,json=consumerSlashing,proto3,oneof" json:"consumer_slashing,omitempty"`
}
type InboundPacket_BsnBaseBtcHeader struct {
	BsnBaseBtcHeader *BSNBaseBTCHeaderIBCPacket `protobuf:"bytes,2,opt,name=bsn_base_btc_header,json=bsnBaseBtcHeader,proto3,oneof" json:"bsn_base_btc_header,omitempty"`
}

func (*InboundPacket_ConsumerSlashing) isInboundPacket_Packet() {}
func (*InboundPacket_BsnBaseBtcHeader) isInboundPacket_Packet() {}

func (m *InboundPacket) GetPacket() isInboundPacket_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *InboundPacket) GetConsumerSlashing() *ConsumerSlashingIBCPacket {
	if x, ok := m.GetPacket().(*InboundPacket_ConsumerSlashing); ok {
		return x.ConsumerSlashing
	}
	return nil
}

func (m *InboundPacket) GetBsnBaseBtcHeader() *BSNBaseBTCHeaderIBCPacket {
	if x, ok := m.GetPacket().(*InboundPacket_BsnBaseBtcHeader); ok {
		return x.BsnBaseBtcHeader
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InboundPacket) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InboundPacket_ConsumerSlashing)(nil),
		(*InboundPacket_BsnBaseBtcHeader)(nil),
	}
}

// BTCHeaders contains BTC headers that have been verified and inserted into Babylon's BTC light client
// These headers are forwarded to consumer chains to keep their light clients in sync with Babylon
type BTCHeaders struct {
	Headers []*types1.BTCHeaderInfo `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *BTCHeaders) Reset()         { *m = BTCHeaders{} }
func (m *BTCHeaders) String() string { return proto.CompactTextString(m) }
func (*BTCHeaders) ProtoMessage()    {}
func (*BTCHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_be12e124c5c4fdb9, []int{2}
}
func (m *BTCHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCHeaders.Merge(m, src)
}
func (m *BTCHeaders) XXX_Size() int {
	return m.Size()
}
func (m *BTCHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_BTCHeaders proto.InternalMessageInfo

func (m *BTCHeaders) GetHeaders() []*types1.BTCHeaderInfo {
	if m != nil {
		return m.Headers
	}
	return nil
}

// BTCTimestamp is a BTC timestamp that carries information of a BTC-finalised epoch.
// It includes a number of BTC headers, a raw checkpoint, an epoch metadata, and
// a Cosmos Consumer header if there exists Cosmos Consumer headers checkpointed to this epoch.
// Upon a newly finalised epoch in Babylon, Babylon will send a BTC timestamp to each
// consumer chain via IBC.
type BTCTimestamp struct {
	// header is the last Cosmos Consumer header in the finalized Babylon epoch
	Header *IndexedHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// btc_headers is BTC headers between
	// - the block AFTER the common ancestor of BTC tip at epoch `lastFinalizedEpoch-1` and BTC tip at epoch `lastFinalizedEpoch`
	// - BTC tip at epoch `lastFinalizedEpoch`
	// where `lastFinalizedEpoch` is the last finalised epoch in Babylon
	BtcHeaders *BTCHeaders `protobuf:"bytes,2,opt,name=btc_headers,json=btcHeaders,proto3" json:"btc_headers,omitempty"`
	// epoch_info is the metadata of the sealed epoch
	EpochInfo *types2.Epoch `protobuf:"bytes,3,opt,name=epoch_info,json=epochInfo,proto3" json:"epoch_info,omitempty"`
	// raw_checkpoint is the raw checkpoint that seals this epoch
	RawCheckpoint *types3.RawCheckpoint `protobuf:"bytes,4,opt,name=raw_checkpoint,json=rawCheckpoint,proto3" json:"raw_checkpoint,omitempty"`
	// btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch
	BtcSubmissionKey *types4.SubmissionKey `protobuf:"bytes,5,opt,name=btc_submission_key,json=btcSubmissionKey,proto3" json:"btc_submission_key,omitempty"`
	//
	//Proofs that the header is finalized
	Proof *ProofFinalizedConsumer `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *BTCTimestamp) Reset()         { *m = BTCTimestamp{} }
func (m *BTCTimestamp) String() string { return proto.CompactTextString(m) }
func (*BTCTimestamp) ProtoMessage()    {}
func (*BTCTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_be12e124c5c4fdb9, []int{3}
}
func (m *BTCTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCTimestamp.Merge(m, src)
}
func (m *BTCTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *BTCTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_BTCTimestamp proto.InternalMessageInfo

func (m *BTCTimestamp) GetHeader() *IndexedHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BTCTimestamp) GetBtcHeaders() *BTCHeaders {
	if m != nil {
		return m.BtcHeaders
	}
	return nil
}

func (m *BTCTimestamp) GetEpochInfo() *types2.Epoch {
	if m != nil {
		return m.EpochInfo
	}
	return nil
}

func (m *BTCTimestamp) GetRawCheckpoint() *types3.RawCheckpoint {
	if m != nil {
		return m.RawCheckpoint
	}
	return nil
}

func (m *BTCTimestamp) GetBtcSubmissionKey() *types4.SubmissionKey {
	if m != nil {
		return m.BtcSubmissionKey
	}
	return nil
}

func (m *BTCTimestamp) GetProof() *ProofFinalizedConsumer {
	if m != nil {
		return m.Proof
	}
	return nil
}

// ConsumerSlashingIBCPacket defines the slashing information that a Consumer sends to Babylon's ZoneConcierge upon a
// Consumer slashing event.
// It includes the FP public key, the Consumer block height at the slashing event, and the double sign evidence.
type ConsumerSlashingIBCPacket struct {
	/// evidence is the FP slashing evidence that the Consumer sends to Babylon
	Evidence *types5.Evidence `protobuf:"bytes,1,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *ConsumerSlashingIBCPacket) Reset()         { *m = ConsumerSlashingIBCPacket{} }
func (m *ConsumerSlashingIBCPacket) String() string { return proto.CompactTextString(m) }
func (*ConsumerSlashingIBCPacket) ProtoMessage()    {}
func (*ConsumerSlashingIBCPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_be12e124c5c4fdb9, []int{4}
}
func (m *ConsumerSlashingIBCPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerSlashingIBCPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerSlashingIBCPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerSlashingIBCPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerSlashingIBCPacket.Merge(m, src)
}
func (m *ConsumerSlashingIBCPacket) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerSlashingIBCPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerSlashingIBCPacket.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerSlashingIBCPacket proto.InternalMessageInfo

func (m *ConsumerSlashingIBCPacket) GetEvidence() *types5.Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

// BSNBaseBTCHeaderIBCPacket defines the base BTC header information that a BSN sends to Babylon's ZoneConcierge
// to inform Babylon about which BTC header the BSN considers as its starting point for BTC light client synchronization
type BSNBaseBTCHeaderIBCPacket struct {
	// base_btc_header is the BTC header that the BSN uses as the base for its BTC light client
	BaseBtcHeader *types1.BTCHeaderInfo `protobuf:"bytes,1,opt,name=base_btc_header,json=baseBtcHeader,proto3" json:"base_btc_header,omitempty"`
}

func (m *BSNBaseBTCHeaderIBCPacket) Reset()         { *m = BSNBaseBTCHeaderIBCPacket{} }
func (m *BSNBaseBTCHeaderIBCPacket) String() string { return proto.CompactTextString(m) }
func (*BSNBaseBTCHeaderIBCPacket) ProtoMessage()    {}
func (*BSNBaseBTCHeaderIBCPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_be12e124c5c4fdb9, []int{5}
}
func (m *BSNBaseBTCHeaderIBCPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BSNBaseBTCHeaderIBCPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BSNBaseBTCHeaderIBCPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BSNBaseBTCHeaderIBCPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BSNBaseBTCHeaderIBCPacket.Merge(m, src)
}
func (m *BSNBaseBTCHeaderIBCPacket) XXX_Size() int {
	return m.Size()
}
func (m *BSNBaseBTCHeaderIBCPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_BSNBaseBTCHeaderIBCPacket.DiscardUnknown(m)
}

var xxx_messageInfo_BSNBaseBTCHeaderIBCPacket proto.InternalMessageInfo

func (m *BSNBaseBTCHeaderIBCPacket) GetBaseBtcHeader() *types1.BTCHeaderInfo {
	if m != nil {
		return m.BaseBtcHeader
	}
	return nil
}

func init() {
	proto.RegisterType((*OutboundPacket)(nil), "babylon.zoneconcierge.v1.OutboundPacket")
	proto.RegisterType((*InboundPacket)(nil), "babylon.zoneconcierge.v1.InboundPacket")
	proto.RegisterType((*BTCHeaders)(nil), "babylon.zoneconcierge.v1.BTCHeaders")
	proto.RegisterType((*BTCTimestamp)(nil), "babylon.zoneconcierge.v1.BTCTimestamp")
	proto.RegisterType((*ConsumerSlashingIBCPacket)(nil), "babylon.zoneconcierge.v1.ConsumerSlashingIBCPacket")
	proto.RegisterType((*BSNBaseBTCHeaderIBCPacket)(nil), "babylon.zoneconcierge.v1.BSNBaseBTCHeaderIBCPacket")
}

func init() {
	proto.RegisterFile("babylon/zoneconcierge/v1/packet.proto", fileDescriptor_be12e124c5c4fdb9)
}

var fileDescriptor_be12e124c5c4fdb9 = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x4f, 0xdb, 0x3e,
	0x18, 0x6e, 0xe0, 0x47, 0x7f, 0xcc, 0x50, 0xc6, 0xbc, 0x4b, 0x40, 0x5a, 0x85, 0xaa, 0xfd, 0x61,
	0x13, 0x4b, 0x57, 0x38, 0xb1, 0xcb, 0xa4, 0x56, 0x30, 0xaa, 0x09, 0x56, 0xa5, 0x6c, 0x87, 0x5d,
	0xa2, 0xd8, 0x71, 0x5b, 0xab, 0xad, 0x1d, 0xc5, 0x6e, 0xa0, 0xdc, 0xf6, 0x0d, 0xf6, 0x91, 0x76,
	0xdc, 0x91, 0xe3, 0x8e, 0x13, 0xfd, 0x22, 0x53, 0x12, 0x27, 0x75, 0x32, 0x05, 0x71, 0x89, 0xec,
	0x37, 0x8f, 0x9f, 0xd7, 0xef, 0xf3, 0x3e, 0xaf, 0xc1, 0x0b, 0xe4, 0xa2, 0xf9, 0x84, 0xb3, 0xe6,
	0x0d, 0x67, 0x04, 0x73, 0x86, 0x29, 0x09, 0x86, 0xa4, 0x19, 0xb6, 0x9a, 0xbe, 0x8b, 0xc7, 0x44,
	0x5a, 0x7e, 0xc0, 0x25, 0x87, 0xa6, 0x82, 0x59, 0x39, 0x98, 0x15, 0xb6, 0x76, 0x0f, 0x52, 0x02,
	0x24, 0x31, 0x1e, 0x11, 0x3c, 0xf6, 0x39, 0x65, 0x32, 0x22, 0xc8, 0x05, 0x12, 0x9e, 0x5d, 0x4b,
	0x43, 0x4f, 0xe8, 0x70, 0x14, 0x7d, 0x49, 0x06, 0xd7, 0x22, 0x0a, 0xdf, 0xd0, 0xf0, 0x42, 0xba,
	0x63, 0xca, 0x86, 0xc5, 0xbb, 0xed, 0xbe, 0x4e, 0x31, 0xcb, 0x6c, 0x0a, 0xf6, 0x4f, 0xfa, 0x8c,
	0x8e, 0xf8, 0x1c, 0x8f, 0x14, 0x2a, 0x5d, 0x2b, 0xcc, 0x41, 0xa9, 0x22, 0xf9, 0xda, 0x0b, 0x8c,
	0x03, 0xca, 0xdc, 0x09, 0x95, 0xf3, 0x08, 0x98, 0xae, 0x13, 0x4c, 0xe3, 0xfb, 0x0a, 0xd8, 0xfa,
	0x3c, 0x93, 0x88, 0xcf, 0x98, 0xd7, 0x8b, 0x6f, 0x0e, 0xcf, 0x41, 0x0d, 0x49, 0xec, 0x48, 0x3a,
	0x25, 0x42, 0xba, 0x53, 0xdf, 0x34, 0xf6, 0x8c, 0xfd, 0x8d, 0xc3, 0x97, 0x56, 0x99, 0xce, 0x56,
	0xfb, 0xb2, 0x73, 0x99, 0xa2, 0xcf, 0x2a, 0xf6, 0x26, 0x92, 0x38, 0xdb, 0xc3, 0x73, 0xb0, 0x11,
	0xd1, 0x29, 0x85, 0xcc, 0x95, 0x98, 0xec, 0x4d, 0x46, 0xb6, 0x14, 0x4f, 0x31, 0xf5, 0x93, 0x5d,
	0xb7, 0xdd, 0x49, 0xee, 0x73, 0x56, 0xb1, 0x01, 0x92, 0x58, 0x85, 0xe1, 0xc7, 0x84, 0x6e, 0x44,
	0x5c, 0x8f, 0x04, 0xc2, 0x5c, 0x8d, 0xe9, 0x9e, 0xdf, 0x7b, 0xb7, 0xb3, 0x04, 0xab, 0x88, 0xd4,
	0xae, 0xbd, 0x0e, 0xaa, 0x49, 0xab, 0x1a, 0x0b, 0x03, 0xd4, 0xba, 0x4c, 0x97, 0x00, 0x81, 0x27,
	0x98, 0x33, 0x31, 0x9b, 0x92, 0xc0, 0x11, 0x13, 0x57, 0x44, 0x2d, 0x50, 0x32, 0x1c, 0x95, 0xa7,
	0xea, 0xa8, 0x23, 0x7d, 0x75, 0x42, 0x2f, 0x61, 0x1b, 0x17, 0x7e, 0x42, 0x0f, 0x3c, 0x45, 0x82,
	0x39, 0xc8, 0x15, 0xc4, 0x59, 0x56, 0xa4, 0xf4, 0xb9, 0x27, 0x4b, 0xbb, 0x7f, 0xd1, 0x76, 0x05,
	0xc9, 0xea, 0xca, 0x65, 0x41, 0x82, 0xc5, 0x3f, 0xd3, 0x32, 0xb5, 0x2a, 0x7b, 0x00, 0x2c, 0xb5,
	0x80, 0x6d, 0xf0, 0x7f, 0x2a, 0xa1, 0xb1, 0xb7, 0xba, 0xbf, 0x71, 0xb8, 0xaf, 0x77, 0x44, 0x37,
	0xbb, 0xae, 0x61, 0x97, 0x0d, 0xb8, 0x9d, 0x1e, 0x6c, 0xfc, 0x5c, 0x05, 0x9b, 0x7a, 0xeb, 0xe1,
	0x07, 0x50, 0x55, 0x55, 0x24, 0x5a, 0xbd, 0x2a, 0xaf, 0xa2, 0xcb, 0x3c, 0x72, 0x4d, 0xbc, 0x84,
	0xd6, 0x56, 0xc7, 0xe0, 0x49, 0xbe, 0xb9, 0x2b, 0x0f, 0x6f, 0xae, 0xde, 0x5a, 0x78, 0x0c, 0x40,
	0x3c, 0x38, 0x0e, 0x65, 0x03, 0xae, 0x2c, 0x92, 0x8d, 0xb7, 0x95, 0xcd, 0x54, 0xd8, 0xb2, 0x4e,
	0xa2, 0xb5, 0xfd, 0x28, 0x0e, 0x45, 0xc5, 0xc1, 0x0b, 0xb0, 0x15, 0xb8, 0x57, 0xce, 0x72, 0x3a,
	0xcd, 0xff, 0x0a, 0xa5, 0xe4, 0x26, 0x39, 0xe2, 0xb0, 0xdd, 0xab, 0x4e, 0x16, 0xb3, 0x6b, 0x81,
	0xbe, 0x85, 0x5f, 0x00, 0x8c, 0xdd, 0x3f, 0x43, 0x53, 0x2a, 0x04, 0xe5, 0xcc, 0x19, 0x93, 0xb9,
	0xb9, 0x56, 0xe0, 0xcc, 0x3f, 0x47, 0x61, 0xcb, 0xea, 0x67, 0xf8, 0x4f, 0x64, 0x6e, 0x6f, 0x47,
	0xfe, 0xd7, 0x23, 0xf0, 0x14, 0xac, 0xf9, 0x01, 0xe7, 0x03, 0xb3, 0x1a, 0x33, 0xbd, 0x2b, 0x97,
	0xa8, 0x17, 0xc1, 0x4e, 0xe3, 0xa1, 0xbf, 0x21, 0x5e, 0x6a, 0x51, 0x3b, 0x39, 0xde, 0xf8, 0x0a,
	0x76, 0x4a, 0x5d, 0x0b, 0x8f, 0xc1, 0x3a, 0x09, 0xa9, 0x47, 0x18, 0x26, 0xaa, 0xa1, 0xcf, 0xb2,
	0x3c, 0xd9, 0x33, 0x12, 0x89, 0xa8, 0x40, 0x76, 0x06, 0x6f, 0x4c, 0xc1, 0x4e, 0xa9, 0x4f, 0x61,
	0x0f, 0x3c, 0x2e, 0xba, 0x3e, 0xa1, 0x7f, 0xb8, 0x07, 0x6b, 0x28, 0xe7, 0xf2, 0xcb, 0x5f, 0x77,
	0x75, 0xe3, 0xf6, 0xae, 0x6e, 0xfc, 0xb9, 0xab, 0x1b, 0x3f, 0x16, 0xf5, 0xca, 0xed, 0xa2, 0x5e,
	0xf9, 0xbd, 0xa8, 0x57, 0xbe, 0xbd, 0x1f, 0x52, 0x39, 0x9a, 0x21, 0x0b, 0xf3, 0x69, 0x53, 0x91,
	0x4f, 0x5c, 0x24, 0xde, 0x52, 0x9e, 0x6e, 0x9b, 0xe1, 0x51, 0xf3, 0xba, 0xf0, 0xa0, 0xca, 0xb9,
	0x4f, 0x04, 0xaa, 0xc6, 0x4f, 0xe4, 0xd1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x25, 0xa6,
	0x8e, 0x88, 0x06, 0x00, 0x00,
}

func (m *OutboundPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutboundPacket_BtcTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundPacket_BtcTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BtcTimestamp != nil {
		{
			size, err := m.BtcTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OutboundPacket_BtcStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundPacket_BtcStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BtcStaking != nil {
		{
			size, err := m.BtcStaking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OutboundPacket_BtcHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundPacket_BtcHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BtcHeaders != nil {
		{
			size, err := m.BtcHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InboundPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *InboundPacket_ConsumerSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundPacket_ConsumerSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConsumerSlashing != nil {
		{
			size, err := m.ConsumerSlashing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *InboundPacket_BsnBaseBtcHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundPacket_BsnBaseBtcHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BsnBaseBtcHeader != nil {
		{
			size, err := m.BsnBaseBtcHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BTCHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BTCTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BtcSubmissionKey != nil {
		{
			size, err := m.BtcSubmissionKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RawCheckpoint != nil {
		{
			size, err := m.RawCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EpochInfo != nil {
		{
			size, err := m.EpochInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BtcHeaders != nil {
		{
			size, err := m.BtcHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerSlashingIBCPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerSlashingIBCPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerSlashingIBCPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BSNBaseBTCHeaderIBCPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BSNBaseBTCHeaderIBCPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BSNBaseBTCHeaderIBCPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseBtcHeader != nil {
		{
			size, err := m.BaseBtcHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutboundPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *OutboundPacket_BtcTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcTimestamp != nil {
		l = m.BtcTimestamp.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *OutboundPacket_BtcStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcStaking != nil {
		l = m.BtcStaking.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *OutboundPacket_BtcHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcHeaders != nil {
		l = m.BtcHeaders.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *InboundPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *InboundPacket_ConsumerSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsumerSlashing != nil {
		l = m.ConsumerSlashing.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *InboundPacket_BsnBaseBtcHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BsnBaseBtcHeader != nil {
		l = m.BsnBaseBtcHeader.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *BTCHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	return n
}

func (m *BTCTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.BtcHeaders != nil {
		l = m.BtcHeaders.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.EpochInfo != nil {
		l = m.EpochInfo.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.RawCheckpoint != nil {
		l = m.RawCheckpoint.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.BtcSubmissionKey != nil {
		l = m.BtcSubmissionKey.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ConsumerSlashingIBCPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *BSNBaseBTCHeaderIBCPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseBtcHeader != nil {
		l = m.BaseBtcHeader.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutboundPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BTCTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &OutboundPacket_BtcTimestamp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStaking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BTCStakingIBCPacket{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &OutboundPacket_BtcStaking{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BTCHeaders{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &OutboundPacket_BtcHeaders{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerSlashing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConsumerSlashingIBCPacket{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &InboundPacket_ConsumerSlashing{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsnBaseBtcHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BSNBaseBTCHeaderIBCPacket{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &InboundPacket_BsnBaseBtcHeader{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &types1.BTCHeaderInfo{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &IndexedHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcHeaders == nil {
				m.BtcHeaders = &BTCHeaders{}
			}
			if err := m.BtcHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochInfo == nil {
				m.EpochInfo = &types2.Epoch{}
			}
			if err := m.EpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawCheckpoint == nil {
				m.RawCheckpoint = &types3.RawCheckpoint{}
			}
			if err := m.RawCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcSubmissionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcSubmissionKey == nil {
				m.BtcSubmissionKey = &types4.SubmissionKey{}
			}
			if err := m.BtcSubmissionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &ProofFinalizedConsumer{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerSlashingIBCPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerSlashingIBCPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerSlashingIBCPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &types5.Evidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BSNBaseBTCHeaderIBCPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BSNBaseBTCHeaderIBCPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BSNBaseBTCHeaderIBCPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBtcHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseBtcHeader == nil {
				m.BaseBtcHeader = &types1.BTCHeaderInfo{}
			}
			if err := m.BaseBtcHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
