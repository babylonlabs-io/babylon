// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the zoneconcierge module's genesis state.
type GenesisState struct {
	// port identification
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// params holds the zoneconcierge module's parameters
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	// chains_info contains all the registered chains information
	ChainsInfo []*ChainInfo `protobuf:"bytes,3,rep,name=chains_info,json=chainsInfo,proto3" json:"chains_info,omitempty"`
	// chains_indexed_headers contains the canonical chains
	// of the consumer chains, formed as a list of IndexedHeaders
	ChainsIndexedHeaders []*IndexedHeader `protobuf:"bytes,4,rep,name=chains_indexed_headers,json=chainsIndexedHeaders,proto3" json:"chains_indexed_headers,omitempty"`
	// chains_epochs_info contains the epochs' latest ChainInfo for a consumer
	// chain
	ChainsEpochsInfo []*EpochChainInfoEntry `protobuf:"bytes,5,rep,name=chains_epochs_info,json=chainsEpochsInfo,proto3" json:"chains_epochs_info,omitempty"`
	// last_sent_segment is the last BTC chain segment
	// which was broadcasted to the other light clients
	LastSentSegment *BTCChainSegment `protobuf:"bytes,6,opt,name=last_sent_segment,json=lastSentSegment,proto3" json:"last_sent_segment,omitempty"`
	// sealed_epochs_proofs contains the proofs that each epoch is sealed
	SealedEpochsProofs []*SealedEpochProofEntry `protobuf:"bytes,7,rep,name=sealed_epochs_proofs,json=sealedEpochsProofs,proto3" json:"sealed_epochs_proofs,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetChainsInfo() []*ChainInfo {
	if m != nil {
		return m.ChainsInfo
	}
	return nil
}

func (m *GenesisState) GetChainsIndexedHeaders() []*IndexedHeader {
	if m != nil {
		return m.ChainsIndexedHeaders
	}
	return nil
}

func (m *GenesisState) GetChainsEpochsInfo() []*EpochChainInfoEntry {
	if m != nil {
		return m.ChainsEpochsInfo
	}
	return nil
}

func (m *GenesisState) GetLastSentSegment() *BTCChainSegment {
	if m != nil {
		return m.LastSentSegment
	}
	return nil
}

func (m *GenesisState) GetSealedEpochsProofs() []*SealedEpochProofEntry {
	if m != nil {
		return m.SealedEpochsProofs
	}
	return nil
}

// EpochChainInfoEntry contains each epoch's latest ChainInfo for a consumer
// chain
type EpochChainInfoEntry struct {
	// epoch_number is the number of the epoch
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// chain_info contains the last consumer chain info of the epoch
	ChainInfo *ChainInfoWithProof `protobuf:"bytes,2,opt,name=chain_info,json=chainInfo,proto3" json:"chain_info,omitempty"`
}

func (m *EpochChainInfoEntry) Reset()         { *m = EpochChainInfoEntry{} }
func (m *EpochChainInfoEntry) String() string { return proto.CompactTextString(m) }
func (*EpochChainInfoEntry) ProtoMessage()    {}
func (*EpochChainInfoEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{1}
}
func (m *EpochChainInfoEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochChainInfoEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochChainInfoEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochChainInfoEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochChainInfoEntry.Merge(m, src)
}
func (m *EpochChainInfoEntry) XXX_Size() int {
	return m.Size()
}
func (m *EpochChainInfoEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochChainInfoEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EpochChainInfoEntry proto.InternalMessageInfo

func (m *EpochChainInfoEntry) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochChainInfoEntry) GetChainInfo() *ChainInfoWithProof {
	if m != nil {
		return m.ChainInfo
	}
	return nil
}

// SealedEpochProofEntry contains each epoch's proof that it is sealed
type SealedEpochProofEntry struct {
	// epoch_number is the number of the epoch
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// proof is the proof that an epoch is sealed by the sealer header
	Proof *ProofEpochSealed `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *SealedEpochProofEntry) Reset()         { *m = SealedEpochProofEntry{} }
func (m *SealedEpochProofEntry) String() string { return proto.CompactTextString(m) }
func (*SealedEpochProofEntry) ProtoMessage()    {}
func (*SealedEpochProofEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{2}
}
func (m *SealedEpochProofEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealedEpochProofEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealedEpochProofEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealedEpochProofEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealedEpochProofEntry.Merge(m, src)
}
func (m *SealedEpochProofEntry) XXX_Size() int {
	return m.Size()
}
func (m *SealedEpochProofEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SealedEpochProofEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SealedEpochProofEntry proto.InternalMessageInfo

func (m *SealedEpochProofEntry) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *SealedEpochProofEntry) GetProof() *ProofEpochSealed {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "babylon.zoneconcierge.v1.GenesisState")
	proto.RegisterType((*EpochChainInfoEntry)(nil), "babylon.zoneconcierge.v1.EpochChainInfoEntry")
	proto.RegisterType((*SealedEpochProofEntry)(nil), "babylon.zoneconcierge.v1.SealedEpochProofEntry")
}

func init() {
	proto.RegisterFile("babylon/zoneconcierge/v1/genesis.proto", fileDescriptor_56f290ad7c2c7dc7)
}

var fileDescriptor_56f290ad7c2c7dc7 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0xb3, 0x36, 0x4d, 0xe9, 0xa4, 0xa0, 0x8e, 0x55, 0x97, 0x1c, 0xd6, 0x18, 0x51, 0xa3,
	0xb4, 0xbb, 0xb4, 0xbd, 0x79, 0x10, 0x49, 0x2d, 0x1a, 0x04, 0x29, 0x93, 0x8a, 0xa0, 0xc8, 0x32,
	0xbb, 0xfb, 0x66, 0xb3, 0x90, 0xcc, 0x2c, 0x3b, 0xd3, 0xd0, 0x88, 0x57, 0xef, 0x7e, 0x07, 0xbf,
	0x4c, 0x8f, 0x3d, 0x7a, 0x12, 0x49, 0xbe, 0x88, 0xcc, 0x3b, 0x9b, 0x6a, 0xa5, 0x2b, 0xbd, 0x84,
	0xdd, 0x27, 0xcf, 0xf3, 0x7b, 0x9f, 0x9d, 0x3f, 0xe4, 0x51, 0xc4, 0xa3, 0xd9, 0x58, 0x8a, 0xe0,
	0xb3, 0x14, 0x10, 0x4b, 0x11, 0x67, 0x50, 0xa4, 0x10, 0x4c, 0x77, 0x82, 0x14, 0x04, 0xa8, 0x4c,
	0xf9, 0x79, 0x21, 0xb5, 0xa4, 0x6e, 0xe9, 0xf3, 0x2f, 0xf8, 0xfc, 0xe9, 0x4e, 0x6b, 0x33, 0x95,
	0xa9, 0x44, 0x53, 0x60, 0x9e, 0xac, 0xbf, 0xf5, 0xb0, 0x92, 0x9b, 0xf3, 0x82, 0x4f, 0x4a, 0x6c,
	0x6b, 0xab, 0xd2, 0x76, 0x71, 0x0e, 0xba, 0x3b, 0xdf, 0xeb, 0x64, 0xe3, 0x95, 0xad, 0x35, 0xd0,
	0x5c, 0x03, 0xbd, 0x4b, 0xd6, 0x72, 0x59, 0xe8, 0x30, 0x4b, 0x5c, 0xa7, 0xed, 0x74, 0xd7, 0x59,
	0xc3, 0xbc, 0xf6, 0x13, 0xfa, 0x9c, 0x34, 0xec, 0x1c, 0xf7, 0x5a, 0xdb, 0xe9, 0x36, 0x77, 0xdb,
	0x7e, 0x55, 0x7f, 0xff, 0x10, 0x7d, 0xbd, 0xfa, 0xe9, 0xcf, 0x7b, 0x35, 0x56, 0xa6, 0xe8, 0x4b,
	0xd2, 0x8c, 0x47, 0x3c, 0x13, 0x2a, 0xcc, 0xc4, 0x50, 0xba, 0x2b, 0xed, 0x95, 0x6e, 0x73, 0xf7,
	0x41, 0x35, 0x64, 0xdf, 0x98, 0xfb, 0x62, 0x28, 0x19, 0xb1, 0x39, 0xf3, 0x4c, 0x3f, 0x91, 0x3b,
	0xe7, 0x94, 0x04, 0x4e, 0x20, 0x09, 0x47, 0xc0, 0x13, 0x28, 0x94, 0x5b, 0x47, 0xe0, 0xe3, 0x6a,
	0x60, 0xdf, 0x06, 0x5e, 0xa3, 0x9f, 0x6d, 0x2e, 0xa1, 0x7f, 0x89, 0x8a, 0x7e, 0x24, 0xb4, 0xc4,
	0x43, 0x2e, 0xe3, 0x51, 0xd9, 0x75, 0x15, 0xd1, 0xdb, 0xd5, 0xe8, 0x03, 0x63, 0x3e, 0x2f, 0x7c,
	0x20, 0x74, 0x31, 0x63, 0x37, 0x2c, 0x08, 0xff, 0xb2, 0xdd, 0xdf, 0x91, 0x9b, 0x63, 0xae, 0x74,
	0xa8, 0x40, 0x98, 0x9f, 0x74, 0x02, 0x42, 0xbb, 0x0d, 0x5c, 0xcc, 0x27, 0xd5, 0xec, 0xde, 0xd1,
	0x3e, 0x92, 0x07, 0x36, 0xc0, 0xae, 0x1b, 0xc6, 0x00, 0x84, 0x2e, 0x05, 0xca, 0xc9, 0xa6, 0x02,
	0x3e, 0x86, 0x64, 0xd9, 0x39, 0x2f, 0xa4, 0x1c, 0x2a, 0x77, 0x0d, 0x5b, 0x07, 0xd5, 0xe4, 0x01,
	0xa6, 0xb0, 0xe0, 0xa1, 0x89, 0xd8, 0xde, 0x54, 0xfd, 0x91, 0x15, 0xea, 0xaa, 0xf3, 0xd5, 0x21,
	0xb7, 0x2e, 0xf9, 0x46, 0x7a, 0x9f, 0x6c, 0xe0, 0xcc, 0x50, 0x1c, 0x4f, 0x22, 0x28, 0xf0, 0xc4,
	0xd4, 0x59, 0x13, 0xb5, 0xb7, 0x28, 0xd1, 0x37, 0xc4, 0x6e, 0x9f, 0x5d, 0x49, 0x7b, 0x74, 0xb6,
	0xae, 0xb0, 0xeb, 0xef, 0x33, 0x6d, 0x5b, 0xb1, 0xf5, 0x78, 0xa9, 0x75, 0xbe, 0x90, 0xdb, 0x97,
	0x96, 0xbe, 0x4a, 0x91, 0x17, 0x64, 0x15, 0x17, 0xa6, 0xec, 0xf0, 0xf4, 0x3f, 0xc7, 0x17, 0xb9,
	0x26, 0x6a, 0x87, 0x31, 0x1b, 0xec, 0x1d, 0x9d, 0xce, 0x3d, 0xe7, 0x6c, 0xee, 0x39, 0xbf, 0xe6,
	0x9e, 0xf3, 0x6d, 0xe1, 0xd5, 0xce, 0x16, 0x5e, 0xed, 0xc7, 0xc2, 0xab, 0x7d, 0x78, 0x96, 0x66,
	0x7a, 0x74, 0x1c, 0xf9, 0xb1, 0x9c, 0x04, 0x25, 0x76, 0xcc, 0x23, 0xb5, 0x9d, 0xc9, 0xe5, 0x6b,
	0x30, 0xdd, 0x0b, 0x4e, 0xfe, 0xb9, 0x92, 0x7a, 0x96, 0x83, 0x8a, 0x1a, 0x78, 0x11, 0xf7, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xef, 0x55, 0xe4, 0xf4, 0x37, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SealedEpochsProofs) > 0 {
		for iNdEx := len(m.SealedEpochsProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SealedEpochsProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LastSentSegment != nil {
		{
			size, err := m.LastSentSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainsEpochsInfo) > 0 {
		for iNdEx := len(m.ChainsEpochsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainsEpochsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChainsIndexedHeaders) > 0 {
		for iNdEx := len(m.ChainsIndexedHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainsIndexedHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChainsInfo) > 0 {
		for iNdEx := len(m.ChainsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochChainInfoEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochChainInfoEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochChainInfoEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainInfo != nil {
		{
			size, err := m.ChainInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SealedEpochProofEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealedEpochProofEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealedEpochProofEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.ChainsInfo) > 0 {
		for _, e := range m.ChainsInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainsIndexedHeaders) > 0 {
		for _, e := range m.ChainsIndexedHeaders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainsEpochsInfo) > 0 {
		for _, e := range m.ChainsEpochsInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastSentSegment != nil {
		l = m.LastSentSegment.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.SealedEpochsProofs) > 0 {
		for _, e := range m.SealedEpochsProofs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *EpochChainInfoEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovGenesis(uint64(m.EpochNumber))
	}
	if m.ChainInfo != nil {
		l = m.ChainInfo.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *SealedEpochProofEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovGenesis(uint64(m.EpochNumber))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainsInfo = append(m.ChainsInfo, &ChainInfo{})
			if err := m.ChainsInfo[len(m.ChainsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainsIndexedHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainsIndexedHeaders = append(m.ChainsIndexedHeaders, &IndexedHeader{})
			if err := m.ChainsIndexedHeaders[len(m.ChainsIndexedHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainsEpochsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainsEpochsInfo = append(m.ChainsEpochsInfo, &EpochChainInfoEntry{})
			if err := m.ChainsEpochsInfo[len(m.ChainsEpochsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSentSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSentSegment == nil {
				m.LastSentSegment = &BTCChainSegment{}
			}
			if err := m.LastSentSegment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealedEpochsProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SealedEpochsProofs = append(m.SealedEpochsProofs, &SealedEpochProofEntry{})
			if err := m.SealedEpochsProofs[len(m.SealedEpochsProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochChainInfoEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochChainInfoEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochChainInfoEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainInfo == nil {
				m.ChainInfo = &ChainInfoWithProof{}
			}
			if err := m.ChainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealedEpochProofEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealedEpochProofEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealedEpochProofEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &ProofEpochSealed{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
