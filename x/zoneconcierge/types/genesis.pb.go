// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the zoneconcierge module's genesis state.
type GenesisState struct {
	// params holds the zoneconcierge module's parameters
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	// finalized_headers contains the latest IndexedHeaderWithProof for each consumer and each finalized epoch
	FinalizedHeaders []*FinalizedHeaderEntry `protobuf:"bytes,3,rep,name=finalized_headers,json=finalizedHeaders,proto3" json:"finalized_headers,omitempty"`
	// last_sent_segment is the last BTC chain segment
	// which was broadcasted to the other light clients
	LastSentSegment *BTCChainSegment `protobuf:"bytes,4,opt,name=last_sent_segment,json=lastSentSegment,proto3" json:"last_sent_segment,omitempty"`
	// sealed_epochs_proofs contains the proofs that each epoch is sealed
	SealedEpochsProofs []*SealedEpochProofEntry `protobuf:"bytes,5,rep,name=sealed_epochs_proofs,json=sealedEpochsProofs,proto3" json:"sealed_epochs_proofs,omitempty"`
	// bsn_btc_states contains the BTC header synchronization state for each BSN
	BsnBtcStates []*BSNBTCStateEntry `protobuf:"bytes,6,rep,name=bsn_btc_states,json=bsnBtcStates,proto3" json:"bsn_btc_states,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetFinalizedHeaders() []*FinalizedHeaderEntry {
	if m != nil {
		return m.FinalizedHeaders
	}
	return nil
}

func (m *GenesisState) GetLastSentSegment() *BTCChainSegment {
	if m != nil {
		return m.LastSentSegment
	}
	return nil
}

func (m *GenesisState) GetSealedEpochsProofs() []*SealedEpochProofEntry {
	if m != nil {
		return m.SealedEpochsProofs
	}
	return nil
}

func (m *GenesisState) GetBsnBtcStates() []*BSNBTCStateEntry {
	if m != nil {
		return m.BsnBtcStates
	}
	return nil
}

// FinalizedHeaderEntry is a helper for genesis state.
type FinalizedHeaderEntry struct {
	// epoch_number is the epoch number
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// consumer_id is the ID of the consumer
	ConsumerId string `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// header_with_proof is the latest IndexedHeaderWithProof for the consumer and epoch
	HeaderWithProof *IndexedHeaderWithProof `protobuf:"bytes,3,opt,name=header_with_proof,json=headerWithProof,proto3" json:"header_with_proof,omitempty"`
}

func (m *FinalizedHeaderEntry) Reset()         { *m = FinalizedHeaderEntry{} }
func (m *FinalizedHeaderEntry) String() string { return proto.CompactTextString(m) }
func (*FinalizedHeaderEntry) ProtoMessage()    {}
func (*FinalizedHeaderEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{1}
}
func (m *FinalizedHeaderEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedHeaderEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizedHeaderEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizedHeaderEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedHeaderEntry.Merge(m, src)
}
func (m *FinalizedHeaderEntry) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedHeaderEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedHeaderEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedHeaderEntry proto.InternalMessageInfo

func (m *FinalizedHeaderEntry) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *FinalizedHeaderEntry) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *FinalizedHeaderEntry) GetHeaderWithProof() *IndexedHeaderWithProof {
	if m != nil {
		return m.HeaderWithProof
	}
	return nil
}

// BSNBTCStateEntry is a helper for genesis state
type BSNBTCStateEntry struct {
	// consumer_id is the ID of the BSN
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// state is the BTC header synchronization state for the BSN
	State *BSNBTCState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *BSNBTCStateEntry) Reset()         { *m = BSNBTCStateEntry{} }
func (m *BSNBTCStateEntry) String() string { return proto.CompactTextString(m) }
func (*BSNBTCStateEntry) ProtoMessage()    {}
func (*BSNBTCStateEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{2}
}
func (m *BSNBTCStateEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BSNBTCStateEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BSNBTCStateEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BSNBTCStateEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BSNBTCStateEntry.Merge(m, src)
}
func (m *BSNBTCStateEntry) XXX_Size() int {
	return m.Size()
}
func (m *BSNBTCStateEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BSNBTCStateEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BSNBTCStateEntry proto.InternalMessageInfo

func (m *BSNBTCStateEntry) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *BSNBTCStateEntry) GetState() *BSNBTCState {
	if m != nil {
		return m.State
	}
	return nil
}

// SealedEpochProofEntry contains each epoch's proof that it is sealed
type SealedEpochProofEntry struct {
	// epoch_number is the number of the epoch
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// proof is the proof that an epoch is sealed by the sealer header
	Proof *ProofEpochSealed `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *SealedEpochProofEntry) Reset()         { *m = SealedEpochProofEntry{} }
func (m *SealedEpochProofEntry) String() string { return proto.CompactTextString(m) }
func (*SealedEpochProofEntry) ProtoMessage()    {}
func (*SealedEpochProofEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f290ad7c2c7dc7, []int{3}
}
func (m *SealedEpochProofEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SealedEpochProofEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SealedEpochProofEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SealedEpochProofEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SealedEpochProofEntry.Merge(m, src)
}
func (m *SealedEpochProofEntry) XXX_Size() int {
	return m.Size()
}
func (m *SealedEpochProofEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SealedEpochProofEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SealedEpochProofEntry proto.InternalMessageInfo

func (m *SealedEpochProofEntry) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *SealedEpochProofEntry) GetProof() *ProofEpochSealed {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "babylon.zoneconcierge.v1.GenesisState")
	proto.RegisterType((*FinalizedHeaderEntry)(nil), "babylon.zoneconcierge.v1.FinalizedHeaderEntry")
	proto.RegisterType((*BSNBTCStateEntry)(nil), "babylon.zoneconcierge.v1.BSNBTCStateEntry")
	proto.RegisterType((*SealedEpochProofEntry)(nil), "babylon.zoneconcierge.v1.SealedEpochProofEntry")
}

func init() {
	proto.RegisterFile("babylon/zoneconcierge/v1/genesis.proto", fileDescriptor_56f290ad7c2c7dc7)
}

var fileDescriptor_56f290ad7c2c7dc7 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x8b, 0xd3, 0x4e,
	0x1c, 0x6d, 0xb6, 0x3f, 0xf8, 0x7e, 0xa7, 0xc5, 0x6d, 0x43, 0x85, 0xd0, 0x43, 0xb6, 0x16, 0x56,
	0xaa, 0x68, 0xe2, 0xee, 0xde, 0x14, 0x44, 0x5a, 0x56, 0x5d, 0x0f, 0x4b, 0x49, 0x2b, 0x82, 0x0a,
	0x61, 0x92, 0x4c, 0x93, 0x81, 0x66, 0x26, 0xe4, 0x33, 0xad, 0xdb, 0xc5, 0x3f, 0xc2, 0x3f, 0xc7,
	0x8b, 0xf7, 0x3d, 0xee, 0xd1, 0x93, 0x48, 0xfb, 0x8f, 0x48, 0x66, 0x52, 0xa4, 0x75, 0xb3, 0xec,
	0x25, 0x24, 0x8f, 0xf7, 0xde, 0xbc, 0xcf, 0xfb, 0x64, 0xd0, 0x43, 0x0f, 0x7b, 0xcb, 0x19, 0x67,
	0xf6, 0x25, 0x67, 0xc4, 0xe7, 0xcc, 0xa7, 0x24, 0x0d, 0x89, 0xbd, 0x38, 0xb2, 0x43, 0xc2, 0x08,
	0x50, 0xb0, 0x92, 0x94, 0x0b, 0xae, 0x1b, 0x39, 0xcf, 0xda, 0xe2, 0x59, 0x8b, 0xa3, 0x4e, 0x3b,
	0xe4, 0x21, 0x97, 0x24, 0x3b, 0x7b, 0x53, 0xfc, 0xce, 0x61, 0xa1, 0x6f, 0x82, 0x53, 0x1c, 0xe7,
	0xb6, 0x9d, 0x27, 0x85, 0xb4, 0xed, 0x73, 0x24, 0xbb, 0xf7, 0xa3, 0x8c, 0x1a, 0x6f, 0x54, 0xac,
	0xb1, 0xc0, 0x82, 0xe8, 0x2f, 0x51, 0x4d, 0xd9, 0x19, 0x7b, 0x5d, 0xad, 0x5f, 0x3f, 0xee, 0x5a,
	0x45, 0x31, 0xad, 0x91, 0xe4, 0x0d, 0x2a, 0x57, 0xbf, 0x0e, 0x4a, 0x4e, 0xae, 0xd2, 0x3f, 0xa1,
	0xd6, 0x94, 0x32, 0x3c, 0xa3, 0x97, 0x24, 0x70, 0x23, 0x82, 0x03, 0x92, 0x82, 0x51, 0xee, 0x96,
	0xfb, 0xf5, 0x63, 0xab, 0xd8, 0xea, 0xf5, 0x46, 0xf2, 0x56, 0x2a, 0x4e, 0x99, 0x48, 0x97, 0x4e,
	0x73, 0xba, 0x8d, 0x82, 0xfe, 0x1e, 0xb5, 0x66, 0x18, 0x84, 0x0b, 0x84, 0x65, 0x8f, 0x30, 0x26,
	0x4c, 0x18, 0x15, 0x99, 0xf3, 0x51, 0xb1, 0xf9, 0x60, 0x32, 0x1c, 0x46, 0x98, 0xb2, 0xb1, 0x12,
	0x38, 0xfb, 0x99, 0xc7, 0x98, 0x30, 0x91, 0x03, 0x3a, 0x46, 0x6d, 0x20, 0x78, 0x46, 0x02, 0x97,
	0x24, 0xdc, 0x8f, 0xc0, 0x4d, 0x52, 0xce, 0xa7, 0x60, 0x54, 0x65, 0x6c, 0xbb, 0xd8, 0x79, 0x2c,
	0x55, 0xa7, 0x99, 0x68, 0x94, 0x49, 0x54, 0x6e, 0x1d, 0xfe, 0xc2, 0x20, 0x71, 0xd0, 0x47, 0xe8,
	0x9e, 0x07, 0xcc, 0xf5, 0x84, 0xef, 0x42, 0xd6, 0x33, 0x18, 0x35, 0x69, 0xfe, 0xf8, 0x96, 0xd8,
	0xe3, 0xf3, 0xc1, 0x64, 0x28, 0xb7, 0xa2, 0x7c, 0x1b, 0x1e, 0xb0, 0x81, 0xf0, 0x25, 0x02, 0xef,
	0x2a, 0xff, 0x69, 0xcd, 0xbd, 0xde, 0x77, 0x0d, 0xb5, 0x6f, 0x2a, 0x4f, 0x7f, 0x80, 0x1a, 0x72,
	0x18, 0x97, 0xcd, 0x63, 0x8f, 0xa4, 0x86, 0xd6, 0xd5, 0xfa, 0x15, 0xa7, 0x2e, 0xb1, 0x73, 0x09,
	0xe9, 0x07, 0xa8, 0xee, 0x73, 0x06, 0xf3, 0x98, 0xa4, 0x2e, 0x0d, 0xe4, 0xbe, 0xff, 0x77, 0xd0,
	0x06, 0x3a, 0x0b, 0xf4, 0xcf, 0xa8, 0xa5, 0x36, 0xe8, 0x7e, 0xa1, 0x22, 0x52, 0xad, 0x18, 0x65,
	0x59, 0xf7, 0xb3, 0xe2, 0xdc, 0x67, 0x2c, 0x20, 0x17, 0x9b, 0x30, 0x1f, 0xa8, 0x50, 0xd5, 0x38,
	0xfb, 0xd1, 0x36, 0xd0, 0x4b, 0x50, 0x73, 0x77, 0xc4, 0xdd, 0x48, 0xda, 0x3f, 0x91, 0x5e, 0xa0,
	0xaa, 0xec, 0x2f, 0xff, 0x3b, 0x0f, 0xef, 0x54, 0x9f, 0xa3, 0x34, 0xbd, 0xaf, 0xe8, 0xfe, 0x8d,
	0x1b, 0xbb, 0x4b, 0x59, 0xaf, 0x50, 0x55, 0xcd, 0xaf, 0x0e, 0xbe, 0x65, 0x6f, 0xca, 0x37, 0x93,
	0xaa, 0xc3, 0x1c, 0x25, 0x1c, 0x4c, 0xae, 0x56, 0xa6, 0x76, 0xbd, 0x32, 0xb5, 0xdf, 0x2b, 0x53,
	0xfb, 0xb6, 0x36, 0x4b, 0xd7, 0x6b, 0xb3, 0xf4, 0x73, 0x6d, 0x96, 0x3e, 0x3e, 0x0f, 0xa9, 0x88,
	0xe6, 0x9e, 0xe5, 0xf3, 0xd8, 0xce, 0x6d, 0x67, 0xd8, 0x83, 0xa7, 0x94, 0x6f, 0x3e, 0xed, 0xc5,
	0x89, 0x7d, 0xb1, 0x73, 0xa3, 0xc5, 0x32, 0x21, 0xe0, 0xd5, 0xe4, 0x3d, 0x3e, 0xf9, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x1d, 0x19, 0xdb, 0x8a, 0x76, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BsnBtcStates) > 0 {
		for iNdEx := len(m.BsnBtcStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BsnBtcStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SealedEpochsProofs) > 0 {
		for iNdEx := len(m.SealedEpochsProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SealedEpochsProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LastSentSegment != nil {
		{
			size, err := m.LastSentSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.FinalizedHeaders) > 0 {
		for iNdEx := len(m.FinalizedHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalizedHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *FinalizedHeaderEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedHeaderEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedHeaderEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeaderWithProof != nil {
		{
			size, err := m.HeaderWithProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BSNBTCStateEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BSNBTCStateEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BSNBTCStateEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SealedEpochProofEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SealedEpochProofEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SealedEpochProofEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.FinalizedHeaders) > 0 {
		for _, e := range m.FinalizedHeaders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastSentSegment != nil {
		l = m.LastSentSegment.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.SealedEpochsProofs) > 0 {
		for _, e := range m.SealedEpochsProofs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BsnBtcStates) > 0 {
		for _, e := range m.BsnBtcStates {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *FinalizedHeaderEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovGenesis(uint64(m.EpochNumber))
	}
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.HeaderWithProof != nil {
		l = m.HeaderWithProof.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *BSNBTCStateEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *SealedEpochProofEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovGenesis(uint64(m.EpochNumber))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedHeaders = append(m.FinalizedHeaders, &FinalizedHeaderEntry{})
			if err := m.FinalizedHeaders[len(m.FinalizedHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSentSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSentSegment == nil {
				m.LastSentSegment = &BTCChainSegment{}
			}
			if err := m.LastSentSegment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealedEpochsProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SealedEpochsProofs = append(m.SealedEpochsProofs, &SealedEpochProofEntry{})
			if err := m.SealedEpochsProofs[len(m.SealedEpochsProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsnBtcStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BsnBtcStates = append(m.BsnBtcStates, &BSNBTCStateEntry{})
			if err := m.BsnBtcStates[len(m.BsnBtcStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalizedHeaderEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedHeaderEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedHeaderEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderWithProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderWithProof == nil {
				m.HeaderWithProof = &IndexedHeaderWithProof{}
			}
			if err := m.HeaderWithProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BSNBTCStateEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BSNBTCStateEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BSNBTCStateEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &BSNBTCState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SealedEpochProofEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SealedEpochProofEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SealedEpochProofEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &ProofEpochSealed{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
