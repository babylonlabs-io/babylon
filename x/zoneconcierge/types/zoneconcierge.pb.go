// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/v1/zoneconcierge.proto

package types

import (
	fmt "fmt"
	types1 "github.com/babylonlabs-io/babylon/v4/x/btccheckpoint/types"
	types2 "github.com/babylonlabs-io/babylon/v4/x/btclightclient/types"
	types "github.com/babylonlabs-io/babylon/v4/x/checkpointing/types"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IndexedHeader is the metadata of a BSN header
type IndexedHeader struct {
	// consumer_id is the unique ID of the consumer
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// hash is the hash of this header
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// height is the height of this header on the BSN's ledger.
	// (hash, height) jointly provide the position of the header on the BSN ledger
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// time is the timestamp of this header on the BSN's ledger.
	// It is needed for a BSN to unbond all mature validators/delegations before
	// this timestamp, when this header is BTC-finalised
	Time *time.Time `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time,omitempty"`
	// babylon_header_hash is the hash of the babylon block that includes this BSN
	// header
	BabylonHeaderHash []byte `protobuf:"bytes,5,opt,name=babylon_header_hash,json=babylonHeaderHash,proto3" json:"babylon_header_hash,omitempty"`
	// babylon_header_height is the height of the babylon block that includes this
	// BSN header
	BabylonHeaderHeight uint64 `protobuf:"varint,6,opt,name=babylon_header_height,json=babylonHeaderHeight,proto3" json:"babylon_header_height,omitempty"`
	// epoch is the epoch number of this header on Babylon ledger
	BabylonEpoch uint64 `protobuf:"varint,7,opt,name=babylon_epoch,json=babylonEpoch,proto3" json:"babylon_epoch,omitempty"`
	// babylon_tx_hash is the hash of the tx that includes this header
	// (babylon_block_height, babylon_tx_hash) jointly provides the position of
	// the header on Babylon ledger
	BabylonTxHash []byte `protobuf:"bytes,8,opt,name=babylon_tx_hash,json=babylonTxHash,proto3" json:"babylon_tx_hash,omitempty"`
}

func (m *IndexedHeader) Reset()         { *m = IndexedHeader{} }
func (m *IndexedHeader) String() string { return proto.CompactTextString(m) }
func (*IndexedHeader) ProtoMessage()    {}
func (*IndexedHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab886e1868e5c5cd, []int{0}
}
func (m *IndexedHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedHeader.Merge(m, src)
}
func (m *IndexedHeader) XXX_Size() int {
	return m.Size()
}
func (m *IndexedHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedHeader.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedHeader proto.InternalMessageInfo

func (m *IndexedHeader) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *IndexedHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *IndexedHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IndexedHeader) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *IndexedHeader) GetBabylonHeaderHash() []byte {
	if m != nil {
		return m.BabylonHeaderHash
	}
	return nil
}

func (m *IndexedHeader) GetBabylonHeaderHeight() uint64 {
	if m != nil {
		return m.BabylonHeaderHeight
	}
	return 0
}

func (m *IndexedHeader) GetBabylonEpoch() uint64 {
	if m != nil {
		return m.BabylonEpoch
	}
	return 0
}

func (m *IndexedHeader) GetBabylonTxHash() []byte {
	if m != nil {
		return m.BabylonTxHash
	}
	return nil
}

// IndexedHeaderWithProof is an indexed header with a proof that the header is
// included in the epoch
type IndexedHeaderWithProof struct {
	Header *IndexedHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// proof is an inclusion proof that the header
	// is committed to the `app_hash` of the sealer header of header.babylon_epoch
	Proof *crypto.ProofOps `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *IndexedHeaderWithProof) Reset()         { *m = IndexedHeaderWithProof{} }
func (m *IndexedHeaderWithProof) String() string { return proto.CompactTextString(m) }
func (*IndexedHeaderWithProof) ProtoMessage()    {}
func (*IndexedHeaderWithProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab886e1868e5c5cd, []int{1}
}
func (m *IndexedHeaderWithProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedHeaderWithProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedHeaderWithProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedHeaderWithProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedHeaderWithProof.Merge(m, src)
}
func (m *IndexedHeaderWithProof) XXX_Size() int {
	return m.Size()
}
func (m *IndexedHeaderWithProof) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedHeaderWithProof.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedHeaderWithProof proto.InternalMessageInfo

func (m *IndexedHeaderWithProof) GetHeader() *IndexedHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *IndexedHeaderWithProof) GetProof() *crypto.ProofOps {
	if m != nil {
		return m.Proof
	}
	return nil
}

// ProofEpochSealed is the proof that an epoch is sealed by the sealer header,
// i.e., the 2nd header of the next epoch With the access of metadata
// - Metadata of this epoch, which includes the sealer header
// - Raw checkpoint of this epoch
// The verifier can perform the following verification rules:
// - The raw checkpoint's `app_hash` is same as in the sealer header
// - More than 2/3 (in voting power) validators in the validator set of this
// epoch have signed `app_hash` of the sealer header
// - The epoch metadata is committed to the `app_hash` of the sealer header
// - The validator set is committed to the `app_hash` of the sealer header
type ProofEpochSealed struct {
	// validator_set is the validator set of the sealed epoch
	// This validator set has generated a BLS multisig on `app_hash` of
	// the sealer header
	ValidatorSet []*types.ValidatorWithBlsKey `protobuf:"bytes,1,rep,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty"`
	// proof_epoch_info is the Merkle proof that the epoch's metadata is committed
	// to `app_hash` of the sealer header
	ProofEpochInfo *crypto.ProofOps `protobuf:"bytes,2,opt,name=proof_epoch_info,json=proofEpochInfo,proto3" json:"proof_epoch_info,omitempty"`
	// proof_epoch_info is the Merkle proof that the epoch's validator set is
	// committed to `app_hash` of the sealer header
	ProofEpochValSet *crypto.ProofOps `protobuf:"bytes,3,opt,name=proof_epoch_val_set,json=proofEpochValSet,proto3" json:"proof_epoch_val_set,omitempty"`
}

func (m *ProofEpochSealed) Reset()         { *m = ProofEpochSealed{} }
func (m *ProofEpochSealed) String() string { return proto.CompactTextString(m) }
func (*ProofEpochSealed) ProtoMessage()    {}
func (*ProofEpochSealed) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab886e1868e5c5cd, []int{2}
}
func (m *ProofEpochSealed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofEpochSealed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofEpochSealed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofEpochSealed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofEpochSealed.Merge(m, src)
}
func (m *ProofEpochSealed) XXX_Size() int {
	return m.Size()
}
func (m *ProofEpochSealed) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofEpochSealed.DiscardUnknown(m)
}

var xxx_messageInfo_ProofEpochSealed proto.InternalMessageInfo

func (m *ProofEpochSealed) GetValidatorSet() []*types.ValidatorWithBlsKey {
	if m != nil {
		return m.ValidatorSet
	}
	return nil
}

func (m *ProofEpochSealed) GetProofEpochInfo() *crypto.ProofOps {
	if m != nil {
		return m.ProofEpochInfo
	}
	return nil
}

func (m *ProofEpochSealed) GetProofEpochValSet() *crypto.ProofOps {
	if m != nil {
		return m.ProofEpochValSet
	}
	return nil
}

// ProofFinalizedHeader is a set of proofs that attest a header is
// BTC-finalised
type ProofFinalizedHeader struct {
	// proof_epoch_sealed is the proof that the epoch is sealed
	ProofEpochSealed *ProofEpochSealed `protobuf:"bytes,1,opt,name=proof_epoch_sealed,json=proofEpochSealed,proto3" json:"proof_epoch_sealed,omitempty"`
	// proof_epoch_submitted is the proof that the epoch's checkpoint is included
	// in BTC ledger It is the two TransactionInfo in the best (i.e., earliest)
	// checkpoint submission
	ProofEpochSubmitted []*types1.TransactionInfo `protobuf:"bytes,2,rep,name=proof_epoch_submitted,json=proofEpochSubmitted,proto3" json:"proof_epoch_submitted,omitempty"`
	// proof_consumer_header_in_epoch is the proof that the consumer header is included in the epoch
	ProofConsumerHeaderInEpoch *crypto.ProofOps `protobuf:"bytes,3,opt,name=proof_consumer_header_in_epoch,json=proofConsumerHeaderInEpoch,proto3" json:"proof_consumer_header_in_epoch,omitempty"`
}

func (m *ProofFinalizedHeader) Reset()         { *m = ProofFinalizedHeader{} }
func (m *ProofFinalizedHeader) String() string { return proto.CompactTextString(m) }
func (*ProofFinalizedHeader) ProtoMessage()    {}
func (*ProofFinalizedHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab886e1868e5c5cd, []int{3}
}
func (m *ProofFinalizedHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofFinalizedHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofFinalizedHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofFinalizedHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofFinalizedHeader.Merge(m, src)
}
func (m *ProofFinalizedHeader) XXX_Size() int {
	return m.Size()
}
func (m *ProofFinalizedHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofFinalizedHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProofFinalizedHeader proto.InternalMessageInfo

func (m *ProofFinalizedHeader) GetProofEpochSealed() *ProofEpochSealed {
	if m != nil {
		return m.ProofEpochSealed
	}
	return nil
}

func (m *ProofFinalizedHeader) GetProofEpochSubmitted() []*types1.TransactionInfo {
	if m != nil {
		return m.ProofEpochSubmitted
	}
	return nil
}

func (m *ProofFinalizedHeader) GetProofConsumerHeaderInEpoch() *crypto.ProofOps {
	if m != nil {
		return m.ProofConsumerHeaderInEpoch
	}
	return nil
}

// Btc light client chain segment grown during last finalized epoch
type BTCChainSegment struct {
	BtcHeaders []*types2.BTCHeaderInfo `protobuf:"bytes,1,rep,name=btc_headers,json=btcHeaders,proto3" json:"btc_headers,omitempty"`
}

func (m *BTCChainSegment) Reset()         { *m = BTCChainSegment{} }
func (m *BTCChainSegment) String() string { return proto.CompactTextString(m) }
func (*BTCChainSegment) ProtoMessage()    {}
func (*BTCChainSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab886e1868e5c5cd, []int{4}
}
func (m *BTCChainSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCChainSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCChainSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCChainSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCChainSegment.Merge(m, src)
}
func (m *BTCChainSegment) XXX_Size() int {
	return m.Size()
}
func (m *BTCChainSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCChainSegment.DiscardUnknown(m)
}

var xxx_messageInfo_BTCChainSegment proto.InternalMessageInfo

func (m *BTCChainSegment) GetBtcHeaders() []*types2.BTCHeaderInfo {
	if m != nil {
		return m.BtcHeaders
	}
	return nil
}

// BSNBTCState stores per-BSN BTC synchronization state
type BSNBTCState struct {
	// last_sent_segment is the last segment of BTC headers sent to this BSN
	// This is used to determine the next headers to send and handle reorgs
	LastSentSegment *BTCChainSegment `protobuf:"bytes,1,opt,name=last_sent_segment,json=lastSentSegment,proto3" json:"last_sent_segment,omitempty"`
}

func (m *BSNBTCState) Reset()         { *m = BSNBTCState{} }
func (m *BSNBTCState) String() string { return proto.CompactTextString(m) }
func (*BSNBTCState) ProtoMessage()    {}
func (*BSNBTCState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab886e1868e5c5cd, []int{5}
}
func (m *BSNBTCState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BSNBTCState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BSNBTCState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BSNBTCState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BSNBTCState.Merge(m, src)
}
func (m *BSNBTCState) XXX_Size() int {
	return m.Size()
}
func (m *BSNBTCState) XXX_DiscardUnknown() {
	xxx_messageInfo_BSNBTCState.DiscardUnknown(m)
}

var xxx_messageInfo_BSNBTCState proto.InternalMessageInfo

func (m *BSNBTCState) GetLastSentSegment() *BTCChainSegment {
	if m != nil {
		return m.LastSentSegment
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexedHeader)(nil), "babylon.zoneconcierge.v1.IndexedHeader")
	proto.RegisterType((*IndexedHeaderWithProof)(nil), "babylon.zoneconcierge.v1.IndexedHeaderWithProof")
	proto.RegisterType((*ProofEpochSealed)(nil), "babylon.zoneconcierge.v1.ProofEpochSealed")
	proto.RegisterType((*ProofFinalizedHeader)(nil), "babylon.zoneconcierge.v1.ProofFinalizedHeader")
	proto.RegisterType((*BTCChainSegment)(nil), "babylon.zoneconcierge.v1.BTCChainSegment")
	proto.RegisterType((*BSNBTCState)(nil), "babylon.zoneconcierge.v1.BSNBTCState")
}

func init() {
	proto.RegisterFile("babylon/zoneconcierge/v1/zoneconcierge.proto", fileDescriptor_ab886e1868e5c5cd)
}

var fileDescriptor_ab886e1868e5c5cd = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x41, 0x4f, 0xe3, 0x46,
	0x18, 0xc5, 0x21, 0xd0, 0x76, 0x02, 0x05, 0x26, 0x80, 0xac, 0x54, 0x0d, 0x51, 0x2a, 0xd1, 0x50,
	0x15, 0x5b, 0x49, 0x39, 0xf5, 0x52, 0x29, 0x11, 0x15, 0x69, 0xa5, 0xb6, 0x72, 0x52, 0x5a, 0x55,
	0xad, 0xac, 0xb1, 0x3d, 0xb1, 0x47, 0x38, 0x33, 0x96, 0x3d, 0xb1, 0x12, 0x7e, 0x43, 0x0f, 0xfc,
	0x94, 0xfd, 0x0f, 0x7b, 0xd9, 0x23, 0xc7, 0xbd, 0xed, 0x0a, 0x7e, 0xc5, 0xde, 0x56, 0x33, 0x1e,
	0x1b, 0x3b, 0x12, 0x5a, 0x2e, 0x91, 0xe7, 0x9b, 0x37, 0xef, 0x7b, 0xf3, 0xbe, 0x67, 0x07, 0x7c,
	0xef, 0x20, 0x67, 0x15, 0x32, 0x6a, 0xde, 0x32, 0x8a, 0x5d, 0x46, 0x5d, 0x82, 0x63, 0x1f, 0x9b,
	0x69, 0xbf, 0x5a, 0x30, 0xa2, 0x98, 0x71, 0x06, 0x75, 0x85, 0x36, 0xaa, 0x9b, 0x69, 0xbf, 0x75,
	0xe8, 0x33, 0x9f, 0x49, 0x90, 0x29, 0x9e, 0x32, 0x7c, 0xeb, 0xc4, 0x67, 0xcc, 0x0f, 0xb1, 0x29,
	0x57, 0xce, 0x62, 0x66, 0x72, 0x32, 0xc7, 0x09, 0x47, 0xf3, 0x48, 0x01, 0xbe, 0xe6, 0x98, 0x7a,
	0x38, 0x9e, 0x13, 0xca, 0x4d, 0x37, 0x5e, 0x45, 0x9c, 0x09, 0x2c, 0x9b, 0xa9, 0xed, 0x42, 0x9d,
	0xc3, 0x5d, 0x37, 0xc0, 0xee, 0x4d, 0xc4, 0x04, 0x32, 0xed, 0x57, 0x0b, 0x0a, 0x7d, 0x9a, 0xa3,
	0x9f, 0x76, 0x08, 0xf5, 0x25, 0x3a, 0x4c, 0xec, 0x1b, 0xbc, 0x52, 0x38, 0xa3, 0xc4, 0x1a, 0x12,
	0x3f, 0x10, 0xbf, 0xb8, 0xa0, 0x2d, 0x55, 0x32, 0x7c, 0xf7, 0x75, 0x0d, 0xec, 0x8e, 0xa9, 0x87,
	0x97, 0xd8, 0xbb, 0xc2, 0xc8, 0xc3, 0x31, 0x3c, 0x01, 0x0d, 0x97, 0xd1, 0x64, 0x31, 0xc7, 0xb1,
	0x4d, 0x3c, 0x5d, 0xeb, 0x68, 0xbd, 0x2f, 0x2c, 0x90, 0x97, 0xc6, 0x1e, 0x84, 0xa0, 0x1e, 0xa0,
	0x24, 0xd0, 0x6b, 0x1d, 0xad, 0xb7, 0x63, 0xc9, 0x67, 0x78, 0x0c, 0xb6, 0x03, 0x2c, 0xc8, 0xf5,
	0xcd, 0x8e, 0xd6, 0xab, 0x5b, 0x6a, 0x05, 0x2f, 0x40, 0x5d, 0xd8, 0xa2, 0xd7, 0x3b, 0x5a, 0xaf,
	0x31, 0x68, 0x19, 0x99, 0x67, 0x46, 0xee, 0x99, 0x31, 0xcd, 0x3d, 0x1b, 0xd6, 0xef, 0xde, 0x9d,
	0x68, 0x96, 0x44, 0x43, 0x03, 0x34, 0xd5, 0x35, 0xec, 0x40, 0x8a, 0xb2, 0x65, 0xc3, 0x2d, 0xd9,
	0xf0, 0x40, 0x6d, 0x65, 0x72, 0xaf, 0x44, 0xf7, 0x01, 0x38, 0x5a, 0xc7, 0x67, 0x62, 0xb6, 0xa5,
	0x98, 0x66, 0xf5, 0x44, 0xa6, 0xec, 0x1b, 0xb0, 0x9b, 0x9f, 0xc1, 0x11, 0x73, 0x03, 0xfd, 0x33,
	0x89, 0xdd, 0x51, 0xc5, 0x4b, 0x51, 0x83, 0xa7, 0x60, 0x2f, 0x07, 0xf1, 0x65, 0x26, 0xe2, 0x73,
	0x29, 0x22, 0x3f, 0x3b, 0x5d, 0x0a, 0x01, 0xdd, 0xff, 0x35, 0x70, 0x5c, 0x71, 0xf1, 0x2f, 0xc2,
	0x83, 0x3f, 0xc4, 0xb0, 0xe1, 0x4f, 0xc2, 0x19, 0x51, 0x92, 0x4e, 0x36, 0x06, 0xdf, 0x1a, 0xcf,
	0xe5, 0xcc, 0xa8, 0x30, 0x58, 0xea, 0x18, 0xec, 0x83, 0x2d, 0x19, 0x1b, 0xe9, 0x77, 0x63, 0xf0,
	0x95, 0xf1, 0x14, 0x2b, 0x23, 0x8b, 0x95, 0x21, 0x3b, 0xfd, 0x1e, 0x25, 0x56, 0x86, 0xec, 0x7e,
	0xd0, 0xc0, 0xbe, 0xac, 0xc9, 0x5b, 0x4c, 0x30, 0x0a, 0xb1, 0x07, 0x2d, 0xb0, 0x9b, 0xa2, 0x90,
	0x78, 0x88, 0xb3, 0xd8, 0x4e, 0x30, 0xd7, 0xb5, 0xce, 0x66, 0xaf, 0x31, 0x38, 0x2f, 0xf4, 0x54,
	0x92, 0x25, 0xf4, 0x5c, 0xe7, 0x70, 0x71, 0x9b, 0x61, 0x98, 0xfc, 0x8a, 0x57, 0xd6, 0x4e, 0xc1,
	0x31, 0xc1, 0x1c, 0x5e, 0x82, 0x7d, 0xd9, 0x31, 0xb3, 0xd0, 0x26, 0x74, 0xc6, 0x5e, 0x22, 0xf3,
	0xcb, 0xa8, 0x10, 0x37, 0xa6, 0x33, 0x06, 0x7f, 0x01, 0xcd, 0x32, 0x4d, 0x8a, 0x42, 0x29, 0x70,
	0xf3, 0xd3, 0x4c, 0xfb, 0x4f, 0x4c, 0xd7, 0x28, 0x9c, 0x60, 0xde, 0x7d, 0x55, 0x03, 0x87, 0x72,
	0xfb, 0x67, 0x42, 0x51, 0x48, 0x6e, 0x8b, 0x5c, 0xff, 0x0d, 0x60, 0xb9, 0x49, 0x22, 0x5d, 0x51,
	0x43, 0xf9, 0xee, 0xf9, 0xa1, 0xac, 0xfb, 0x58, 0x6e, 0xa9, 0x9c, 0xfd, 0x0f, 0x1c, 0x55, 0x98,
	0x17, 0xce, 0x9c, 0x70, 0x8e, 0x3d, 0xbd, 0x26, 0x1d, 0x3e, 0x2b, 0xc8, 0xab, 0x2f, 0x76, 0xda,
	0x37, 0xa6, 0x31, 0xa2, 0x09, 0x72, 0x39, 0x61, 0x54, 0x18, 0x61, 0x35, 0x4b, 0xdc, 0x39, 0x0b,
	0xb4, 0x41, 0x3b, 0xa3, 0x2f, 0x5e, 0x4b, 0x15, 0x72, 0x92, 0x47, 0xf7, 0x05, 0x46, 0xb5, 0x24,
	0xc5, 0x48, 0x31, 0x64, 0x96, 0x8c, 0xb3, 0x94, 0x77, 0xff, 0x05, 0x7b, 0xc3, 0xe9, 0x68, 0x14,
	0x20, 0x42, 0x27, 0xd8, 0x9f, 0x63, 0xca, 0xe1, 0x18, 0x34, 0x1c, 0xee, 0xaa, 0x46, 0x89, 0x8a,
	0x4a, 0xaf, 0x7c, 0x91, 0xf2, 0xa7, 0x24, 0xed, 0x1b, 0xc3, 0xe9, 0x28, 0x27, 0x9d, 0x31, 0x0b,
	0x38, 0xdc, 0xcd, 0x96, 0x49, 0xd7, 0x03, 0x8d, 0xe1, 0xe4, 0xb7, 0xe1, 0x74, 0x34, 0xe1, 0x88,
	0x63, 0xf8, 0x27, 0x38, 0x08, 0x51, 0xc2, 0xed, 0x04, 0x53, 0xf1, 0x23, 0xdb, 0xa9, 0x29, 0x9c,
	0x3d, 0x3f, 0x85, 0x35, 0x7d, 0xd6, 0x9e, 0xe0, 0x98, 0x60, 0xca, 0x55, 0x61, 0x38, 0x7d, 0xf3,
	0xd0, 0xd6, 0xee, 0x1f, 0xda, 0xda, 0xfb, 0x87, 0xb6, 0x76, 0xf7, 0xd8, 0xde, 0xb8, 0x7f, 0x6c,
	0x6f, 0xbc, 0x7d, 0x6c, 0x6f, 0xfc, 0xf3, 0xa3, 0x4f, 0x78, 0xb0, 0x70, 0x0c, 0x97, 0xcd, 0x4d,
	0xc5, 0x1f, 0x22, 0x27, 0x39, 0x27, 0x2c, 0x5f, 0x9a, 0xe9, 0x85, 0xb9, 0x5c, 0xfb, 0x93, 0xe0,
	0xab, 0x08, 0x27, 0xce, 0xb6, 0xfc, 0x50, 0xfd, 0xf0, 0x31, 0x00, 0x00, 0xff, 0xff, 0x79, 0xc4,
	0xe3, 0x8f, 0x4a, 0x06, 0x00, 0x00,
}

func (m *IndexedHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BabylonTxHash) > 0 {
		i -= len(m.BabylonTxHash)
		copy(dAtA[i:], m.BabylonTxHash)
		i = encodeVarintZoneconcierge(dAtA, i, uint64(len(m.BabylonTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.BabylonEpoch != 0 {
		i = encodeVarintZoneconcierge(dAtA, i, uint64(m.BabylonEpoch))
		i--
		dAtA[i] = 0x38
	}
	if m.BabylonHeaderHeight != 0 {
		i = encodeVarintZoneconcierge(dAtA, i, uint64(m.BabylonHeaderHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BabylonHeaderHash) > 0 {
		i -= len(m.BabylonHeaderHash)
		copy(dAtA[i:], m.BabylonHeaderHash)
		i = encodeVarintZoneconcierge(dAtA, i, uint64(len(m.BabylonHeaderHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Time != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Time):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintZoneconcierge(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintZoneconcierge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintZoneconcierge(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintZoneconcierge(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexedHeaderWithProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedHeaderWithProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedHeaderWithProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProofEpochSealed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofEpochSealed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofEpochSealed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofEpochValSet != nil {
		{
			size, err := m.ProofEpochValSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ProofEpochInfo != nil {
		{
			size, err := m.ProofEpochInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorSet) > 0 {
		for iNdEx := len(m.ValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProofFinalizedHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofFinalizedHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofFinalizedHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofConsumerHeaderInEpoch != nil {
		{
			size, err := m.ProofConsumerHeaderInEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProofEpochSubmitted) > 0 {
		for iNdEx := len(m.ProofEpochSubmitted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProofEpochSubmitted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProofEpochSealed != nil {
		{
			size, err := m.ProofEpochSealed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCChainSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCChainSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCChainSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcHeaders) > 0 {
		for iNdEx := len(m.BtcHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BSNBTCState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BSNBTCState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BSNBTCState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSentSegment != nil {
		{
			size, err := m.LastSentSegment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZoneconcierge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZoneconcierge(dAtA []byte, offset int, v uint64) int {
	offset -= sovZoneconcierge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexedHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovZoneconcierge(uint64(m.Height))
	}
	if m.Time != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	l = len(m.BabylonHeaderHash)
	if l > 0 {
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if m.BabylonHeaderHeight != 0 {
		n += 1 + sovZoneconcierge(uint64(m.BabylonHeaderHeight))
	}
	if m.BabylonEpoch != 0 {
		n += 1 + sovZoneconcierge(uint64(m.BabylonEpoch))
	}
	l = len(m.BabylonTxHash)
	if l > 0 {
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	return n
}

func (m *IndexedHeaderWithProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	return n
}

func (m *ProofEpochSealed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSet) > 0 {
		for _, e := range m.ValidatorSet {
			l = e.Size()
			n += 1 + l + sovZoneconcierge(uint64(l))
		}
	}
	if m.ProofEpochInfo != nil {
		l = m.ProofEpochInfo.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if m.ProofEpochValSet != nil {
		l = m.ProofEpochValSet.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	return n
}

func (m *ProofFinalizedHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProofEpochSealed != nil {
		l = m.ProofEpochSealed.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	if len(m.ProofEpochSubmitted) > 0 {
		for _, e := range m.ProofEpochSubmitted {
			l = e.Size()
			n += 1 + l + sovZoneconcierge(uint64(l))
		}
	}
	if m.ProofConsumerHeaderInEpoch != nil {
		l = m.ProofConsumerHeaderInEpoch.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	return n
}

func (m *BTCChainSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcHeaders) > 0 {
		for _, e := range m.BtcHeaders {
			l = e.Size()
			n += 1 + l + sovZoneconcierge(uint64(l))
		}
	}
	return n
}

func (m *BSNBTCState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastSentSegment != nil {
		l = m.LastSentSegment.Size()
		n += 1 + l + sovZoneconcierge(uint64(l))
	}
	return n
}

func sovZoneconcierge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZoneconcierge(x uint64) (n int) {
	return sovZoneconcierge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexedHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonHeaderHash = append(m.BabylonHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BabylonHeaderHash == nil {
				m.BabylonHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonHeaderHeight", wireType)
			}
			m.BabylonHeaderHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabylonHeaderHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonEpoch", wireType)
			}
			m.BabylonEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabylonEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonTxHash = append(m.BabylonTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BabylonTxHash == nil {
				m.BabylonTxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedHeaderWithProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedHeaderWithProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedHeaderWithProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &IndexedHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &crypto.ProofOps{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofEpochSealed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofEpochSealed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofEpochSealed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSet = append(m.ValidatorSet, &types.ValidatorWithBlsKey{})
			if err := m.ValidatorSet[len(m.ValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochInfo == nil {
				m.ProofEpochInfo = &crypto.ProofOps{}
			}
			if err := m.ProofEpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochValSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochValSet == nil {
				m.ProofEpochValSet = &crypto.ProofOps{}
			}
			if err := m.ProofEpochValSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofFinalizedHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofFinalizedHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofFinalizedHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochSealed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochSealed == nil {
				m.ProofEpochSealed = &ProofEpochSealed{}
			}
			if err := m.ProofEpochSealed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochSubmitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofEpochSubmitted = append(m.ProofEpochSubmitted, &types1.TransactionInfo{})
			if err := m.ProofEpochSubmitted[len(m.ProofEpochSubmitted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofConsumerHeaderInEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofConsumerHeaderInEpoch == nil {
				m.ProofConsumerHeaderInEpoch = &crypto.ProofOps{}
			}
			if err := m.ProofConsumerHeaderInEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCChainSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCChainSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCChainSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcHeaders = append(m.BtcHeaders, &types2.BTCHeaderInfo{})
			if err := m.BtcHeaders[len(m.BtcHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BSNBTCState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BSNBTCState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BSNBTCState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSentSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSentSegment == nil {
				m.LastSentSegment = &BTCChainSegment{}
			}
			if err := m.LastSentSegment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneconcierge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZoneconcierge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZoneconcierge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZoneconcierge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZoneconcierge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZoneconcierge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZoneconcierge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZoneconcierge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZoneconcierge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZoneconcierge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZoneconcierge = fmt.Errorf("proto: unexpected end of group")
)
