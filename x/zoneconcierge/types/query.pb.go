// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/zoneconcierge/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types2 "github.com/babylonlabs-io/babylon/v4/x/btccheckpoint/types"
	types3 "github.com/babylonlabs-io/babylon/v4/x/btclightclient/types"
	types1 "github.com/babylonlabs-io/babylon/v4/x/checkpointing/types"
	types "github.com/babylonlabs-io/babylon/v4/x/epoching/types"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryFinalizedBSNsInfoRequest is request type for the
// Query/FinalizedBSNsInfo RPC method.
type QueryFinalizedBSNsInfoRequest struct {
	// consumer_ids is the list of ids of BSNs
	ConsumerIds []string `protobuf:"bytes,1,rep,name=consumer_ids,json=consumerIds,proto3" json:"consumer_ids,omitempty"`
	// prove indicates whether the querier wants to get proofs of this timestamp
	Prove bool `protobuf:"varint,2,opt,name=prove,proto3" json:"prove,omitempty"`
}

func (m *QueryFinalizedBSNsInfoRequest) Reset()         { *m = QueryFinalizedBSNsInfoRequest{} }
func (m *QueryFinalizedBSNsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedBSNsInfoRequest) ProtoMessage()    {}
func (*QueryFinalizedBSNsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{2}
}
func (m *QueryFinalizedBSNsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedBSNsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedBSNsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedBSNsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedBSNsInfoRequest.Merge(m, src)
}
func (m *QueryFinalizedBSNsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedBSNsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedBSNsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedBSNsInfoRequest proto.InternalMessageInfo

func (m *QueryFinalizedBSNsInfoRequest) GetConsumerIds() []string {
	if m != nil {
		return m.ConsumerIds
	}
	return nil
}

func (m *QueryFinalizedBSNsInfoRequest) GetProve() bool {
	if m != nil {
		return m.Prove
	}
	return false
}

// QueryFinalizedBSNsInfoResponse is response type for the
// Query/FinalizedBSNsInfo RPC method.
type QueryFinalizedBSNsInfoResponse struct {
	FinalizedBsnsData []*FinalizedBSNData `protobuf:"bytes,1,rep,name=finalized_bsns_data,json=finalizedBsnsData,proto3" json:"finalized_bsns_data,omitempty"`
}

func (m *QueryFinalizedBSNsInfoResponse) Reset()         { *m = QueryFinalizedBSNsInfoResponse{} }
func (m *QueryFinalizedBSNsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedBSNsInfoResponse) ProtoMessage()    {}
func (*QueryFinalizedBSNsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{3}
}
func (m *QueryFinalizedBSNsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedBSNsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedBSNsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedBSNsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedBSNsInfoResponse.Merge(m, src)
}
func (m *QueryFinalizedBSNsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedBSNsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedBSNsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedBSNsInfoResponse proto.InternalMessageInfo

func (m *QueryFinalizedBSNsInfoResponse) GetFinalizedBsnsData() []*FinalizedBSNData {
	if m != nil {
		return m.FinalizedBsnsData
	}
	return nil
}

// FinalizedBSNData contains the finalized BSN data for a BSN
type FinalizedBSNData struct {
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// The latest finalized header for this BSN
	LatestFinalizedHeader *IndexedHeader `protobuf:"bytes,2,opt,name=latest_finalized_header,json=latestFinalizedHeader,proto3" json:"latest_finalized_header,omitempty"`
	// The epoch in which this header was finalized
	EpochInfo *types.Epoch `protobuf:"bytes,3,opt,name=epoch_info,json=epochInfo,proto3" json:"epoch_info,omitempty"`
	// The raw checkpoint of this epoch
	RawCheckpoint *types1.RawCheckpoint `protobuf:"bytes,4,opt,name=raw_checkpoint,json=rawCheckpoint,proto3" json:"raw_checkpoint,omitempty"`
	// The submission key for the checkpoint
	BtcSubmissionKey *types2.SubmissionKey `protobuf:"bytes,5,opt,name=btc_submission_key,json=btcSubmissionKey,proto3" json:"btc_submission_key,omitempty"`
	// Proofs of finality
	Proof *ProofFinalizedHeader `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *FinalizedBSNData) Reset()         { *m = FinalizedBSNData{} }
func (m *FinalizedBSNData) String() string { return proto.CompactTextString(m) }
func (*FinalizedBSNData) ProtoMessage()    {}
func (*FinalizedBSNData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{4}
}
func (m *FinalizedBSNData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedBSNData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizedBSNData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizedBSNData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedBSNData.Merge(m, src)
}
func (m *FinalizedBSNData) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedBSNData) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedBSNData.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedBSNData proto.InternalMessageInfo

func (m *FinalizedBSNData) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *FinalizedBSNData) GetLatestFinalizedHeader() *IndexedHeader {
	if m != nil {
		return m.LatestFinalizedHeader
	}
	return nil
}

func (m *FinalizedBSNData) GetEpochInfo() *types.Epoch {
	if m != nil {
		return m.EpochInfo
	}
	return nil
}

func (m *FinalizedBSNData) GetRawCheckpoint() *types1.RawCheckpoint {
	if m != nil {
		return m.RawCheckpoint
	}
	return nil
}

func (m *FinalizedBSNData) GetBtcSubmissionKey() *types2.SubmissionKey {
	if m != nil {
		return m.BtcSubmissionKey
	}
	return nil
}

func (m *FinalizedBSNData) GetProof() *ProofFinalizedHeader {
	if m != nil {
		return m.Proof
	}
	return nil
}

// QueryLatestEpochHeadersRequest is request type for the
// QueryLatestEpochHeadersRequest RPC method.
type QueryLatestEpochHeaderRequest struct {
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (m *QueryLatestEpochHeaderRequest) Reset()         { *m = QueryLatestEpochHeaderRequest{} }
func (m *QueryLatestEpochHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestEpochHeaderRequest) ProtoMessage()    {}
func (*QueryLatestEpochHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{5}
}
func (m *QueryLatestEpochHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestEpochHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestEpochHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestEpochHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestEpochHeaderRequest.Merge(m, src)
}
func (m *QueryLatestEpochHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestEpochHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestEpochHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestEpochHeaderRequest proto.InternalMessageInfo

func (m *QueryLatestEpochHeaderRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

// QueryLatestEpochHeaderResponse is response type for the
// QueryLatestEpochHeaderResponse RPC method.
type QueryLatestEpochHeaderResponse struct {
	Header *IndexedHeaderResponse `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *QueryLatestEpochHeaderResponse) Reset()         { *m = QueryLatestEpochHeaderResponse{} }
func (m *QueryLatestEpochHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestEpochHeaderResponse) ProtoMessage()    {}
func (*QueryLatestEpochHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{6}
}
func (m *QueryLatestEpochHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestEpochHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestEpochHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestEpochHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestEpochHeaderResponse.Merge(m, src)
}
func (m *QueryLatestEpochHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestEpochHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestEpochHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestEpochHeaderResponse proto.InternalMessageInfo

func (m *QueryLatestEpochHeaderResponse) GetHeader() *IndexedHeaderResponse {
	if m != nil {
		return m.Header
	}
	return nil
}

// QueryBSNLastSentSegmentRequest is request type for the
// QueryBSNLastSentSegmentRequest RPC method.
type QueryBSNLastSentSegmentRequest struct {
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (m *QueryBSNLastSentSegmentRequest) Reset()         { *m = QueryBSNLastSentSegmentRequest{} }
func (m *QueryBSNLastSentSegmentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBSNLastSentSegmentRequest) ProtoMessage()    {}
func (*QueryBSNLastSentSegmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{7}
}
func (m *QueryBSNLastSentSegmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBSNLastSentSegmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBSNLastSentSegmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBSNLastSentSegmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBSNLastSentSegmentRequest.Merge(m, src)
}
func (m *QueryBSNLastSentSegmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBSNLastSentSegmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBSNLastSentSegmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBSNLastSentSegmentRequest proto.InternalMessageInfo

func (m *QueryBSNLastSentSegmentRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

// QueryBSNLastSentSegmentResponse is response type for the
// QueryBSNLastSentSegmentResponse RPC method.
type QueryBSNLastSentSegmentResponse struct {
	Segment *BTCChainSegmentResponse `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (m *QueryBSNLastSentSegmentResponse) Reset()         { *m = QueryBSNLastSentSegmentResponse{} }
func (m *QueryBSNLastSentSegmentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBSNLastSentSegmentResponse) ProtoMessage()    {}
func (*QueryBSNLastSentSegmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{8}
}
func (m *QueryBSNLastSentSegmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBSNLastSentSegmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBSNLastSentSegmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBSNLastSentSegmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBSNLastSentSegmentResponse.Merge(m, src)
}
func (m *QueryBSNLastSentSegmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBSNLastSentSegmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBSNLastSentSegmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBSNLastSentSegmentResponse proto.InternalMessageInfo

func (m *QueryBSNLastSentSegmentResponse) GetSegment() *BTCChainSegmentResponse {
	if m != nil {
		return m.Segment
	}
	return nil
}

// QuerySealedEpochProofRequest is request type for the
// QuerySealedEpochProofRequest RPC method.
type QueryGetSealedEpochProofRequest struct {
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
}

func (m *QueryGetSealedEpochProofRequest) Reset()         { *m = QueryGetSealedEpochProofRequest{} }
func (m *QueryGetSealedEpochProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSealedEpochProofRequest) ProtoMessage()    {}
func (*QueryGetSealedEpochProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{9}
}
func (m *QueryGetSealedEpochProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSealedEpochProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSealedEpochProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSealedEpochProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSealedEpochProofRequest.Merge(m, src)
}
func (m *QueryGetSealedEpochProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSealedEpochProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSealedEpochProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSealedEpochProofRequest proto.InternalMessageInfo

func (m *QueryGetSealedEpochProofRequest) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

// QuerySealedEpochProofResponse is response type for the
// QuerySealedEpochProofResponse RPC method.
type QueryGetSealedEpochProofResponse struct {
	Epoch *ProofEpochSealedResponse `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryGetSealedEpochProofResponse) Reset()         { *m = QueryGetSealedEpochProofResponse{} }
func (m *QueryGetSealedEpochProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSealedEpochProofResponse) ProtoMessage()    {}
func (*QueryGetSealedEpochProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{10}
}
func (m *QueryGetSealedEpochProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSealedEpochProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSealedEpochProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSealedEpochProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSealedEpochProofResponse.Merge(m, src)
}
func (m *QueryGetSealedEpochProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSealedEpochProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSealedEpochProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSealedEpochProofResponse proto.InternalMessageInfo

func (m *QueryGetSealedEpochProofResponse) GetEpoch() *ProofEpochSealedResponse {
	if m != nil {
		return m.Epoch
	}
	return nil
}

// IndexedHeaderResponse provides the metadata of a BSN header
type IndexedHeaderResponse struct {
	// consumer_id is the unique ID of the consumer
	ConsumerId string `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	// hash is the hash of this header
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// height is the height of this header on the BSN's ledger.
	// (hash, height) jointly provide the position of the header on the BSN ledger
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// time is the timestamp of this header on the BSN's ledger.
	// It is needed for a BSN to unbond all mature validators/delegations before
	// this timestamp, when this header is BTC-finalised
	Time *time.Time `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time,omitempty"`
	// babylon_header_hash is the hash of the babylon block that includes this BSN
	// header
	BabylonHeaderHash []byte `protobuf:"bytes,5,opt,name=babylon_header_hash,json=babylonHeaderHash,proto3" json:"babylon_header_hash,omitempty"`
	// babylon_header_height is the height of the babylon block that includes this
	// BSN header
	BabylonHeaderHeight uint64 `protobuf:"varint,6,opt,name=babylon_header_height,json=babylonHeaderHeight,proto3" json:"babylon_header_height,omitempty"`
	// epoch is the epoch number of this header on Babylon ledger
	BabylonEpoch uint64 `protobuf:"varint,7,opt,name=babylon_epoch,json=babylonEpoch,proto3" json:"babylon_epoch,omitempty"`
	// babylon_tx_hash is the hash of the tx that includes this header
	// (babylon_block_height, babylon_tx_hash) jointly provides the position of
	// the header on Babylon ledger
	BabylonTxHash []byte `protobuf:"bytes,8,opt,name=babylon_tx_hash,json=babylonTxHash,proto3" json:"babylon_tx_hash,omitempty"`
}

func (m *IndexedHeaderResponse) Reset()         { *m = IndexedHeaderResponse{} }
func (m *IndexedHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*IndexedHeaderResponse) ProtoMessage()    {}
func (*IndexedHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{11}
}
func (m *IndexedHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedHeaderResponse.Merge(m, src)
}
func (m *IndexedHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexedHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedHeaderResponse proto.InternalMessageInfo

func (m *IndexedHeaderResponse) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *IndexedHeaderResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *IndexedHeaderResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IndexedHeaderResponse) GetTime() *time.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *IndexedHeaderResponse) GetBabylonHeaderHash() []byte {
	if m != nil {
		return m.BabylonHeaderHash
	}
	return nil
}

func (m *IndexedHeaderResponse) GetBabylonHeaderHeight() uint64 {
	if m != nil {
		return m.BabylonHeaderHeight
	}
	return 0
}

func (m *IndexedHeaderResponse) GetBabylonEpoch() uint64 {
	if m != nil {
		return m.BabylonEpoch
	}
	return 0
}

func (m *IndexedHeaderResponse) GetBabylonTxHash() []byte {
	if m != nil {
		return m.BabylonTxHash
	}
	return nil
}

// Btc light client chain segment response provides a chain segment grown
// during
// last finalized epoch
type BTCChainSegmentResponse struct {
	BtcHeaders []*types3.BTCHeaderInfo `protobuf:"bytes,1,rep,name=btc_headers,json=btcHeaders,proto3" json:"btc_headers,omitempty"`
}

func (m *BTCChainSegmentResponse) Reset()         { *m = BTCChainSegmentResponse{} }
func (m *BTCChainSegmentResponse) String() string { return proto.CompactTextString(m) }
func (*BTCChainSegmentResponse) ProtoMessage()    {}
func (*BTCChainSegmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{12}
}
func (m *BTCChainSegmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCChainSegmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCChainSegmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCChainSegmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCChainSegmentResponse.Merge(m, src)
}
func (m *BTCChainSegmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *BTCChainSegmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCChainSegmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCChainSegmentResponse proto.InternalMessageInfo

func (m *BTCChainSegmentResponse) GetBtcHeaders() []*types3.BTCHeaderInfo {
	if m != nil {
		return m.BtcHeaders
	}
	return nil
}

// ProofEpochSealedResponse provides a complete proof that an epoch is sealed
// by the sealer header, containing all metadata and checkpoint data needed
// for verification.
// i.e., the 2nd header of the next epoch With the access of metadata
// - Metadata of this epoch, which includes the sealer header
// - Raw checkpoint of this epoch
// The verifier can perform the following verification rules:
// - The raw checkpoint's `app_hash` is same as in the sealer header
// - More than 2/3 (in voting power) validators in the validator set of this
// epoch have signed `app_hash` of the sealer header
// - The epoch metadata is committed to the `app_hash` of the sealer header
// - The validator set is committed to the `app_hash` of the sealer header
type ProofEpochSealedResponse struct {
	// validator_set is the validator set of the sealed epoch
	// This validator set has generated a BLS multisig on `app_hash` of
	// the sealer header
	ValidatorSet []*types1.ValidatorWithBlsKey `protobuf:"bytes,1,rep,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty"`
	// proof_epoch_info is the Merkle proof that the epoch's metadata is committed
	// to `app_hash` of the sealer header
	ProofEpochInfo *crypto.ProofOps `protobuf:"bytes,2,opt,name=proof_epoch_info,json=proofEpochInfo,proto3" json:"proof_epoch_info,omitempty"`
	// proof_epoch_info is the Merkle proof that the epoch's validator set is
	// committed to `app_hash` of the sealer header
	ProofEpochValSet *crypto.ProofOps `protobuf:"bytes,3,opt,name=proof_epoch_val_set,json=proofEpochValSet,proto3" json:"proof_epoch_val_set,omitempty"`
}

func (m *ProofEpochSealedResponse) Reset()         { *m = ProofEpochSealedResponse{} }
func (m *ProofEpochSealedResponse) String() string { return proto.CompactTextString(m) }
func (*ProofEpochSealedResponse) ProtoMessage()    {}
func (*ProofEpochSealedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd665af90102da38, []int{13}
}
func (m *ProofEpochSealedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofEpochSealedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofEpochSealedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofEpochSealedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofEpochSealedResponse.Merge(m, src)
}
func (m *ProofEpochSealedResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProofEpochSealedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofEpochSealedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProofEpochSealedResponse proto.InternalMessageInfo

func (m *ProofEpochSealedResponse) GetValidatorSet() []*types1.ValidatorWithBlsKey {
	if m != nil {
		return m.ValidatorSet
	}
	return nil
}

func (m *ProofEpochSealedResponse) GetProofEpochInfo() *crypto.ProofOps {
	if m != nil {
		return m.ProofEpochInfo
	}
	return nil
}

func (m *ProofEpochSealedResponse) GetProofEpochValSet() *crypto.ProofOps {
	if m != nil {
		return m.ProofEpochValSet
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.zoneconcierge.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.zoneconcierge.v1.QueryParamsResponse")
	proto.RegisterType((*QueryFinalizedBSNsInfoRequest)(nil), "babylon.zoneconcierge.v1.QueryFinalizedBSNsInfoRequest")
	proto.RegisterType((*QueryFinalizedBSNsInfoResponse)(nil), "babylon.zoneconcierge.v1.QueryFinalizedBSNsInfoResponse")
	proto.RegisterType((*FinalizedBSNData)(nil), "babylon.zoneconcierge.v1.FinalizedBSNData")
	proto.RegisterType((*QueryLatestEpochHeaderRequest)(nil), "babylon.zoneconcierge.v1.QueryLatestEpochHeaderRequest")
	proto.RegisterType((*QueryLatestEpochHeaderResponse)(nil), "babylon.zoneconcierge.v1.QueryLatestEpochHeaderResponse")
	proto.RegisterType((*QueryBSNLastSentSegmentRequest)(nil), "babylon.zoneconcierge.v1.QueryBSNLastSentSegmentRequest")
	proto.RegisterType((*QueryBSNLastSentSegmentResponse)(nil), "babylon.zoneconcierge.v1.QueryBSNLastSentSegmentResponse")
	proto.RegisterType((*QueryGetSealedEpochProofRequest)(nil), "babylon.zoneconcierge.v1.QueryGetSealedEpochProofRequest")
	proto.RegisterType((*QueryGetSealedEpochProofResponse)(nil), "babylon.zoneconcierge.v1.QueryGetSealedEpochProofResponse")
	proto.RegisterType((*IndexedHeaderResponse)(nil), "babylon.zoneconcierge.v1.IndexedHeaderResponse")
	proto.RegisterType((*BTCChainSegmentResponse)(nil), "babylon.zoneconcierge.v1.BTCChainSegmentResponse")
	proto.RegisterType((*ProofEpochSealedResponse)(nil), "babylon.zoneconcierge.v1.ProofEpochSealedResponse")
}

func init() {
	proto.RegisterFile("babylon/zoneconcierge/v1/query.proto", fileDescriptor_cd665af90102da38)
}

var fileDescriptor_cd665af90102da38 = []byte{
	// 1241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x6f, 0x6f, 0xdb, 0x44,
	0x18, 0xaf, 0xdb, 0x34, 0x5b, 0x2f, 0xed, 0x68, 0x2f, 0x2d, 0x8b, 0x32, 0x96, 0x16, 0x03, 0xa3,
	0xa0, 0xd5, 0x56, 0xc3, 0x10, 0x5b, 0xd1, 0xc6, 0x48, 0x57, 0xd6, 0xb2, 0xa9, 0x80, 0xd3, 0x0d,
	0xb4, 0x37, 0xd6, 0xd9, 0xb9, 0x24, 0xd6, 0x9c, 0x3b, 0xcf, 0x77, 0xc9, 0xda, 0x8d, 0xbd, 0x80,
	0x2f, 0xc0, 0x24, 0xbe, 0x0e, 0xbc, 0x9f, 0x54, 0x09, 0x55, 0xe2, 0x0d, 0xaf, 0x00, 0xb5, 0x7c,
	0x10, 0xe4, 0xbb, 0xb3, 0xe3, 0x24, 0x35, 0x29, 0x7b, 0x13, 0xc5, 0xe7, 0xdf, 0xf3, 0x7b, 0x7e,
	0xcf, 0x73, 0xcf, 0x1f, 0x83, 0x77, 0x1d, 0xe4, 0x1c, 0xf8, 0x94, 0x98, 0xcf, 0x28, 0xc1, 0x2e,
	0x25, 0xae, 0x87, 0xc3, 0x16, 0x36, 0x7b, 0xeb, 0xe6, 0x93, 0x2e, 0x0e, 0x0f, 0x8c, 0x20, 0xa4,
	0x9c, 0xc2, 0x92, 0x42, 0x19, 0x03, 0x28, 0xa3, 0xb7, 0x5e, 0x5e, 0x6c, 0xd1, 0x16, 0x15, 0x20,
	0x33, 0xfa, 0x27, 0xf1, 0xe5, 0xb7, 0x5a, 0x94, 0xb6, 0x7c, 0x6c, 0xa2, 0xc0, 0x33, 0x11, 0x21,
	0x94, 0x23, 0xee, 0x51, 0xc2, 0xd4, 0xdb, 0xcb, 0x1c, 0x93, 0x06, 0x0e, 0x3b, 0x1e, 0xe1, 0xa6,
	0x1b, 0x1e, 0x04, 0x9c, 0x9a, 0x41, 0x48, 0x69, 0x53, 0xbd, 0xbe, 0x12, 0x4b, 0x72, 0xdb, 0xd8,
	0x7d, 0x1c, 0x50, 0x8f, 0x70, 0x8f, 0xb4, 0x22, 0x49, 0x8e, 0xcf, 0xec, 0xc7, 0x58, 0x89, 0x2a,
	0x2f, 0x2b, 0x27, 0xe2, 0xc9, 0xe9, 0x36, 0x4d, 0xee, 0x75, 0x30, 0xe3, 0xa8, 0x13, 0x28, 0xc0,
	0xd5, 0x98, 0xc8, 0xe1, 0x6e, 0x9f, 0x4b, 0x10, 0xa5, 0x0f, 0x14, 0xfa, 0x83, 0x4c, 0xb7, 0x23,
	0x50, 0x3d, 0x86, 0xe2, 0x80, 0xba, 0x6d, 0x85, 0x8a, 0xff, 0x0f, 0x3b, 0x1f, 0x49, 0xec, 0x60,
	0x0e, 0x25, 0xfa, 0xbd, 0x4c, 0x74, 0x80, 0x42, 0xd4, 0x89, 0x33, 0x67, 0xa4, 0x22, 0xf2, 0xbd,
	0x56, 0x3b, 0xfa, 0xc5, 0x49, 0x48, 0xa9, 0x13, 0x89, 0xd7, 0x17, 0x01, 0xfc, 0x26, 0xba, 0xc6,
	0xaf, 0x05, 0x89, 0x85, 0x9f, 0x74, 0x31, 0xe3, 0xfa, 0x03, 0x50, 0x1c, 0x38, 0x65, 0x01, 0x25,
	0x0c, 0xc3, 0x5b, 0x20, 0x2f, 0x9d, 0x95, 0xb4, 0x15, 0x6d, 0xb5, 0x50, 0x5d, 0x31, 0xb2, 0x6e,
	0xdd, 0x90, 0x96, 0xb5, 0xdc, 0xab, 0x3f, 0x97, 0x27, 0x2c, 0x65, 0xa5, 0x7f, 0x07, 0x2e, 0x0b,
	0xda, 0x2f, 0x3c, 0x82, 0x7c, 0xef, 0x19, 0x6e, 0xd4, 0xea, 0xbb, 0x6c, 0x87, 0x34, 0xa9, 0xf2,
	0x0b, 0xdf, 0x06, 0xb3, 0x2e, 0x25, 0xac, 0xdb, 0xc1, 0xa1, 0xed, 0x35, 0x22, 0x37, 0x53, 0xab,
	0x33, 0x56, 0x21, 0x3e, 0xdb, 0x69, 0x30, 0xb8, 0x08, 0xa6, 0x83, 0x90, 0xf6, 0x70, 0x69, 0x72,
	0x45, 0x5b, 0x3d, 0x6f, 0xc9, 0x07, 0xfd, 0x7b, 0x50, 0xc9, 0x62, 0x56, 0xda, 0x1f, 0x81, 0x62,
	0x33, 0x7e, 0x69, 0x3b, 0x8c, 0x30, 0xbb, 0x81, 0x38, 0x12, 0x1e, 0x0a, 0xd5, 0x0f, 0xb3, 0x03,
	0x49, 0x33, 0xde, 0x41, 0x1c, 0x59, 0x0b, 0x09, 0x4d, 0x8d, 0x11, 0x16, 0x1d, 0xe9, 0xbf, 0x4c,
	0x81, 0xf9, 0x61, 0x1c, 0x5c, 0x06, 0x85, 0x54, 0x2c, 0x22, 0x63, 0x33, 0x16, 0xe8, 0x87, 0x02,
	0x6d, 0x70, 0xd1, 0x47, 0x1c, 0x33, 0x6e, 0xf7, 0x85, 0xb5, 0x31, 0x6a, 0xe0, 0x50, 0xc4, 0x56,
	0xa8, 0xbe, 0x9f, 0xad, 0x6a, 0x87, 0x34, 0xf0, 0x3e, 0x6e, 0x6c, 0x0b, 0xb8, 0xb5, 0x24, 0x79,
	0x12, 0x09, 0xf2, 0x18, 0xde, 0x00, 0x40, 0x94, 0x9c, 0xed, 0x91, 0x26, 0x2d, 0x4d, 0x09, 0xce,
	0xa4, 0x40, 0x8c, 0xa4, 0x1a, 0x7b, 0xeb, 0xc6, 0x56, 0xf4, 0xdf, 0x9a, 0x11, 0x47, 0x51, 0xd6,
	0xe0, 0x2e, 0xb8, 0x10, 0xa2, 0xa7, 0x76, 0xbf, 0xae, 0x4b, 0xb9, 0x21, 0x49, 0x03, 0x3d, 0x10,
	0x71, 0x58, 0xe8, 0xe9, 0x66, 0x72, 0x66, 0xcd, 0x85, 0xe9, 0x47, 0xf8, 0x00, 0x40, 0x87, 0xbb,
	0x36, 0xeb, 0x3a, 0x1d, 0x8f, 0x31, 0x8f, 0x92, 0xa8, 0x4b, 0x4b, 0xd3, 0x43, 0x9c, 0x83, 0x4d,
	0xd7, 0x5b, 0x37, 0xea, 0x09, 0xfe, 0x1e, 0x3e, 0xb0, 0xe6, 0x1d, 0xee, 0x0e, 0x9c, 0xc0, 0x3b,
	0xa2, 0x18, 0x68, 0xb3, 0x94, 0x17, 0x4c, 0xc6, 0x7f, 0xd4, 0x63, 0x04, 0x1b, 0x4a, 0x90, 0x25,
	0x8d, 0xf5, 0xdb, 0xaa, 0x2c, 0xef, 0x8b, 0x2c, 0x8a, 0x5c, 0x28, 0x80, 0x2a, 0xcb, 0x71, 0x57,
	0xa9, 0x7b, 0xaa, 0xfc, 0x4e, 0x61, 0x50, 0xe5, 0x77, 0x17, 0xe4, 0xd5, 0xdd, 0xca, 0xd6, 0x31,
	0xcf, 0x7a, 0xb7, 0x8a, 0xc0, 0x52, 0xe6, 0xfa, 0xe7, 0xca, 0x55, 0xad, 0xbe, 0x7b, 0x1f, 0x31,
	0x5e, 0xc7, 0x84, 0xd7, 0x71, 0xab, 0x83, 0x09, 0x3f, 0xb3, 0x5a, 0x02, 0x96, 0x33, 0x29, 0x94,
	0xdc, 0x7b, 0xe0, 0x1c, 0x93, 0x47, 0x4a, 0xef, 0x7a, 0xb6, 0xde, 0xda, 0xde, 0xe6, 0x66, 0x1b,
	0x79, 0x64, 0x88, 0xc3, 0x8a, 0x19, 0xf4, 0x5b, 0xca, 0xdf, 0x5d, 0xcc, 0xeb, 0x18, 0xf9, 0xb8,
	0x21, 0x12, 0x24, 0x6e, 0x24, 0xd6, 0x7c, 0x09, 0xc8, 0xe2, 0xb3, 0x49, 0xb7, 0x23, 0x3c, 0xe6,
	0xac, 0xf3, 0xe2, 0x60, 0xb7, 0xdb, 0xd1, 0x7d, 0xb0, 0x92, 0x6d, 0xaf, 0x04, 0x6f, 0x83, 0x69,
	0x81, 0x57, 0x72, 0xab, 0x63, 0x2a, 0x41, 0x30, 0x48, 0xb2, 0x44, 0xaf, 0x24, 0xd0, 0x0f, 0x27,
	0xc1, 0xd2, 0xa9, 0x57, 0x30, 0xbe, 0xa3, 0x21, 0xc8, 0xb5, 0x11, 0x6b, 0x8b, 0xf6, 0x9d, 0xb5,
	0xc4, 0x7f, 0xf8, 0x66, 0x74, 0xf1, 0xd1, 0xd8, 0x15, 0x0d, 0x98, 0xb3, 0xd4, 0x13, 0xbc, 0x06,
	0x72, 0xd1, 0x36, 0x52, 0x7d, 0x55, 0x36, 0xe4, 0xaa, 0x32, 0xe2, 0x55, 0x65, 0xec, 0xc5, 0xab,
	0xaa, 0x96, 0x7b, 0xf9, 0xd7, 0xb2, 0x66, 0x09, 0x34, 0x34, 0x40, 0x51, 0x05, 0xa6, 0x46, 0x85,
	0x2d, 0x1c, 0x4e, 0x0b, 0x87, 0x0b, 0xea, 0x95, 0x94, 0xbd, 0x1d, 0x79, 0xaf, 0x82, 0xa5, 0x61,
	0xbc, 0x14, 0x93, 0x17, 0x62, 0x8a, 0x83, 0x16, 0x52, 0xd9, 0x3b, 0x60, 0x2e, 0xb6, 0x91, 0x29,
	0x3d, 0x27, 0xb0, 0xb3, 0xea, 0x50, 0xa4, 0x0e, 0x5e, 0x01, 0x6f, 0xc4, 0x20, 0xbe, 0x2f, 0x45,
	0x9c, 0x17, 0x22, 0x62, 0xdb, 0xbd, 0xfd, 0x48, 0x80, 0xde, 0x00, 0x17, 0x33, 0xea, 0x03, 0xee,
	0x80, 0x42, 0x34, 0x13, 0xa4, 0x2e, 0xa6, 0x26, 0xf1, 0x6a, 0x7a, 0x18, 0xa4, 0xd7, 0x95, 0x2c,
	0x34, 0x29, 0x54, 0x0c, 0x76, 0xe0, 0x70, 0x57, 0x3e, 0x32, 0xfd, 0x87, 0x49, 0x50, 0xca, 0xba,
	0x57, 0x68, 0x81, 0xb9, 0x1e, 0xf2, 0xbd, 0x06, 0xe2, 0x34, 0xb4, 0x19, 0xe6, 0xca, 0xd3, 0x5a,
	0xf6, 0x28, 0x7b, 0x18, 0xc3, 0xbf, 0xf5, 0x78, 0xbb, 0xe6, 0xb3, 0x68, 0xf8, 0xcc, 0x26, 0x1c,
	0x75, 0xcc, 0xe1, 0x16, 0x98, 0x17, 0xb3, 0xc3, 0x4e, 0x0d, 0x58, 0x39, 0xb4, 0x2f, 0x19, 0xfd,
	0x6f, 0x17, 0x43, 0x7e, 0xbb, 0xc8, 0x92, 0xfb, 0x2a, 0x60, 0xd6, 0x85, 0x20, 0x11, 0x29, 0xc6,
	0xec, 0x97, 0xa0, 0x98, 0xa6, 0xe9, 0x21, 0x5f, 0x08, 0x9c, 0x1a, 0xcf, 0x34, 0xdf, 0x67, 0x7a,
	0x88, 0xfc, 0x3a, 0xe6, 0xd5, 0xc3, 0x73, 0x60, 0x5a, 0xb4, 0x09, 0xfc, 0x49, 0x03, 0x79, 0xb9,
	0x7f, 0xe1, 0xd5, 0xec, 0x3e, 0x18, 0x5d, 0xfb, 0xe5, 0xb5, 0x33, 0xa2, 0x65, 0x62, 0xf5, 0xd5,
	0x1f, 0x7f, 0xff, 0xe7, 0xe7, 0x49, 0x1d, 0xae, 0x98, 0x63, 0xbe, 0x4d, 0xe0, 0xaf, 0x1a, 0x58,
	0x18, 0x59, 0xcd, 0xf0, 0x93, 0x31, 0xee, 0xb2, 0x3e, 0x13, 0xca, 0xd7, 0xff, 0xbf, 0xa1, 0x92,
	0xfc, 0xb1, 0x90, 0x6c, 0xc2, 0xb5, 0x6c, 0xc9, 0x43, 0x5f, 0x09, 0xd1, 0xd5, 0xc2, 0x43, 0x0d,
	0x2c, 0x8c, 0xcc, 0xf6, 0xb1, 0xfa, 0xb3, 0xf6, 0xc9, 0x58, 0xfd, 0x99, 0x6b, 0x44, 0xdf, 0x14,
	0xfa, 0x6f, 0xc2, 0x4f, 0xb3, 0xf5, 0xab, 0x6f, 0x0a, 0x59, 0x51, 0xb2, 0xb9, 0xcc, 0xe7, 0xa9,
	0xb9, 0xf5, 0x02, 0x1e, 0x69, 0x00, 0x8e, 0xce, 0x7e, 0x38, 0x4e, 0x55, 0xe6, 0xc6, 0x29, 0xdf,
	0x78, 0x0d, 0x4b, 0x15, 0xd0, 0x96, 0x08, 0xe8, 0x33, 0x78, 0x33, 0x3b, 0x20, 0x87, 0x11, 0xdb,
	0x47, 0x8c, 0xdb, 0x0c, 0x93, 0xe8, 0x47, 0x10, 0x0c, 0x85, 0xf4, 0x9b, 0x06, 0x8a, 0xa7, 0xac,
	0x07, 0x38, 0x4e, 0x59, 0xf6, 0x4a, 0x2a, 0x6f, 0xbc, 0x8e, 0xa9, 0x8a, 0xea, 0xb6, 0x88, 0x6a,
	0x03, 0x5e, 0xcf, 0x8e, 0x8a, 0x09, 0x5b, 0x75, 0x4d, 0xa2, 0x99, 0xcd, 0xe7, 0xc9, 0x0a, 0x7c,
	0x51, 0xdb, 0x7b, 0x75, 0x5c, 0xd1, 0x8e, 0x8e, 0x2b, 0xda, 0xdf, 0xc7, 0x15, 0xed, 0xe5, 0x49,
	0x65, 0xe2, 0xe8, 0xa4, 0x32, 0xf1, 0xc7, 0x49, 0x65, 0xe2, 0xd1, 0x46, 0xcb, 0xe3, 0xed, 0xae,
	0x63, 0xb8, 0xb4, 0x13, 0xb3, 0xfb, 0xc8, 0x61, 0x6b, 0x1e, 0x4d, 0x9c, 0xf5, 0xae, 0x99, 0xfb,
	0x43, 0x1e, 0xf9, 0x41, 0x80, 0x99, 0x93, 0x17, 0xeb, 0xe5, 0xa3, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x9d, 0xbf, 0x7b, 0x74, 0xd4, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// FinalizedBSNsInfo queries the BTC-finalised info of BSNs with given IDs, with proofs
	FinalizedBSNsInfo(ctx context.Context, in *QueryFinalizedBSNsInfoRequest, opts ...grpc.CallOption) (*QueryFinalizedBSNsInfoResponse, error)
	// LatestEpochHeader queries the latest epoch header for a given consumer ID
	LatestEpochHeader(ctx context.Context, in *QueryLatestEpochHeaderRequest, opts ...grpc.CallOption) (*QueryLatestEpochHeaderResponse, error)
	// BSNLastSentSegment queries the last sent segment of a given consumer ID
	BSNLastSentSegment(ctx context.Context, in *QueryBSNLastSentSegmentRequest, opts ...grpc.CallOption) (*QueryBSNLastSentSegmentResponse, error)
	// SealedEpochProof queries the proof of a sealed epoch
	GetSealedEpochProof(ctx context.Context, in *QueryGetSealedEpochProofRequest, opts ...grpc.CallOption) (*QueryGetSealedEpochProofResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalizedBSNsInfo(ctx context.Context, in *QueryFinalizedBSNsInfoRequest, opts ...grpc.CallOption) (*QueryFinalizedBSNsInfoResponse, error) {
	out := new(QueryFinalizedBSNsInfoResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/FinalizedBSNsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestEpochHeader(ctx context.Context, in *QueryLatestEpochHeaderRequest, opts ...grpc.CallOption) (*QueryLatestEpochHeaderResponse, error) {
	out := new(QueryLatestEpochHeaderResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/LatestEpochHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BSNLastSentSegment(ctx context.Context, in *QueryBSNLastSentSegmentRequest, opts ...grpc.CallOption) (*QueryBSNLastSentSegmentResponse, error) {
	out := new(QueryBSNLastSentSegmentResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/BSNLastSentSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSealedEpochProof(ctx context.Context, in *QueryGetSealedEpochProofRequest, opts ...grpc.CallOption) (*QueryGetSealedEpochProofResponse, error) {
	out := new(QueryGetSealedEpochProofResponse)
	err := c.cc.Invoke(ctx, "/babylon.zoneconcierge.v1.Query/GetSealedEpochProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// FinalizedBSNsInfo queries the BTC-finalised info of BSNs with given IDs, with proofs
	FinalizedBSNsInfo(context.Context, *QueryFinalizedBSNsInfoRequest) (*QueryFinalizedBSNsInfoResponse, error)
	// LatestEpochHeader queries the latest epoch header for a given consumer ID
	LatestEpochHeader(context.Context, *QueryLatestEpochHeaderRequest) (*QueryLatestEpochHeaderResponse, error)
	// BSNLastSentSegment queries the last sent segment of a given consumer ID
	BSNLastSentSegment(context.Context, *QueryBSNLastSentSegmentRequest) (*QueryBSNLastSentSegmentResponse, error)
	// SealedEpochProof queries the proof of a sealed epoch
	GetSealedEpochProof(context.Context, *QueryGetSealedEpochProofRequest) (*QueryGetSealedEpochProofResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FinalizedBSNsInfo(ctx context.Context, req *QueryFinalizedBSNsInfoRequest) (*QueryFinalizedBSNsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedBSNsInfo not implemented")
}
func (*UnimplementedQueryServer) LatestEpochHeader(ctx context.Context, req *QueryLatestEpochHeaderRequest) (*QueryLatestEpochHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestEpochHeader not implemented")
}
func (*UnimplementedQueryServer) BSNLastSentSegment(ctx context.Context, req *QueryBSNLastSentSegmentRequest) (*QueryBSNLastSentSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BSNLastSentSegment not implemented")
}
func (*UnimplementedQueryServer) GetSealedEpochProof(ctx context.Context, req *QueryGetSealedEpochProofRequest) (*QueryGetSealedEpochProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSealedEpochProof not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalizedBSNsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalizedBSNsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalizedBSNsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/FinalizedBSNsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalizedBSNsInfo(ctx, req.(*QueryFinalizedBSNsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestEpochHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestEpochHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestEpochHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/LatestEpochHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestEpochHeader(ctx, req.(*QueryLatestEpochHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BSNLastSentSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBSNLastSentSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BSNLastSentSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/BSNLastSentSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BSNLastSentSegment(ctx, req.(*QueryBSNLastSentSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSealedEpochProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSealedEpochProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSealedEpochProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.zoneconcierge.v1.Query/GetSealedEpochProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSealedEpochProof(ctx, req.(*QueryGetSealedEpochProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.zoneconcierge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FinalizedBSNsInfo",
			Handler:    _Query_FinalizedBSNsInfo_Handler,
		},
		{
			MethodName: "LatestEpochHeader",
			Handler:    _Query_LatestEpochHeader_Handler,
		},
		{
			MethodName: "BSNLastSentSegment",
			Handler:    _Query_BSNLastSentSegment_Handler,
		},
		{
			MethodName: "GetSealedEpochProof",
			Handler:    _Query_GetSealedEpochProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/zoneconcierge/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedBSNsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedBSNsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedBSNsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prove {
		i--
		if m.Prove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConsumerIds) > 0 {
		for iNdEx := len(m.ConsumerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConsumerIds[iNdEx])
			copy(dAtA[i:], m.ConsumerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedBSNsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedBSNsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedBSNsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalizedBsnsData) > 0 {
		for iNdEx := len(m.FinalizedBsnsData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalizedBsnsData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FinalizedBSNData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedBSNData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedBSNData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BtcSubmissionKey != nil {
		{
			size, err := m.BtcSubmissionKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RawCheckpoint != nil {
		{
			size, err := m.RawCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EpochInfo != nil {
		{
			size, err := m.EpochInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestFinalizedHeader != nil {
		{
			size, err := m.LatestFinalizedHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestEpochHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestEpochHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestEpochHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestEpochHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestEpochHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestEpochHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBSNLastSentSegmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBSNLastSentSegmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBSNLastSentSegmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBSNLastSentSegmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBSNLastSentSegmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBSNLastSentSegmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Segment != nil {
		{
			size, err := m.Segment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSealedEpochProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSealedEpochProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSealedEpochProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSealedEpochProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSealedEpochProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSealedEpochProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexedHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BabylonTxHash) > 0 {
		i -= len(m.BabylonTxHash)
		copy(dAtA[i:], m.BabylonTxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BabylonTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.BabylonEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BabylonEpoch))
		i--
		dAtA[i] = 0x38
	}
	if m.BabylonHeaderHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BabylonHeaderHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BabylonHeaderHash) > 0 {
		i -= len(m.BabylonHeaderHash)
		copy(dAtA[i:], m.BabylonHeaderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BabylonHeaderHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Time != nil {
		n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Time):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintQuery(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCChainSegmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCChainSegmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCChainSegmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcHeaders) > 0 {
		for iNdEx := len(m.BtcHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProofEpochSealedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofEpochSealedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofEpochSealedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofEpochValSet != nil {
		{
			size, err := m.ProofEpochValSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ProofEpochInfo != nil {
		{
			size, err := m.ProofEpochInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorSet) > 0 {
		for iNdEx := len(m.ValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFinalizedBSNsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumerIds) > 0 {
		for _, s := range m.ConsumerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Prove {
		n += 2
	}
	return n
}

func (m *QueryFinalizedBSNsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FinalizedBsnsData) > 0 {
		for _, e := range m.FinalizedBsnsData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FinalizedBSNData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LatestFinalizedHeader != nil {
		l = m.LatestFinalizedHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EpochInfo != nil {
		l = m.EpochInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RawCheckpoint != nil {
		l = m.RawCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BtcSubmissionKey != nil {
		l = m.BtcSubmissionKey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestEpochHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestEpochHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBSNLastSentSegmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBSNLastSentSegmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSealedEpochProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovQuery(uint64(m.EpochNum))
	}
	return n
}

func (m *QueryGetSealedEpochProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IndexedHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Time != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BabylonHeaderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BabylonHeaderHeight != 0 {
		n += 1 + sovQuery(uint64(m.BabylonHeaderHeight))
	}
	if m.BabylonEpoch != 0 {
		n += 1 + sovQuery(uint64(m.BabylonEpoch))
	}
	l = len(m.BabylonTxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BTCChainSegmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcHeaders) > 0 {
		for _, e := range m.BtcHeaders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ProofEpochSealedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSet) > 0 {
		for _, e := range m.ValidatorSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ProofEpochInfo != nil {
		l = m.ProofEpochInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ProofEpochValSet != nil {
		l = m.ProofEpochValSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedBSNsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedBSNsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedBSNsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerIds = append(m.ConsumerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedBSNsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedBSNsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedBSNsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedBsnsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedBsnsData = append(m.FinalizedBsnsData, &FinalizedBSNData{})
			if err := m.FinalizedBsnsData[len(m.FinalizedBsnsData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalizedBSNData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedBSNData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedBSNData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFinalizedHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestFinalizedHeader == nil {
				m.LatestFinalizedHeader = &IndexedHeader{}
			}
			if err := m.LatestFinalizedHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochInfo == nil {
				m.EpochInfo = &types.Epoch{}
			}
			if err := m.EpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawCheckpoint == nil {
				m.RawCheckpoint = &types1.RawCheckpoint{}
			}
			if err := m.RawCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcSubmissionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcSubmissionKey == nil {
				m.BtcSubmissionKey = &types2.SubmissionKey{}
			}
			if err := m.BtcSubmissionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &ProofFinalizedHeader{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestEpochHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestEpochHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestEpochHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestEpochHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestEpochHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestEpochHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &IndexedHeaderResponse{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBSNLastSentSegmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBSNLastSentSegmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBSNLastSentSegmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBSNLastSentSegmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBSNLastSentSegmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBSNLastSentSegmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segment == nil {
				m.Segment = &BTCChainSegmentResponse{}
			}
			if err := m.Segment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSealedEpochProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSealedEpochProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSealedEpochProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSealedEpochProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSealedEpochProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSealedEpochProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &ProofEpochSealedResponse{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonHeaderHash = append(m.BabylonHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BabylonHeaderHash == nil {
				m.BabylonHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonHeaderHeight", wireType)
			}
			m.BabylonHeaderHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabylonHeaderHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonEpoch", wireType)
			}
			m.BabylonEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BabylonEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonTxHash = append(m.BabylonTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BabylonTxHash == nil {
				m.BabylonTxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCChainSegmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCChainSegmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCChainSegmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcHeaders = append(m.BtcHeaders, &types3.BTCHeaderInfo{})
			if err := m.BtcHeaders[len(m.BtcHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofEpochSealedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofEpochSealedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofEpochSealedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSet = append(m.ValidatorSet, &types1.ValidatorWithBlsKey{})
			if err := m.ValidatorSet[len(m.ValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochInfo == nil {
				m.ProofEpochInfo = &crypto.ProofOps{}
			}
			if err := m.ProofEpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofEpochValSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofEpochValSet == nil {
				m.ProofEpochValSet = &crypto.ProofOps{}
			}
			if err := m.ProofEpochValSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
