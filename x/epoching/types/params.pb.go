// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/epoching/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// epoch_interval is the number of consecutive blocks to form an epoch
	EpochInterval uint64 `protobuf:"varint,1,opt,name=epoch_interval,json=epochInterval,proto3" json:"epoch_interval,omitempty" yaml:"epoch_interval"`
	// enqueue_gas_fees defines gas fees for different enqueue operations
	EnqueueGasFees EnqueueGasFees `protobuf:"bytes,2,opt,name=enqueue_gas_fees,json=enqueueGasFees,proto3" json:"enqueue_gas_fees" yaml:"enqueue_gas_fees"`
	// minimum_amount is a minimum amount for staking message cancel_unbonding_delegation
	MinAmount uint64 `protobuf:"varint,3,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty" yaml:"min_amount"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9e38cfe55335900, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEpochInterval() uint64 {
	if m != nil {
		return m.EpochInterval
	}
	return 0
}

func (m *Params) GetEnqueueGasFees() EnqueueGasFees {
	if m != nil {
		return m.EnqueueGasFees
	}
	return EnqueueGasFees{}
}

func (m *Params) GetMinAmount() uint64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

// EnqueueGasFees defines the gasFees for the enque message execution.
type EnqueueGasFees struct {
	Delegate                  uint64 `protobuf:"varint,1,opt,name=delegate,proto3" json:"delegate,omitempty" yaml:"delegate"`
	Undelegate                uint64 `protobuf:"varint,2,opt,name=undelegate,proto3" json:"undelegate,omitempty" yaml:"undelegate"`
	BeginRedelegate           uint64 `protobuf:"varint,3,opt,name=begin_redelegate,json=beginRedelegate,proto3" json:"begin_redelegate,omitempty" yaml:"begin_redelegate"`
	CancelUnbondingDelegation uint64 `protobuf:"varint,4,opt,name=cancel_unbonding_delegation,json=cancelUnbondingDelegation,proto3" json:"cancel_unbonding_delegation,omitempty" yaml:"cancel_unbonding_delegation"`
	EditValidator             uint64 `protobuf:"varint,5,opt,name=edit_validator,json=editValidator,proto3" json:"edit_validator,omitempty" yaml:"edit_validator"`
	StakingUpdateParams       uint64 `protobuf:"varint,6,opt,name=staking_update_params,json=stakingUpdateParams,proto3" json:"staking_update_params,omitempty" yaml:"staking_update_params"`
	CreateValidator           uint64 `protobuf:"varint,7,opt,name=create_validator,json=createValidator,proto3" json:"create_validator,omitempty" yaml:"create_validator_params"`
}

func (m *EnqueueGasFees) Reset()         { *m = EnqueueGasFees{} }
func (m *EnqueueGasFees) String() string { return proto.CompactTextString(m) }
func (*EnqueueGasFees) ProtoMessage()    {}
func (*EnqueueGasFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9e38cfe55335900, []int{1}
}
func (m *EnqueueGasFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnqueueGasFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnqueueGasFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnqueueGasFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueGasFees.Merge(m, src)
}
func (m *EnqueueGasFees) XXX_Size() int {
	return m.Size()
}
func (m *EnqueueGasFees) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueGasFees.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueGasFees proto.InternalMessageInfo

func (m *EnqueueGasFees) GetDelegate() uint64 {
	if m != nil {
		return m.Delegate
	}
	return 0
}

func (m *EnqueueGasFees) GetUndelegate() uint64 {
	if m != nil {
		return m.Undelegate
	}
	return 0
}

func (m *EnqueueGasFees) GetBeginRedelegate() uint64 {
	if m != nil {
		return m.BeginRedelegate
	}
	return 0
}

func (m *EnqueueGasFees) GetCancelUnbondingDelegation() uint64 {
	if m != nil {
		return m.CancelUnbondingDelegation
	}
	return 0
}

func (m *EnqueueGasFees) GetEditValidator() uint64 {
	if m != nil {
		return m.EditValidator
	}
	return 0
}

func (m *EnqueueGasFees) GetStakingUpdateParams() uint64 {
	if m != nil {
		return m.StakingUpdateParams
	}
	return 0
}

func (m *EnqueueGasFees) GetCreateValidator() uint64 {
	if m != nil {
		return m.CreateValidator
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "babylon.epoching.v1.Params")
	proto.RegisterType((*EnqueueGasFees)(nil), "babylon.epoching.v1.EnqueueGasFees")
}

func init() { proto.RegisterFile("babylon/epoching/v1/params.proto", fileDescriptor_c9e38cfe55335900) }

var fileDescriptor_c9e38cfe55335900 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xbf, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0xe3, 0x7e, 0xf3, 0x0d, 0x70, 0x88, 0x24, 0x38, 0x44, 0xb8, 0x14, 0xf9, 0xa2, 0x43,
	0x42, 0x5d, 0xb0, 0x55, 0x68, 0x97, 0x4e, 0x10, 0x41, 0x11, 0x03, 0x02, 0x59, 0x94, 0x81, 0xc5,
	0x3a, 0xdb, 0x57, 0xf7, 0x84, 0x7d, 0x67, 0xec, 0xb3, 0x45, 0xfe, 0x0b, 0x16, 0x76, 0xfe, 0x9c,
	0x8e, 0x1d, 0x99, 0x2c, 0x94, 0x2c, 0xcc, 0x1e, 0x98, 0x51, 0xee, 0xfc, 0x83, 0x84, 0x8a, 0xed,
	0xee, 0x7d, 0x3e, 0xef, 0xf3, 0xbe, 0x27, 0x3d, 0x07, 0x66, 0x1e, 0xf6, 0x16, 0x11, 0x67, 0x36,
	0x49, 0xb8, 0x7f, 0x4e, 0x59, 0x68, 0x17, 0x07, 0x76, 0x82, 0x53, 0x1c, 0x67, 0x56, 0x92, 0x72,
	0xc1, 0xf5, 0x49, 0x4d, 0x58, 0x0d, 0x61, 0x15, 0x07, 0xf7, 0xee, 0x84, 0x3c, 0xe4, 0x52, 0xb7,
	0xd7, 0x27, 0x85, 0xa2, 0x5f, 0x1a, 0x18, 0xbc, 0x95, 0xbd, 0xfa, 0x53, 0x30, 0x94, 0xbc, 0x4b,
	0x99, 0x20, 0x69, 0x81, 0x23, 0x43, 0x9b, 0x69, 0xfb, 0xfd, 0xf9, 0x6e, 0x55, 0xc2, 0xe9, 0x02,
	0xc7, 0xd1, 0x31, 0xda, 0xd4, 0x91, 0x73, 0x4b, 0x16, 0x5e, 0xd5, 0x77, 0x9d, 0x81, 0x31, 0x61,
	0x9f, 0x72, 0x92, 0x13, 0x37, 0xc4, 0x99, 0x7b, 0x46, 0x48, 0x66, 0xec, 0xcc, 0xb4, 0xfd, 0x9b,
	0x8f, 0x1f, 0x58, 0x57, 0xac, 0x64, 0xbd, 0x50, 0xf0, 0x4b, 0x9c, 0x9d, 0x10, 0x92, 0xcd, 0xe1,
	0x45, 0x09, 0x7b, 0x55, 0x09, 0xef, 0xd6, 0xc3, 0xb6, 0xac, 0x90, 0x33, 0x24, 0x1b, 0x0d, 0xfa,
	0x21, 0x00, 0x31, 0x65, 0x2e, 0x8e, 0x79, 0xce, 0x84, 0xf1, 0x9f, 0xdc, 0x76, 0x5a, 0x95, 0xf0,
	0xb6, 0x32, 0xe8, 0x34, 0xe4, 0xdc, 0x88, 0x29, 0x7b, 0x26, 0xcf, 0xc7, 0xfd, 0x9f, 0xdf, 0xa0,
	0x86, 0xbe, 0xf6, 0xc1, 0x70, 0x73, 0xbe, 0x6e, 0x83, 0xeb, 0x01, 0x89, 0x48, 0x88, 0x05, 0xa9,
	0x9f, 0x3e, 0xa9, 0x4a, 0x38, 0x52, 0x66, 0x8d, 0x82, 0x9c, 0x16, 0xd2, 0x8f, 0x00, 0xc8, 0x59,
	0xdb, 0xb2, 0xb3, 0x3d, 0xbf, 0xd3, 0x90, 0xf3, 0x07, 0xa8, 0x9f, 0x80, 0xb1, 0x47, 0x42, 0xca,
	0xdc, 0x94, 0xb4, 0xcd, 0x6a, 0xf9, 0xbd, 0xee, 0xf5, 0xdb, 0x04, 0x72, 0x46, 0xb2, 0xe4, 0xb4,
	0x15, 0xfd, 0x0c, 0xec, 0xf9, 0x98, 0xf9, 0x24, 0x72, 0x73, 0xe6, 0x71, 0x16, 0x50, 0x16, 0xba,
	0xb5, 0x48, 0x39, 0x33, 0xfa, 0xd2, 0xf2, 0x61, 0x55, 0x42, 0xa4, 0x2c, 0xff, 0x01, 0x23, 0x67,
	0x57, 0xa9, 0xa7, 0x8d, 0xf8, 0xbc, 0xd5, 0x64, 0x30, 0x02, 0x2a, 0xdc, 0x02, 0x47, 0x34, 0xc0,
	0x82, 0xa7, 0xc6, 0xff, 0x7f, 0x05, 0x63, 0x43, 0x5f, 0x07, 0x23, 0xa0, 0xe2, 0x7d, 0x73, 0xd7,
	0xdf, 0x81, 0x69, 0x26, 0xf0, 0xc7, 0xf5, 0xcc, 0x3c, 0x09, 0xb0, 0x20, 0xae, 0xca, 0xab, 0x31,
	0x90, 0x46, 0xb3, 0xaa, 0x84, 0xf7, 0x95, 0xd1, 0x95, 0x18, 0x72, 0x26, 0x75, 0xfd, 0x54, 0x96,
	0xeb, 0xc0, 0xbe, 0x06, 0x63, 0x3f, 0x25, 0x6b, 0xac, 0xdb, 0xec, 0x9a, 0x34, 0x44, 0x55, 0x09,
	0xcd, 0xfa, 0xd1, 0x5b, 0x44, 0x6b, 0x39, 0x52, 0x4a, 0xbb, 0xa4, 0xca, 0xc5, 0xfc, 0xcd, 0xc5,
	0xd2, 0xd4, 0x2e, 0x97, 0xa6, 0xf6, 0x63, 0x69, 0x6a, 0x5f, 0x56, 0x66, 0xef, 0x72, 0x65, 0xf6,
	0xbe, 0xaf, 0xcc, 0xde, 0x87, 0xa3, 0x90, 0x8a, 0xf3, 0xdc, 0xb3, 0x7c, 0x1e, 0xdb, 0x75, 0x9a,
	0x23, 0xec, 0x65, 0x8f, 0x28, 0x6f, 0xae, 0x76, 0x71, 0x68, 0x7f, 0xee, 0xbe, 0xa5, 0x58, 0x24,
	0x24, 0xf3, 0x06, 0xf2, 0xa3, 0x3d, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x82, 0xaa, 0xfc, 0x49,
	0xb7, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EpochInterval != that1.EpochInterval {
		return false
	}
	if !this.EnqueueGasFees.Equal(&that1.EnqueueGasFees) {
		return false
	}
	if this.MinAmount != that1.MinAmount {
		return false
	}
	return true
}
func (this *EnqueueGasFees) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnqueueGasFees)
	if !ok {
		that2, ok := that.(EnqueueGasFees)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Delegate != that1.Delegate {
		return false
	}
	if this.Undelegate != that1.Undelegate {
		return false
	}
	if this.BeginRedelegate != that1.BeginRedelegate {
		return false
	}
	if this.CancelUnbondingDelegation != that1.CancelUnbondingDelegation {
		return false
	}
	if this.EditValidator != that1.EditValidator {
		return false
	}
	if this.StakingUpdateParams != that1.StakingUpdateParams {
		return false
	}
	if this.CreateValidator != that1.CreateValidator {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinAmount))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.EnqueueGasFees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.EpochInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EpochInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnqueueGasFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnqueueGasFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnqueueGasFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateValidator != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CreateValidator))
		i--
		dAtA[i] = 0x38
	}
	if m.StakingUpdateParams != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StakingUpdateParams))
		i--
		dAtA[i] = 0x30
	}
	if m.EditValidator != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EditValidator))
		i--
		dAtA[i] = 0x28
	}
	if m.CancelUnbondingDelegation != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CancelUnbondingDelegation))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginRedelegate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BeginRedelegate))
		i--
		dAtA[i] = 0x18
	}
	if m.Undelegate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Undelegate))
		i--
		dAtA[i] = 0x10
	}
	if m.Delegate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Delegate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochInterval != 0 {
		n += 1 + sovParams(uint64(m.EpochInterval))
	}
	l = m.EnqueueGasFees.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MinAmount != 0 {
		n += 1 + sovParams(uint64(m.MinAmount))
	}
	return n
}

func (m *EnqueueGasFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegate != 0 {
		n += 1 + sovParams(uint64(m.Delegate))
	}
	if m.Undelegate != 0 {
		n += 1 + sovParams(uint64(m.Undelegate))
	}
	if m.BeginRedelegate != 0 {
		n += 1 + sovParams(uint64(m.BeginRedelegate))
	}
	if m.CancelUnbondingDelegation != 0 {
		n += 1 + sovParams(uint64(m.CancelUnbondingDelegation))
	}
	if m.EditValidator != 0 {
		n += 1 + sovParams(uint64(m.EditValidator))
	}
	if m.StakingUpdateParams != 0 {
		n += 1 + sovParams(uint64(m.StakingUpdateParams))
	}
	if m.CreateValidator != 0 {
		n += 1 + sovParams(uint64(m.CreateValidator))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInterval", wireType)
			}
			m.EpochInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnqueueGasFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EnqueueGasFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			m.MinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnqueueGasFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnqueueGasFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnqueueGasFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			m.Delegate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delegate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegate", wireType)
			}
			m.Undelegate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Undelegate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginRedelegate", wireType)
			}
			m.BeginRedelegate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginRedelegate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelUnbondingDelegation", wireType)
			}
			m.CancelUnbondingDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancelUnbondingDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditValidator", wireType)
			}
			m.EditValidator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditValidator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingUpdateParams", wireType)
			}
			m.StakingUpdateParams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingUpdateParams |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateValidator", wireType)
			}
			m.CreateValidator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateValidator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
