// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/incentive/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StakeholderType represents the different types of stakeholders.
type StakeholderType int32

const (
	// Finality provider stakeholder type
	StakeholderType_FINALITY_PROVIDER StakeholderType = 0
	// BTC delegation stakeholder type
	StakeholderType_BTC_DELEGATION StakeholderType = 1
)

var StakeholderType_name = map[int32]string{
	0: "FINALITY_PROVIDER",
	1: "BTC_DELEGATION",
}

var StakeholderType_value = map[string]int32{
	"FINALITY_PROVIDER": 0,
	"BTC_DELEGATION":    1,
}

func (x StakeholderType) String() string {
	return proto.EnumName(StakeholderType_name, int32(x))
}

func (StakeholderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{0}
}

// GenesisState defines the incentive module's genesis state.
type GenesisState struct {
	// params the current params of the state.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// BTC staking gauge on every height
	BtcStakingGauges []BTCStakingGaugeEntry `protobuf:"bytes,2,rep,name=btc_staking_gauges,json=btcStakingGauges,proto3" json:"btc_staking_gauges"`
	// Staking Rewards gauge on every height
	RewardGauges []RewardGaugeEntry `protobuf:"bytes,3,rep,name=reward_gauges,json=rewardGauges,proto3" json:"reward_gauges"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetBtcStakingGauges() []BTCStakingGaugeEntry {
	if m != nil {
		return m.BtcStakingGauges
	}
	return nil
}

func (m *GenesisState) GetRewardGauges() []RewardGaugeEntry {
	if m != nil {
		return m.RewardGauges
	}
	return nil
}

// BTCStakingGaugeEntry represents a gauge for BTC staking rewards at a specific
// height.
type BTCStakingGaugeEntry struct {
	// Block height at which this gauge is set
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The gauge object storing rewards info
	Gauge *Gauge `protobuf:"bytes,2,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (m *BTCStakingGaugeEntry) Reset()         { *m = BTCStakingGaugeEntry{} }
func (m *BTCStakingGaugeEntry) String() string { return proto.CompactTextString(m) }
func (*BTCStakingGaugeEntry) ProtoMessage()    {}
func (*BTCStakingGaugeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{1}
}
func (m *BTCStakingGaugeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCStakingGaugeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCStakingGaugeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCStakingGaugeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCStakingGaugeEntry.Merge(m, src)
}
func (m *BTCStakingGaugeEntry) XXX_Size() int {
	return m.Size()
}
func (m *BTCStakingGaugeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCStakingGaugeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BTCStakingGaugeEntry proto.InternalMessageInfo

func (m *BTCStakingGaugeEntry) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BTCStakingGaugeEntry) GetGauge() *Gauge {
	if m != nil {
		return m.Gauge
	}
	return nil
}

// RewardGaugeEntry represents a reward gauge for a specific stakeholder.
type RewardGaugeEntry struct {
	// Type of stakeholder
	StakeholderType StakeholderType `protobuf:"varint,1,opt,name=stakeholder_type,json=stakeholderType,proto3,enum=babylon.incentive.StakeholderType" json:"stakeholder_type,omitempty"`
	// Address of the stakeholder
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The reward gauge object
	RewardGauge *RewardGauge `protobuf:"bytes,3,opt,name=reward_gauge,json=rewardGauge,proto3" json:"reward_gauge,omitempty"`
}

func (m *RewardGaugeEntry) Reset()         { *m = RewardGaugeEntry{} }
func (m *RewardGaugeEntry) String() string { return proto.CompactTextString(m) }
func (*RewardGaugeEntry) ProtoMessage()    {}
func (*RewardGaugeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{2}
}
func (m *RewardGaugeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardGaugeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardGaugeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardGaugeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardGaugeEntry.Merge(m, src)
}
func (m *RewardGaugeEntry) XXX_Size() int {
	return m.Size()
}
func (m *RewardGaugeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardGaugeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RewardGaugeEntry proto.InternalMessageInfo

func (m *RewardGaugeEntry) GetStakeholderType() StakeholderType {
	if m != nil {
		return m.StakeholderType
	}
	return StakeholderType_FINALITY_PROVIDER
}

func (m *RewardGaugeEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardGaugeEntry) GetRewardGauge() *RewardGauge {
	if m != nil {
		return m.RewardGauge
	}
	return nil
}

func init() {
	proto.RegisterEnum("babylon.incentive.StakeholderType", StakeholderType_name, StakeholderType_value)
	proto.RegisterType((*GenesisState)(nil), "babylon.incentive.GenesisState")
	proto.RegisterType((*BTCStakingGaugeEntry)(nil), "babylon.incentive.BTCStakingGaugeEntry")
	proto.RegisterType((*RewardGaugeEntry)(nil), "babylon.incentive.RewardGaugeEntry")
}

func init() { proto.RegisterFile("babylon/incentive/genesis.proto", fileDescriptor_41d5400dc6b4b931) }

var fileDescriptor_41d5400dc6b4b931 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x93, 0x75, 0x14, 0xe1, 0x96, 0x2d, 0xb3, 0x0a, 0xca, 0x7a, 0xc8, 0x46, 0x39, 0x30,
	0x21, 0x2d, 0x91, 0xba, 0x03, 0x17, 0x2e, 0xcd, 0x56, 0xaa, 0x4a, 0x5b, 0x37, 0xb9, 0x11, 0x12,
	0x20, 0x11, 0x39, 0xa9, 0xe5, 0x46, 0xb4, 0x71, 0x65, 0x7b, 0x40, 0xdf, 0x82, 0x87, 0xe1, 0x21,
	0x76, 0x9c, 0x38, 0xed, 0x84, 0x50, 0xfb, 0x0a, 0x3c, 0x00, 0xaa, 0xed, 0x6e, 0x65, 0x8d, 0x76,
	0xcb, 0xe7, 0xef, 0xa7, 0xdf, 0xf7, 0xf9, 0x1f, 0x83, 0xbd, 0x04, 0x27, 0xd3, 0x11, 0xcb, 0x83,
	0x2c, 0x4f, 0x49, 0x2e, 0xb3, 0xaf, 0x24, 0xa0, 0x24, 0x27, 0x22, 0x13, 0xfe, 0x84, 0x33, 0xc9,
	0xe0, 0x8e, 0x01, 0xfc, 0x5b, 0xa0, 0x5e, 0xa3, 0x8c, 0x32, 0xd5, 0x0d, 0x16, 0x5f, 0x1a, 0xac,
	0x7b, 0xeb, 0xa6, 0x09, 0xe6, 0x78, 0x6c, 0x44, 0xf5, 0x17, 0xeb, 0xfd, 0xdb, 0x2f, 0x83, 0xec,
	0xa6, 0x4c, 0x8c, 0x99, 0x88, 0xb5, 0x5b, 0x17, 0xba, 0xd5, 0xf8, 0x6b, 0x83, 0x6a, 0x47, 0x2f,
	0xd6, 0x97, 0x58, 0x12, 0xf8, 0x06, 0x94, 0xb5, 0xde, 0xb5, 0xf7, 0xed, 0x83, 0x4a, 0x73, 0xd7,
	0x5f, 0x5b, 0xd4, 0xbf, 0x50, 0x40, 0xb8, 0x79, 0xf5, 0x7b, 0xcf, 0x42, 0x06, 0x87, 0x9f, 0x00,
	0x4c, 0x64, 0x1a, 0x0b, 0x89, 0xbf, 0x64, 0x39, 0x8d, 0x29, 0xbe, 0xa4, 0x44, 0xb8, 0x1b, 0xfb,
	0xa5, 0x83, 0x4a, 0xf3, 0x55, 0x81, 0x24, 0x8c, 0x8e, 0xfb, 0x9a, 0xed, 0x2c, 0xd0, 0x76, 0x2e,
	0xf9, 0xd4, 0x28, 0x9d, 0x44, 0xa6, 0xab, 0x3d, 0x01, 0x7b, 0xe0, 0x29, 0x27, 0xdf, 0x30, 0x1f,
	0x2c, 0xbd, 0x25, 0xe5, 0x7d, 0x59, 0xe0, 0x45, 0x8a, 0x5b, 0x73, 0x56, 0xf9, 0xdd, 0xb9, 0x68,
	0x7c, 0x06, 0xb5, 0xa2, 0xf9, 0xf0, 0x39, 0x28, 0x0f, 0x49, 0x46, 0x87, 0x52, 0xdd, 0x7e, 0x13,
	0x99, 0x0a, 0xfa, 0xe0, 0x91, 0x1a, 0xec, 0x6e, 0xa8, 0x50, 0xdc, 0x82, 0xb9, 0xca, 0x82, 0x34,
	0xd6, 0xb8, 0xb1, 0x81, 0x73, 0x7f, 0x11, 0x78, 0x06, 0x9c, 0x45, 0x3a, 0x64, 0xc8, 0x46, 0x03,
	0xc2, 0x63, 0x39, 0x9d, 0x10, 0x35, 0x66, 0xab, 0xd9, 0x28, 0xf0, 0xf5, 0xef, 0xd0, 0x68, 0x3a,
	0x21, 0x68, 0x5b, 0xfc, 0x7f, 0x00, 0x9b, 0xe0, 0x31, 0x1e, 0x0c, 0x38, 0x11, 0x42, 0x6d, 0xf5,
	0x24, 0x74, 0x7f, 0xfd, 0x3c, 0xac, 0x99, 0xbf, 0xdb, 0xd2, 0x9d, 0xbe, 0xe4, 0x59, 0x4e, 0xd1,
	0x12, 0x84, 0x2d, 0x50, 0x5d, 0xcd, 0xd1, 0x2d, 0xa9, 0xeb, 0x78, 0x0f, 0xc7, 0x88, 0x2a, 0x2b,
	0xd9, 0xbd, 0x7e, 0x0b, 0xb6, 0xef, 0xad, 0x06, 0x9f, 0x81, 0x9d, 0x77, 0xdd, 0x5e, 0xeb, 0xb4,
	0x1b, 0x7d, 0x88, 0x2f, 0xd0, 0xf9, 0xfb, 0xee, 0x49, 0x1b, 0x39, 0x16, 0x84, 0x60, 0x2b, 0x8c,
	0x8e, 0xe3, 0x93, 0xf6, 0x69, 0xbb, 0xd3, 0x8a, 0xba, 0xe7, 0x3d, 0xc7, 0x0e, 0xcf, 0xae, 0x66,
	0x9e, 0x7d, 0x3d, 0xf3, 0xec, 0x3f, 0x33, 0xcf, 0xfe, 0x31, 0xf7, 0xac, 0xeb, 0xb9, 0x67, 0xdd,
	0xcc, 0x3d, 0xeb, 0xe3, 0x11, 0xcd, 0xe4, 0xf0, 0x32, 0xf1, 0x53, 0x36, 0x0e, 0xcc, 0x3a, 0x23,
	0x9c, 0x88, 0xc3, 0x8c, 0x2d, 0xcb, 0xe0, 0xfb, 0xca, 0x1b, 0x5f, 0xa4, 0x27, 0x92, 0xb2, 0x7a,
	0xc5, 0x47, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x86, 0x7d, 0x87, 0x6f, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardGauges) > 0 {
		for iNdEx := len(m.RewardGauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardGauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BtcStakingGauges) > 0 {
		for iNdEx := len(m.BtcStakingGauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcStakingGauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BTCStakingGaugeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCStakingGaugeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCStakingGaugeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gauge != nil {
		{
			size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardGaugeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardGaugeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardGaugeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardGauge != nil {
		{
			size, err := m.RewardGauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakeholderType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StakeholderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BtcStakingGauges) > 0 {
		for _, e := range m.BtcStakingGauges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardGauges) > 0 {
		for _, e := range m.RewardGauges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *BTCStakingGaugeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	if m.Gauge != nil {
		l = m.Gauge.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *RewardGaugeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeholderType != 0 {
		n += 1 + sovGenesis(uint64(m.StakeholderType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.RewardGauge != nil {
		l = m.RewardGauge.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStakingGauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcStakingGauges = append(m.BtcStakingGauges, BTCStakingGaugeEntry{})
			if err := m.BtcStakingGauges[len(m.BtcStakingGauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardGauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardGauges = append(m.RewardGauges, RewardGaugeEntry{})
			if err := m.RewardGauges[len(m.RewardGauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCStakingGaugeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCStakingGaugeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCStakingGaugeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gauge == nil {
				m.Gauge = &Gauge{}
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardGaugeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardGaugeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardGaugeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeholderType", wireType)
			}
			m.StakeholderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeholderType |= StakeholderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardGauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardGauge == nil {
				m.RewardGauge = &RewardGauge{}
			}
			if err := m.RewardGauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
