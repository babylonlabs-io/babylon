// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/incentive/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StakeholderType represents the different types of stakeholders.
type StakeholderType int32

const (
	// Finality provider stakeholder type
	FINALITY_PROVIDER StakeholderType = 0
	// BTC staker stakeholder type
	BTC_STAKER StakeholderType = 1
)

var StakeholderType_name = map[int32]string{
	0: "FINALITY_PROVIDER",
	1: "BTC_STAKER",
}

var StakeholderType_value = map[string]int32{
	"FINALITY_PROVIDER": 0,
	"BTC_STAKER":        1,
}

func (x StakeholderType) String() string {
	return proto.EnumName(StakeholderType_name, int32(x))
}

func (StakeholderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{0}
}

// GenesisState defines the incentive module's genesis state.
type GenesisState struct {
	// params the current params of the state.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// BTC staking gauge on every height
	BtcStakingGauges []BTCStakingGaugeEntry `protobuf:"bytes,2,rep,name=btc_staking_gauges,json=btcStakingGauges,proto3" json:"btc_staking_gauges"`
	// RewardGauges the reward gauge for each BTC staker and finality provider
	RewardGauges []RewardGaugeEntry `protobuf:"bytes,3,rep,name=reward_gauges,json=rewardGauges,proto3" json:"reward_gauges"`
	// Withdraw addresses of the delegators
	WithdrawAddresses []WithdrawAddressEntry `protobuf:"bytes,4,rep,name=withdraw_addresses,json=withdrawAddresses,proto3" json:"withdraw_addresses"`
	// refundable_msg_hashes is the set of hashes of messages that can be refunded
	RefundableMsgHashes []string `protobuf:"bytes,5,rep,name=refundable_msg_hashes,json=refundableMsgHashes,proto3" json:"refundable_msg_hashes,omitempty"`
	// finality_providers_current_rewards are the current rewards of finality
	// providers by addr
	FinalityProvidersCurrentRewards []FinalityProviderCurrentRewardsEntry `protobuf:"bytes,6,rep,name=finality_providers_current_rewards,json=finalityProvidersCurrentRewards,proto3" json:"finality_providers_current_rewards"`
	// finality_providers_historical_rewards are the historical rewards of
	// finality providers by addr and period
	FinalityProvidersHistoricalRewards []FinalityProviderHistoricalRewardsEntry `protobuf:"bytes,7,rep,name=finality_providers_historical_rewards,json=finalityProvidersHistoricalRewards,proto3" json:"finality_providers_historical_rewards"`
	// btc_delegation_rewards_trackers are the btc delegation rewards trackers
	// stored by finality provider and delegator addresses
	BtcDelegationRewardsTrackers []BTCDelegationRewardsTrackerEntry `protobuf:"bytes,8,rep,name=btc_delegation_rewards_trackers,json=btcDelegationRewardsTrackers,proto3" json:"btc_delegation_rewards_trackers"`
	// btc_delegators_to_fps are all the records of the delegators and the
	// finality providers to which it delegated some BTC
	BtcDelegatorsToFps []BTCDelegatorToFpEntry `protobuf:"bytes,9,rep,name=btc_delegators_to_fps,json=btcDelegatorsToFps,proto3" json:"btc_delegators_to_fps"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetBtcStakingGauges() []BTCStakingGaugeEntry {
	if m != nil {
		return m.BtcStakingGauges
	}
	return nil
}

func (m *GenesisState) GetRewardGauges() []RewardGaugeEntry {
	if m != nil {
		return m.RewardGauges
	}
	return nil
}

func (m *GenesisState) GetWithdrawAddresses() []WithdrawAddressEntry {
	if m != nil {
		return m.WithdrawAddresses
	}
	return nil
}

func (m *GenesisState) GetRefundableMsgHashes() []string {
	if m != nil {
		return m.RefundableMsgHashes
	}
	return nil
}

func (m *GenesisState) GetFinalityProvidersCurrentRewards() []FinalityProviderCurrentRewardsEntry {
	if m != nil {
		return m.FinalityProvidersCurrentRewards
	}
	return nil
}

func (m *GenesisState) GetFinalityProvidersHistoricalRewards() []FinalityProviderHistoricalRewardsEntry {
	if m != nil {
		return m.FinalityProvidersHistoricalRewards
	}
	return nil
}

func (m *GenesisState) GetBtcDelegationRewardsTrackers() []BTCDelegationRewardsTrackerEntry {
	if m != nil {
		return m.BtcDelegationRewardsTrackers
	}
	return nil
}

func (m *GenesisState) GetBtcDelegatorsToFps() []BTCDelegatorToFpEntry {
	if m != nil {
		return m.BtcDelegatorsToFps
	}
	return nil
}

// BTCStakingGaugeEntry represents a gauge for BTC staking rewards at a specific
// height.
type BTCStakingGaugeEntry struct {
	// Block height at which this gauge is set
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The gauge object storing rewards info
	Gauge *Gauge `protobuf:"bytes,2,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (m *BTCStakingGaugeEntry) Reset()         { *m = BTCStakingGaugeEntry{} }
func (m *BTCStakingGaugeEntry) String() string { return proto.CompactTextString(m) }
func (*BTCStakingGaugeEntry) ProtoMessage()    {}
func (*BTCStakingGaugeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{1}
}
func (m *BTCStakingGaugeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCStakingGaugeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCStakingGaugeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCStakingGaugeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCStakingGaugeEntry.Merge(m, src)
}
func (m *BTCStakingGaugeEntry) XXX_Size() int {
	return m.Size()
}
func (m *BTCStakingGaugeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCStakingGaugeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BTCStakingGaugeEntry proto.InternalMessageInfo

func (m *BTCStakingGaugeEntry) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BTCStakingGaugeEntry) GetGauge() *Gauge {
	if m != nil {
		return m.Gauge
	}
	return nil
}

// RewardGaugeEntry represents a reward gauge for a specific stakeholder.
type RewardGaugeEntry struct {
	// Type of stakeholder
	StakeholderType StakeholderType `protobuf:"varint,1,opt,name=stakeholder_type,json=stakeholderType,proto3,enum=babylon.incentive.StakeholderType" json:"stakeholder_type,omitempty"`
	// Address of the stakeholder
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The reward gauge object
	RewardGauge *RewardGauge `protobuf:"bytes,3,opt,name=reward_gauge,json=rewardGauge,proto3" json:"reward_gauge,omitempty"`
}

func (m *RewardGaugeEntry) Reset()         { *m = RewardGaugeEntry{} }
func (m *RewardGaugeEntry) String() string { return proto.CompactTextString(m) }
func (*RewardGaugeEntry) ProtoMessage()    {}
func (*RewardGaugeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{2}
}
func (m *RewardGaugeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardGaugeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardGaugeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardGaugeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardGaugeEntry.Merge(m, src)
}
func (m *RewardGaugeEntry) XXX_Size() int {
	return m.Size()
}
func (m *RewardGaugeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardGaugeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RewardGaugeEntry proto.InternalMessageInfo

func (m *RewardGaugeEntry) GetStakeholderType() StakeholderType {
	if m != nil {
		return m.StakeholderType
	}
	return FINALITY_PROVIDER
}

func (m *RewardGaugeEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardGaugeEntry) GetRewardGauge() *RewardGauge {
	if m != nil {
		return m.RewardGauge
	}
	return nil
}

// WithdrawAddressEntry holds the record of a withdraw address belonging to a
// delegator address.
type WithdrawAddressEntry struct {
	// Address of the delegator
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Withdraw address
	WithdrawAddress string `protobuf:"bytes,2,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *WithdrawAddressEntry) Reset()         { *m = WithdrawAddressEntry{} }
func (m *WithdrawAddressEntry) String() string { return proto.CompactTextString(m) }
func (*WithdrawAddressEntry) ProtoMessage()    {}
func (*WithdrawAddressEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{3}
}
func (m *WithdrawAddressEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawAddressEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawAddressEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawAddressEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawAddressEntry.Merge(m, src)
}
func (m *WithdrawAddressEntry) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawAddressEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawAddressEntry.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawAddressEntry proto.InternalMessageInfo

func (m *WithdrawAddressEntry) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *WithdrawAddressEntry) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

// FinalityProviderCurrentRewardsEntry represents a finality provider
// current rewards.
type FinalityProviderCurrentRewardsEntry struct {
	// Address of the finality provider
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The finality provider current rewards
	Rewards *FinalityProviderCurrentRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *FinalityProviderCurrentRewardsEntry) Reset()         { *m = FinalityProviderCurrentRewardsEntry{} }
func (m *FinalityProviderCurrentRewardsEntry) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderCurrentRewardsEntry) ProtoMessage()    {}
func (*FinalityProviderCurrentRewardsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{4}
}
func (m *FinalityProviderCurrentRewardsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderCurrentRewardsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderCurrentRewardsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderCurrentRewardsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderCurrentRewardsEntry.Merge(m, src)
}
func (m *FinalityProviderCurrentRewardsEntry) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderCurrentRewardsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderCurrentRewardsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderCurrentRewardsEntry proto.InternalMessageInfo

func (m *FinalityProviderCurrentRewardsEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FinalityProviderCurrentRewardsEntry) GetRewards() *FinalityProviderCurrentRewards {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// FinalityProviderHistoricalRewardsEntry represents a finality provider
// historical rewards by address and period.
type FinalityProviderHistoricalRewardsEntry struct {
	// Address of the finality provider
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Period of the historical reward
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// The finality provider historical rewards
	Rewards *FinalityProviderHistoricalRewards `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *FinalityProviderHistoricalRewardsEntry) Reset() {
	*m = FinalityProviderHistoricalRewardsEntry{}
}
func (m *FinalityProviderHistoricalRewardsEntry) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderHistoricalRewardsEntry) ProtoMessage()    {}
func (*FinalityProviderHistoricalRewardsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{5}
}
func (m *FinalityProviderHistoricalRewardsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderHistoricalRewardsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderHistoricalRewardsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderHistoricalRewardsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderHistoricalRewardsEntry.Merge(m, src)
}
func (m *FinalityProviderHistoricalRewardsEntry) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderHistoricalRewardsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderHistoricalRewardsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderHistoricalRewardsEntry proto.InternalMessageInfo

func (m *FinalityProviderHistoricalRewardsEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FinalityProviderHistoricalRewardsEntry) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *FinalityProviderHistoricalRewardsEntry) GetRewards() *FinalityProviderHistoricalRewards {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// BTCDelegationRewardsTrackerEntry represents a BTC delegation
// tracker entry based on the finality provider address, the delegator address
// and a BTCDelegationTracker
type BTCDelegationRewardsTrackerEntry struct {
	// Address of the finality provider
	FinalityProviderAddress string `protobuf:"bytes,1,opt,name=finality_provider_address,json=finalityProviderAddress,proto3" json:"finality_provider_address,omitempty"`
	// Address of the delegator
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// BTC delegation tracking information
	Tracker *BTCDelegationRewardsTracker `protobuf:"bytes,3,opt,name=tracker,proto3" json:"tracker,omitempty"`
}

func (m *BTCDelegationRewardsTrackerEntry) Reset()         { *m = BTCDelegationRewardsTrackerEntry{} }
func (m *BTCDelegationRewardsTrackerEntry) String() string { return proto.CompactTextString(m) }
func (*BTCDelegationRewardsTrackerEntry) ProtoMessage()    {}
func (*BTCDelegationRewardsTrackerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{6}
}
func (m *BTCDelegationRewardsTrackerEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegationRewardsTrackerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegationRewardsTrackerEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegationRewardsTrackerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegationRewardsTrackerEntry.Merge(m, src)
}
func (m *BTCDelegationRewardsTrackerEntry) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegationRewardsTrackerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegationRewardsTrackerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegationRewardsTrackerEntry proto.InternalMessageInfo

func (m *BTCDelegationRewardsTrackerEntry) GetFinalityProviderAddress() string {
	if m != nil {
		return m.FinalityProviderAddress
	}
	return ""
}

func (m *BTCDelegationRewardsTrackerEntry) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *BTCDelegationRewardsTrackerEntry) GetTracker() *BTCDelegationRewardsTracker {
	if m != nil {
		return m.Tracker
	}
	return nil
}

// BTCDelegatorToFpEntry holds an entry of a delegator
// and a finality provider to which it delegated
type BTCDelegatorToFpEntry struct {
	// Address of the delegator
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Address of the finality provider
	FinalityProviderAddress string `protobuf:"bytes,2,opt,name=finality_provider_address,json=finalityProviderAddress,proto3" json:"finality_provider_address,omitempty"`
}

func (m *BTCDelegatorToFpEntry) Reset()         { *m = BTCDelegatorToFpEntry{} }
func (m *BTCDelegatorToFpEntry) String() string { return proto.CompactTextString(m) }
func (*BTCDelegatorToFpEntry) ProtoMessage()    {}
func (*BTCDelegatorToFpEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d5400dc6b4b931, []int{7}
}
func (m *BTCDelegatorToFpEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegatorToFpEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegatorToFpEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegatorToFpEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegatorToFpEntry.Merge(m, src)
}
func (m *BTCDelegatorToFpEntry) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegatorToFpEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegatorToFpEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegatorToFpEntry proto.InternalMessageInfo

func (m *BTCDelegatorToFpEntry) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *BTCDelegatorToFpEntry) GetFinalityProviderAddress() string {
	if m != nil {
		return m.FinalityProviderAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("babylon.incentive.StakeholderType", StakeholderType_name, StakeholderType_value)
	proto.RegisterType((*GenesisState)(nil), "babylon.incentive.GenesisState")
	proto.RegisterType((*BTCStakingGaugeEntry)(nil), "babylon.incentive.BTCStakingGaugeEntry")
	proto.RegisterType((*RewardGaugeEntry)(nil), "babylon.incentive.RewardGaugeEntry")
	proto.RegisterType((*WithdrawAddressEntry)(nil), "babylon.incentive.WithdrawAddressEntry")
	proto.RegisterType((*FinalityProviderCurrentRewardsEntry)(nil), "babylon.incentive.FinalityProviderCurrentRewardsEntry")
	proto.RegisterType((*FinalityProviderHistoricalRewardsEntry)(nil), "babylon.incentive.FinalityProviderHistoricalRewardsEntry")
	proto.RegisterType((*BTCDelegationRewardsTrackerEntry)(nil), "babylon.incentive.BTCDelegationRewardsTrackerEntry")
	proto.RegisterType((*BTCDelegatorToFpEntry)(nil), "babylon.incentive.BTCDelegatorToFpEntry")
}

func init() { proto.RegisterFile("babylon/incentive/genesis.proto", fileDescriptor_41d5400dc6b4b931) }

var fileDescriptor_41d5400dc6b4b931 = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0xd3, 0x6c, 0x42, 0x5f, 0xcb, 0x36, 0x1d, 0xda, 0xc5, 0xad, 0x90, 0x5b, 0xbc, 0x02,
	0x2a, 0xa4, 0x4d, 0x44, 0x8a, 0x40, 0x5c, 0x90, 0x9a, 0x6e, 0xbb, 0xad, 0x96, 0x96, 0xca, 0xb1,
	0x40, 0xfc, 0x11, 0xd6, 0xd8, 0x9e, 0xda, 0xa3, 0x4d, 0x3d, 0xd1, 0xcc, 0x74, 0x4b, 0x6e, 0x1c,
	0xd9, 0x03, 0x12, 0xe2, 0x23, 0x80, 0xc4, 0x27, 0xd8, 0x8f, 0xc0, 0x61, 0x8f, 0x2b, 0x4e, 0x7b,
	0x42, 0xa8, 0xfd, 0x22, 0x28, 0xe3, 0x71, 0xe2, 0x26, 0xde, 0x36, 0xad, 0xb8, 0x79, 0xfc, 0x7e,
	0xef, 0x37, 0xbf, 0xf7, 0xfc, 0x7e, 0x4f, 0x86, 0x35, 0x1f, 0xfb, 0xfd, 0x2e, 0x4b, 0x9a, 0x34,
	0x09, 0x48, 0x22, 0xe9, 0x53, 0xd2, 0x8c, 0x48, 0x42, 0x04, 0x15, 0x8d, 0x1e, 0x67, 0x92, 0xa1,
	0x45, 0x0d, 0x68, 0x0c, 0x01, 0xab, 0x4b, 0x11, 0x8b, 0x98, 0x8a, 0x36, 0x07, 0x4f, 0x29, 0x70,
	0xd5, 0x9a, 0x64, 0xea, 0x61, 0x8e, 0x4f, 0x34, 0xd1, 0xea, 0xbb, 0x93, 0xf1, 0xe1, 0x93, 0x86,
	0x14, 0x88, 0xe1, 0xe4, 0x0c, 0xf3, 0x30, 0xe3, 0x58, 0x09, 0x98, 0x38, 0x61, 0xc2, 0x4b, 0x2f,
	0x4f, 0x0f, 0x69, 0xc8, 0xfe, 0xa5, 0x06, 0xf3, 0x8f, 0x52, 0xe5, 0x1d, 0x89, 0x25, 0x41, 0x9f,
	0x42, 0x35, 0xbd, 0xdf, 0x34, 0xd6, 0x8d, 0x8d, 0xb9, 0xd6, 0x4a, 0x63, 0xa2, 0x92, 0xc6, 0x91,
	0x02, 0xb4, 0x2b, 0x2f, 0xfe, 0x59, 0x2b, 0x39, 0x1a, 0x8e, 0xbe, 0x03, 0xe4, 0xcb, 0xc0, 0x13,
	0x12, 0x3f, 0xa1, 0x49, 0xe4, 0x45, 0xf8, 0x34, 0x22, 0xc2, 0x2c, 0xaf, 0xcf, 0x6c, 0xcc, 0xb5,
	0x3e, 0x28, 0x20, 0x69, 0xbb, 0xdb, 0x9d, 0x14, 0xfb, 0x68, 0x00, 0xdd, 0x49, 0x24, 0xef, 0x6b,
	0xca, 0xba, 0x2f, 0x83, 0x7c, 0x4c, 0xa0, 0x43, 0x78, 0x33, 0x2d, 0x29, 0xe3, 0x9d, 0x51, 0xbc,
	0xf7, 0x0b, 0x78, 0x1d, 0x85, 0x9b, 0xe0, 0x9c, 0xe7, 0xa3, 0xf7, 0x02, 0x7d, 0x0f, 0xe8, 0x8c,
	0xca, 0x38, 0xe4, 0xf8, 0xcc, 0xc3, 0x61, 0xc8, 0x89, 0x10, 0x44, 0x98, 0x95, 0xd7, 0x8a, 0xfd,
	0x5a, 0x83, 0xb7, 0x52, 0x6c, 0x9e, 0x78, 0xf1, 0xec, 0x72, 0x8c, 0x08, 0xd4, 0x82, 0x65, 0x4e,
	0x8e, 0x4f, 0x93, 0x10, 0xfb, 0x5d, 0xe2, 0x9d, 0x88, 0xc8, 0x8b, 0xb1, 0x88, 0x89, 0x30, 0xef,
	0xac, 0xcf, 0x6c, 0xcc, 0x3a, 0x6f, 0x8d, 0x82, 0x07, 0x22, 0xda, 0x53, 0x21, 0xf4, 0xcc, 0x00,
	0xfb, 0x98, 0x26, 0xb8, 0x4b, 0x65, 0x7f, 0xf0, 0xa1, 0x9e, 0xd2, 0x90, 0x70, 0xe1, 0x05, 0xa7,
	0x9c, 0x93, 0x44, 0x7a, 0xfa, 0x83, 0x9a, 0x55, 0x25, 0xf1, 0x93, 0x02, 0x89, 0xbb, 0x3a, 0xf9,
	0x48, 0xe7, 0x6e, 0xa7, 0x99, 0x69, 0x3b, 0x2e, 0x29, 0x5e, 0x3b, 0x1e, 0x83, 0x8a, 0xcb, 0x58,
	0xf4, 0x9b, 0x01, 0xef, 0x15, 0x68, 0x89, 0xa9, 0x90, 0x8c, 0xd3, 0x00, 0x77, 0x87, 0x72, 0x6a,
	0x4a, 0xce, 0x67, 0x53, 0xc8, 0xd9, 0x1b, 0x26, 0x17, 0x28, 0xb2, 0x27, 0x14, 0x4d, 0xc0, 0xd1,
	0x4f, 0x06, 0xac, 0x0d, 0x06, 0x2c, 0x24, 0x5d, 0x12, 0x61, 0x49, 0x59, 0x92, 0xa9, 0xf0, 0x24,
	0xc7, 0xc1, 0x13, 0xc2, 0x85, 0xf9, 0x86, 0x92, 0xb3, 0x59, 0x3c, 0x6d, 0x0f, 0x87, 0x89, 0x9a,
	0xd2, 0x4d, 0xd3, 0xf2, 0x42, 0xde, 0xf1, 0x65, 0xf0, 0x3a, 0x9c, 0x40, 0x18, 0x96, 0x73, 0x0a,
	0x18, 0x17, 0x9e, 0x64, 0xde, 0x71, 0x4f, 0x98, 0xb3, 0xea, 0xde, 0x8d, 0x2b, 0xef, 0x65, 0xdc,
	0x65, 0xbb, 0xbd, 0xfc, 0x65, 0x68, 0x74, 0x19, 0xe3, 0x62, 0x10, 0x15, 0xf6, 0x0f, 0xb0, 0x54,
	0x64, 0x0c, 0x74, 0x0f, 0xaa, 0x31, 0xa1, 0x51, 0x2c, 0x95, 0x2d, 0x2b, 0x8e, 0x3e, 0xa1, 0x06,
	0xdc, 0x51, 0x8e, 0x30, 0xcb, 0xca, 0xad, 0x66, 0x81, 0x04, 0xc5, 0xe2, 0xa4, 0x30, 0xfb, 0x95,
	0x01, 0xf5, 0x71, 0x87, 0xa0, 0x03, 0xa8, 0x0f, 0x6c, 0x4b, 0x62, 0xd6, 0x0d, 0x09, 0xf7, 0x64,
	0xbf, 0x47, 0xd4, 0x35, 0x77, 0x5b, 0x76, 0x01, 0x5f, 0x67, 0x04, 0x75, 0xfb, 0x3d, 0xe2, 0x2c,
	0x88, 0xcb, 0x2f, 0x50, 0x0b, 0x6a, 0xda, 0x53, 0x4a, 0xd5, 0x6c, 0xdb, 0xfc, 0xfb, 0xf9, 0x83,
	0x25, 0xbd, 0x76, 0xb4, 0x4b, 0x3a, 0x92, 0xd3, 0x24, 0x72, 0x32, 0x20, 0xda, 0x82, 0xf9, 0xbc,
	0xc1, 0xcd, 0x19, 0x55, 0x8e, 0x75, 0xb5, 0xbf, 0x9d, 0xb9, 0x9c, 0xa9, 0xed, 0xdf, 0x0d, 0x58,
	0x2a, 0xf2, 0x29, 0xda, 0x81, 0xc5, 0xe1, 0x27, 0xcb, 0xdc, 0xae, 0xea, 0xbb, 0x4a, 0x59, 0x7d,
	0x98, 0xa2, 0xdf, 0xa3, 0x6d, 0xa8, 0x8f, 0xef, 0x8c, 0x6b, 0xeb, 0x5b, 0x18, 0x5b, 0x0e, 0xf6,
	0x9f, 0x06, 0xdc, 0x9f, 0xc2, 0xa9, 0xf9, 0x1e, 0x1a, 0xd3, 0xf6, 0xf0, 0x31, 0xd4, 0x32, 0x5f,
	0xa6, 0xd3, 0xf0, 0xd1, 0x8d, 0xd7, 0x84, 0x93, 0x31, 0xd8, 0x7f, 0x19, 0xf0, 0xfe, 0x74, 0x1e,
	0xbe, 0x95, 0xd6, 0x7b, 0x50, 0xed, 0x11, 0x4e, 0x59, 0xa8, 0xa4, 0x56, 0x1c, 0x7d, 0x42, 0x87,
	0xa3, 0x1a, 0xd2, 0x11, 0xf8, 0xf8, 0x36, 0xbb, 0x65, 0x54, 0xc6, 0xb3, 0x32, 0xac, 0x5f, 0xe7,
	0x7d, 0xe4, 0xc2, 0xca, 0xc4, 0xba, 0x9b, 0x7a, 0x50, 0xde, 0x1e, 0xdf, 0x5d, 0xd9, 0xbc, 0x14,
	0x8e, 0x5d, 0xf9, 0xc6, 0x63, 0xb7, 0x07, 0x35, 0xbd, 0xdf, 0x74, 0x47, 0x1a, 0x37, 0x5b, 0x6f,
	0x4e, 0x96, 0x6e, 0x3f, 0x37, 0x60, 0xb9, 0x70, 0x1f, 0xfd, 0x5f, 0x0e, 0xb9, 0xb2, 0x8f, 0xe5,
	0x5b, 0xf6, 0xf1, 0xc3, 0xcf, 0x61, 0x61, 0x6c, 0xe5, 0xa0, 0x65, 0x58, 0xdc, 0xdd, 0x3f, 0xdc,
	0xfa, 0x62, 0xdf, 0xfd, 0xc6, 0x3b, 0x72, 0xbe, 0xfc, 0x6a, 0xff, 0xe1, 0x8e, 0x53, 0x2f, 0xa1,
	0xbb, 0x00, 0x6d, 0x77, 0xdb, 0xeb, 0xb8, 0x5b, 0x8f, 0x77, 0x9c, 0xba, 0xb1, 0x5a, 0xf9, 0xf9,
	0x0f, 0xab, 0xd4, 0x3e, 0x78, 0x71, 0x6e, 0x19, 0x2f, 0xcf, 0x2d, 0xe3, 0xdf, 0x73, 0xcb, 0xf8,
	0xf5, 0xc2, 0x2a, 0xbd, 0xbc, 0xb0, 0x4a, 0xaf, 0x2e, 0xac, 0xd2, 0xb7, 0x9b, 0x11, 0x95, 0xf1,
	0xa9, 0xdf, 0x08, 0xd8, 0x49, 0x53, 0xf7, 0xb4, 0x8b, 0x7d, 0xf1, 0x80, 0xb2, 0xec, 0xd8, 0xfc,
	0x31, 0xf7, 0x53, 0x35, 0xd8, 0x8b, 0xc2, 0xaf, 0xaa, 0x1f, 0xa7, 0xcd, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xba, 0xa9, 0x65, 0x2a, 0x03, 0x0a, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcDelegatorsToFps) > 0 {
		for iNdEx := len(m.BtcDelegatorsToFps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegatorsToFps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BtcDelegationRewardsTrackers) > 0 {
		for iNdEx := len(m.BtcDelegationRewardsTrackers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegationRewardsTrackers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FinalityProvidersHistoricalRewards) > 0 {
		for iNdEx := len(m.FinalityProvidersHistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProvidersHistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FinalityProvidersCurrentRewards) > 0 {
		for iNdEx := len(m.FinalityProvidersCurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinalityProvidersCurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefundableMsgHashes) > 0 {
		for iNdEx := len(m.RefundableMsgHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RefundableMsgHashes[iNdEx])
			copy(dAtA[i:], m.RefundableMsgHashes[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.RefundableMsgHashes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WithdrawAddresses) > 0 {
		for iNdEx := len(m.WithdrawAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RewardGauges) > 0 {
		for iNdEx := len(m.RewardGauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardGauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BtcStakingGauges) > 0 {
		for iNdEx := len(m.BtcStakingGauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcStakingGauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BTCStakingGaugeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCStakingGaugeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCStakingGaugeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gauge != nil {
		{
			size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardGaugeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardGaugeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardGaugeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardGauge != nil {
		{
			size, err := m.RewardGauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakeholderType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StakeholderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawAddressEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawAddressEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawAddressEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderCurrentRewardsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderCurrentRewardsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderCurrentRewardsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderHistoricalRewardsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderHistoricalRewardsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderHistoricalRewardsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegationRewardsTrackerEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegationRewardsTrackerEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegationRewardsTrackerEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tracker != nil {
		{
			size, err := m.Tracker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalityProviderAddress) > 0 {
		i -= len(m.FinalityProviderAddress)
		copy(dAtA[i:], m.FinalityProviderAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FinalityProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegatorToFpEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegatorToFpEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegatorToFpEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalityProviderAddress) > 0 {
		i -= len(m.FinalityProviderAddress)
		copy(dAtA[i:], m.FinalityProviderAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FinalityProviderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BtcStakingGauges) > 0 {
		for _, e := range m.BtcStakingGauges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardGauges) > 0 {
		for _, e := range m.RewardGauges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WithdrawAddresses) > 0 {
		for _, e := range m.WithdrawAddresses {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RefundableMsgHashes) > 0 {
		for _, s := range m.RefundableMsgHashes {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FinalityProvidersCurrentRewards) > 0 {
		for _, e := range m.FinalityProvidersCurrentRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FinalityProvidersHistoricalRewards) > 0 {
		for _, e := range m.FinalityProvidersHistoricalRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BtcDelegationRewardsTrackers) > 0 {
		for _, e := range m.BtcDelegationRewardsTrackers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BtcDelegatorsToFps) > 0 {
		for _, e := range m.BtcDelegatorsToFps {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *BTCStakingGaugeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	if m.Gauge != nil {
		l = m.Gauge.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *RewardGaugeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeholderType != 0 {
		n += 1 + sovGenesis(uint64(m.StakeholderType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.RewardGauge != nil {
		l = m.RewardGauge.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *WithdrawAddressEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *FinalityProviderCurrentRewardsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *FinalityProviderHistoricalRewardsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *BTCDelegationRewardsTrackerEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FinalityProviderAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tracker != nil {
		l = m.Tracker.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *BTCDelegatorToFpEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.FinalityProviderAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcStakingGauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcStakingGauges = append(m.BtcStakingGauges, BTCStakingGaugeEntry{})
			if err := m.BtcStakingGauges[len(m.BtcStakingGauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardGauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardGauges = append(m.RewardGauges, RewardGaugeEntry{})
			if err := m.RewardGauges[len(m.RewardGauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddresses = append(m.WithdrawAddresses, WithdrawAddressEntry{})
			if err := m.WithdrawAddresses[len(m.WithdrawAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundableMsgHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundableMsgHashes = append(m.RefundableMsgHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProvidersCurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProvidersCurrentRewards = append(m.FinalityProvidersCurrentRewards, FinalityProviderCurrentRewardsEntry{})
			if err := m.FinalityProvidersCurrentRewards[len(m.FinalityProvidersCurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProvidersHistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProvidersHistoricalRewards = append(m.FinalityProvidersHistoricalRewards, FinalityProviderHistoricalRewardsEntry{})
			if err := m.FinalityProvidersHistoricalRewards[len(m.FinalityProvidersHistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegationRewardsTrackers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegationRewardsTrackers = append(m.BtcDelegationRewardsTrackers, BTCDelegationRewardsTrackerEntry{})
			if err := m.BtcDelegationRewardsTrackers[len(m.BtcDelegationRewardsTrackers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegatorsToFps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegatorsToFps = append(m.BtcDelegatorsToFps, BTCDelegatorToFpEntry{})
			if err := m.BtcDelegatorsToFps[len(m.BtcDelegatorsToFps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCStakingGaugeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCStakingGaugeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCStakingGaugeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gauge == nil {
				m.Gauge = &Gauge{}
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardGaugeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardGaugeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardGaugeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeholderType", wireType)
			}
			m.StakeholderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeholderType |= StakeholderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardGauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardGauge == nil {
				m.RewardGauge = &RewardGauge{}
			}
			if err := m.RewardGauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawAddressEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawAddressEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawAddressEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderCurrentRewardsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderCurrentRewardsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderCurrentRewardsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &FinalityProviderCurrentRewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderHistoricalRewardsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderHistoricalRewardsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderHistoricalRewardsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &FinalityProviderHistoricalRewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegationRewardsTrackerEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegationRewardsTrackerEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegationRewardsTrackerEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracker == nil {
				m.Tracker = &BTCDelegationRewardsTracker{}
			}
			if err := m.Tracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegatorToFpEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegatorToFpEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegatorToFpEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
