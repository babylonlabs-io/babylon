// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/incentive/rewards.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FinalityProviderHistoricalRewards represents the cumulative rewards ratio of
// the finality provider per sat in that period. The period is ommited here and
// should be part of the key used to store this structure. Key: Prefix +
// Finality provider bech32 address + Period.
type FinalityProviderHistoricalRewards struct {
	// The cumulative rewards of that finality provider per sat until that period
	// This coins will aways increase the value, never be reduced due to keep
	// acumulation and when the cumulative rewards will be used to distribute
	// rewards, 2 periods will be loaded, calculate the difference and multiplied
	// by the total sat amount delegated
	// https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
	CumulativeRewardsPerSat github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=cumulative_rewards_per_sat,json=cumulativeRewardsPerSat,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"cumulative_rewards_per_sat"`
}

func (m *FinalityProviderHistoricalRewards) Reset()         { *m = FinalityProviderHistoricalRewards{} }
func (m *FinalityProviderHistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderHistoricalRewards) ProtoMessage()    {}
func (*FinalityProviderHistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5a587351117eb0, []int{0}
}
func (m *FinalityProviderHistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderHistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderHistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderHistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderHistoricalRewards.Merge(m, src)
}
func (m *FinalityProviderHistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderHistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderHistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderHistoricalRewards proto.InternalMessageInfo

func (m *FinalityProviderHistoricalRewards) GetCumulativeRewardsPerSat() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CumulativeRewardsPerSat
	}
	return nil
}

// FinalityProviderCurrentRewards represents the current rewards of the pool of
// BTC delegations that delegated for this finality provider is entitled to.
// Note: This rewards are for the BTC delegators that delegated to this FP
// the FP itself is not the owner or can withdraw this rewards.
// If a slash event happens with this finality provider, all the delegations
// need to withdraw to the RewardGauge and the related scrutures should be
// deleted. Key: Prefix + Finality provider bech32 address.
type FinalityProviderCurrentRewards struct {
	// CurrentRewards is the current rewards that the finality provider have and
	// it was not yet stored inside the FinalityProviderHistoricalRewards. Once
	// something happens that modifies the amount of satoshis delegated to this
	// finality provider or the delegators starting period (activation, unbonding
	// or btc rewards withdraw) a new period must be created, accumulate this
	// rewards to FinalityProviderHistoricalRewards with a new period and zero out
	// the Current Rewards.
	CurrentRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=current_rewards,json=currentRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_rewards"`
	// Period stores the current period that serves as a reference for
	// creating new historical rewards and correlate with
	// BTCDelegationRewardsTracker StartPeriodCumulativeReward.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// TotalActiveSat is the total amount of active satoshi delegated
	// to this finality provider.
	TotalActiveSat cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_active_sat,json=totalActiveSat,proto3,customtype=cosmossdk.io/math.Int" json:"total_active_sat"`
}

func (m *FinalityProviderCurrentRewards) Reset()         { *m = FinalityProviderCurrentRewards{} }
func (m *FinalityProviderCurrentRewards) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderCurrentRewards) ProtoMessage()    {}
func (*FinalityProviderCurrentRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5a587351117eb0, []int{1}
}
func (m *FinalityProviderCurrentRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderCurrentRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderCurrentRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderCurrentRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderCurrentRewards.Merge(m, src)
}
func (m *FinalityProviderCurrentRewards) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderCurrentRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderCurrentRewards.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderCurrentRewards proto.InternalMessageInfo

func (m *FinalityProviderCurrentRewards) GetCurrentRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentRewards
	}
	return nil
}

func (m *FinalityProviderCurrentRewards) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

// BTCDelegationRewardsTracker represents the structure that holds information
// from the last time this BTC delegator withdraw the rewards or modified his
// active staked amount to one finality provider.
// The finality provider address is ommitted here but should be part of the
// key used to store this structure together with the BTC delegator address.
type BTCDelegationRewardsTracker struct {
	// StartPeriodCumulativeReward the starting period the the BTC delegator
	// made his last withdraw of rewards or modified his active staking amount
	// of satoshis.
	StartPeriodCumulativeReward uint64 `protobuf:"varint,1,opt,name=start_period_cumulative_reward,json=startPeriodCumulativeReward,proto3" json:"start_period_cumulative_reward,omitempty"`
	// TotalActiveSat is the total amount of active satoshi delegated
	// to one specific finality provider.
	TotalActiveSat cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_active_sat,json=totalActiveSat,proto3,customtype=cosmossdk.io/math.Int" json:"total_active_sat"`
}

func (m *BTCDelegationRewardsTracker) Reset()         { *m = BTCDelegationRewardsTracker{} }
func (m *BTCDelegationRewardsTracker) String() string { return proto.CompactTextString(m) }
func (*BTCDelegationRewardsTracker) ProtoMessage()    {}
func (*BTCDelegationRewardsTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5a587351117eb0, []int{2}
}
func (m *BTCDelegationRewardsTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegationRewardsTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegationRewardsTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegationRewardsTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegationRewardsTracker.Merge(m, src)
}
func (m *BTCDelegationRewardsTracker) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegationRewardsTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegationRewardsTracker.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegationRewardsTracker proto.InternalMessageInfo

func (m *BTCDelegationRewardsTracker) GetStartPeriodCumulativeReward() uint64 {
	if m != nil {
		return m.StartPeriodCumulativeReward
	}
	return 0
}

func init() {
	proto.RegisterType((*FinalityProviderHistoricalRewards)(nil), "babylon.incentive.FinalityProviderHistoricalRewards")
	proto.RegisterType((*FinalityProviderCurrentRewards)(nil), "babylon.incentive.FinalityProviderCurrentRewards")
	proto.RegisterType((*BTCDelegationRewardsTracker)(nil), "babylon.incentive.BTCDelegationRewardsTracker")
}

func init() { proto.RegisterFile("babylon/incentive/rewards.proto", fileDescriptor_fa5a587351117eb0) }

var fileDescriptor_fa5a587351117eb0 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xe3, 0x14, 0xf5, 0x60, 0x50, 0x81, 0x88, 0x3f, 0x69, 0x2a, 0x39, 0xa1, 0xa7, 0x48,
	0x28, 0x6b, 0x5a, 0x24, 0xee, 0x64, 0x11, 0xa2, 0xb7, 0x28, 0x94, 0x0b, 0x97, 0x95, 0xd7, 0x6b,
	0xa5, 0x56, 0x36, 0x9e, 0xc8, 0x9e, 0x2c, 0xe4, 0x01, 0x90, 0x38, 0xf2, 0x1c, 0x1c, 0x38, 0x71,
	0xe1, 0x0d, 0x7a, 0xac, 0x38, 0x21, 0x0e, 0x05, 0x25, 0x2f, 0x82, 0xd6, 0x76, 0xa0, 0x14, 0x6e,
	0x88, 0xd3, 0xee, 0xec, 0x7c, 0x9e, 0xef, 0xa7, 0xcf, 0xb3, 0xb4, 0x9b, 0x8b, 0x7c, 0x59, 0x82,
	0xe1, 0xda, 0x48, 0x65, 0x50, 0x57, 0x8a, 0x5b, 0xf5, 0x4a, 0xd8, 0xc2, 0x25, 0x73, 0x0b, 0x08,
	0xad, 0x9b, 0x51, 0x90, 0xfc, 0x14, 0x74, 0x6e, 0x4d, 0x60, 0x02, 0xbe, 0xcb, 0xeb, 0xb7, 0x20,
	0xec, 0x30, 0x09, 0x6e, 0x06, 0x8e, 0xe7, 0xc2, 0x29, 0x5e, 0x1d, 0xe4, 0x0a, 0xc5, 0x01, 0x97,
	0xa0, 0x4d, 0xec, 0xef, 0x86, 0x7e, 0x16, 0x0e, 0x86, 0x22, 0xb4, 0xf6, 0x3f, 0x10, 0x7a, 0xef,
	0xa9, 0x36, 0xa2, 0xd4, 0xb8, 0x1c, 0x59, 0xa8, 0x74, 0xa1, 0xec, 0x33, 0xed, 0x10, 0xac, 0x96,
	0xa2, 0x1c, 0x07, 0x9e, 0xd6, 0x5b, 0x42, 0x3b, 0x72, 0x31, 0x5b, 0x94, 0xa2, 0xa6, 0xc8, 0x22,
	0x66, 0x36, 0x57, 0x36, 0x73, 0x02, 0xdb, 0xa4, 0xb7, 0xd5, 0xbf, 0x7a, 0xb8, 0x9b, 0xc4, 0xc9,
	0x35, 0x46, 0x12, 0x31, 0x92, 0x14, 0xb4, 0x19, 0x3e, 0x38, 0x3d, 0xef, 0x36, 0xde, 0x7f, 0xeb,
	0xf6, 0x27, 0x1a, 0x4f, 0x16, 0x79, 0x22, 0x61, 0x16, 0x31, 0xe2, 0x63, 0xe0, 0x8a, 0x29, 0xc7,
	0xe5, 0x5c, 0x39, 0x7f, 0xc0, 0x8d, 0xef, 0xfe, 0xb2, 0x8b, 0x10, 0x23, 0x65, 0x9f, 0x0b, 0xdc,
	0x7f, 0xd3, 0xa4, 0xec, 0x32, 0x70, 0xba, 0xb0, 0x56, 0x19, 0xdc, 0xd0, 0x22, 0xbd, 0x2e, 0xc3,
	0x97, 0x0d, 0xe9, 0xff, 0x20, 0xdc, 0x91, 0xbf, 0xbb, 0xde, 0xa1, 0xdb, 0x73, 0x65, 0x35, 0x14,
	0xed, 0x66, 0x8f, 0xf4, 0xaf, 0x8c, 0x63, 0xd5, 0x7a, 0x41, 0x6f, 0x20, 0xa0, 0x28, 0x33, 0x21,
	0x7d, 0x78, 0x75, 0x60, 0x5b, 0x3d, 0xd2, 0xbf, 0x36, 0xbc, 0x5f, 0x7b, 0x7e, 0x3d, 0xef, 0xde,
	0x0e, 0x0e, 0xae, 0x98, 0x26, 0x1a, 0xf8, 0x4c, 0xe0, 0x49, 0x72, 0x64, 0xf0, 0xf3, 0xc7, 0x01,
	0x8d, 0xb8, 0x47, 0x06, 0xc7, 0x3b, 0x7e, 0xc8, 0x63, 0x3f, 0xa3, 0xce, 0xe1, 0x13, 0xa1, 0x7b,
	0xc3, 0xe3, 0xf4, 0x89, 0x2a, 0xd5, 0x44, 0xa0, 0x06, 0x13, 0x39, 0x8e, 0xad, 0x90, 0x53, 0x65,
	0x5b, 0x29, 0x65, 0x0e, 0x85, 0xc5, 0x2c, 0x60, 0x64, 0x7f, 0x5c, 0x5f, 0x9b, 0x78, 0xcc, 0x3d,
	0xaf, 0x1a, 0x79, 0x51, 0x7a, 0x29, 0xf3, 0xbf, 0xb2, 0x37, 0xff, 0x99, 0x7d, 0x38, 0x3a, 0x5d,
	0x31, 0x72, 0xb6, 0x62, 0xe4, 0xfb, 0x8a, 0x91, 0x77, 0x6b, 0xd6, 0x38, 0x5b, 0xb3, 0xc6, 0x97,
	0x35, 0x6b, 0xbc, 0x7c, 0x74, 0x21, 0xfe, 0xb8, 0xfd, 0xa5, 0xc8, 0xdd, 0x40, 0xc3, 0xa6, 0xe4,
	0xd5, 0x21, 0x7f, 0x7d, 0xe1, 0x97, 0xf1, 0x57, 0x92, 0x6f, 0xfb, 0x6d, 0x7e, 0xf8, 0x23, 0x00,
	0x00, 0xff, 0xff, 0x43, 0xec, 0x8d, 0xfd, 0x54, 0x03, 0x00, 0x00,
}

func (m *FinalityProviderHistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderHistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderHistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeRewardsPerSat) > 0 {
		for iNdEx := len(m.CumulativeRewardsPerSat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardsPerSat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderCurrentRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderCurrentRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderCurrentRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalActiveSat.Size()
		i -= size
		if _, err := m.TotalActiveSat.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegationRewardsTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegationRewardsTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegationRewardsTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalActiveSat.Size()
		i -= size
		if _, err := m.TotalActiveSat.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.StartPeriodCumulativeReward != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.StartPeriodCumulativeReward))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalityProviderHistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardsPerSat) > 0 {
		for _, e := range m.CumulativeRewardsPerSat {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	return n
}

func (m *FinalityProviderCurrentRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovRewards(uint64(m.Period))
	}
	l = m.TotalActiveSat.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func (m *BTCDelegationRewardsTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartPeriodCumulativeReward != 0 {
		n += 1 + sovRewards(uint64(m.StartPeriodCumulativeReward))
	}
	l = m.TotalActiveSat.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func sovRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewards(x uint64) (n int) {
	return sovRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalityProviderHistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderHistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderHistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardsPerSat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardsPerSat = append(m.CumulativeRewardsPerSat, types.Coin{})
			if err := m.CumulativeRewardsPerSat[len(m.CumulativeRewardsPerSat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderCurrentRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderCurrentRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderCurrentRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.Coin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveSat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalActiveSat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegationRewardsTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegationRewardsTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegationRewardsTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPeriodCumulativeReward", wireType)
			}
			m.StartPeriodCumulativeReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPeriodCumulativeReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveSat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalActiveSat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewards = fmt.Errorf("proto: unexpected end of group")
)
