// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/incentive/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryRewardGaugesRequest is request type for the Query/RewardGauges RPC
// method.
type QueryRewardGaugesRequest struct {
	// address is the address of the stakeholder in bech32 string
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRewardGaugesRequest) Reset()         { *m = QueryRewardGaugesRequest{} }
func (m *QueryRewardGaugesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardGaugesRequest) ProtoMessage()    {}
func (*QueryRewardGaugesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{2}
}
func (m *QueryRewardGaugesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardGaugesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardGaugesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardGaugesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardGaugesRequest.Merge(m, src)
}
func (m *QueryRewardGaugesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardGaugesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardGaugesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardGaugesRequest proto.InternalMessageInfo

func (m *QueryRewardGaugesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RewardGaugesResponse is an object that stores rewards distributed to a BTC
// staking stakeholder
type RewardGaugesResponse struct {
	// coins are coins that have been in the gauge
	// Can have multiple coin denoms
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// withdrawn_coins are coins that have been withdrawn by the stakeholder
	// already
	WithdrawnCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=withdrawn_coins,json=withdrawnCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_coins"`
}

func (m *RewardGaugesResponse) Reset()         { *m = RewardGaugesResponse{} }
func (m *RewardGaugesResponse) String() string { return proto.CompactTextString(m) }
func (*RewardGaugesResponse) ProtoMessage()    {}
func (*RewardGaugesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{3}
}
func (m *RewardGaugesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardGaugesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardGaugesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardGaugesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardGaugesResponse.Merge(m, src)
}
func (m *RewardGaugesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardGaugesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardGaugesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardGaugesResponse proto.InternalMessageInfo

func (m *RewardGaugesResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *RewardGaugesResponse) GetWithdrawnCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.WithdrawnCoins
	}
	return nil
}

// QueryRewardGaugesResponse is response type for the Query/RewardGauges RPC
// method.
type QueryRewardGaugesResponse struct {
	// reward_gauges is the map of reward gauges, where key is the stakeholder
	// type and value is the reward gauge holding all rewards for the stakeholder
	// in that type
	RewardGauges map[string]*RewardGaugesResponse `protobuf:"bytes,1,rep,name=reward_gauges,json=rewardGauges,proto3" json:"reward_gauges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryRewardGaugesResponse) Reset()         { *m = QueryRewardGaugesResponse{} }
func (m *QueryRewardGaugesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardGaugesResponse) ProtoMessage()    {}
func (*QueryRewardGaugesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{4}
}
func (m *QueryRewardGaugesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardGaugesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardGaugesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardGaugesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardGaugesResponse.Merge(m, src)
}
func (m *QueryRewardGaugesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardGaugesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardGaugesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardGaugesResponse proto.InternalMessageInfo

func (m *QueryRewardGaugesResponse) GetRewardGauges() map[string]*RewardGaugesResponse {
	if m != nil {
		return m.RewardGauges
	}
	return nil
}

// QueryBTCStakingGaugeRequest is request type for the Query/BTCStakingGauge RPC
// method.
type QueryBTCStakingGaugeRequest struct {
	// height is the queried Babylon height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBTCStakingGaugeRequest) Reset()         { *m = QueryBTCStakingGaugeRequest{} }
func (m *QueryBTCStakingGaugeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCStakingGaugeRequest) ProtoMessage()    {}
func (*QueryBTCStakingGaugeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{5}
}
func (m *QueryBTCStakingGaugeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCStakingGaugeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCStakingGaugeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCStakingGaugeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCStakingGaugeRequest.Merge(m, src)
}
func (m *QueryBTCStakingGaugeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCStakingGaugeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCStakingGaugeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCStakingGaugeRequest proto.InternalMessageInfo

func (m *QueryBTCStakingGaugeRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// BTCStakingGaugeResponse is response type for the Query/BTCStakingGauge RPC
// method.
type BTCStakingGaugeResponse struct {
	// coins that have been in the gauge
	// can have multiple coin denoms
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *BTCStakingGaugeResponse) Reset()         { *m = BTCStakingGaugeResponse{} }
func (m *BTCStakingGaugeResponse) String() string { return proto.CompactTextString(m) }
func (*BTCStakingGaugeResponse) ProtoMessage()    {}
func (*BTCStakingGaugeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{6}
}
func (m *BTCStakingGaugeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCStakingGaugeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCStakingGaugeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCStakingGaugeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCStakingGaugeResponse.Merge(m, src)
}
func (m *BTCStakingGaugeResponse) XXX_Size() int {
	return m.Size()
}
func (m *BTCStakingGaugeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCStakingGaugeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCStakingGaugeResponse proto.InternalMessageInfo

func (m *BTCStakingGaugeResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

// QueryBTCStakingGaugeResponse is response type for the Query/BTCStakingGauge
// RPC method.
type QueryBTCStakingGaugeResponse struct {
	// gauge is the BTC staking gauge at the queried height
	Gauge *BTCStakingGaugeResponse `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge,omitempty"`
}

func (m *QueryBTCStakingGaugeResponse) Reset()         { *m = QueryBTCStakingGaugeResponse{} }
func (m *QueryBTCStakingGaugeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCStakingGaugeResponse) ProtoMessage()    {}
func (*QueryBTCStakingGaugeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{7}
}
func (m *QueryBTCStakingGaugeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCStakingGaugeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCStakingGaugeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCStakingGaugeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCStakingGaugeResponse.Merge(m, src)
}
func (m *QueryBTCStakingGaugeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCStakingGaugeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCStakingGaugeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCStakingGaugeResponse proto.InternalMessageInfo

func (m *QueryBTCStakingGaugeResponse) GetGauge() *BTCStakingGaugeResponse {
	if m != nil {
		return m.Gauge
	}
	return nil
}

// QueryDelegatorWithdrawAddressRequest is the request type for the
// Query/DelegatorWithdrawAddress RPC method.
type QueryDelegatorWithdrawAddressRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryDelegatorWithdrawAddressRequest) Reset()         { *m = QueryDelegatorWithdrawAddressRequest{} }
func (m *QueryDelegatorWithdrawAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorWithdrawAddressRequest) ProtoMessage()    {}
func (*QueryDelegatorWithdrawAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{8}
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorWithdrawAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorWithdrawAddressRequest.Merge(m, src)
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorWithdrawAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorWithdrawAddressRequest proto.InternalMessageInfo

// QueryDelegatorWithdrawAddressResponse is the response type for the
// Query/DelegatorWithdrawAddress RPC method.
type QueryDelegatorWithdrawAddressResponse struct {
	// withdraw_address defines the delegator address to query for.
	WithdrawAddress string `protobuf:"bytes,1,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *QueryDelegatorWithdrawAddressResponse) Reset()         { *m = QueryDelegatorWithdrawAddressResponse{} }
func (m *QueryDelegatorWithdrawAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorWithdrawAddressResponse) ProtoMessage()    {}
func (*QueryDelegatorWithdrawAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{9}
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorWithdrawAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorWithdrawAddressResponse.Merge(m, src)
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorWithdrawAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorWithdrawAddressResponse proto.InternalMessageInfo

// QueryDelegationRewardsRequest is the request type for the
// Query/DelegationRewards RPC method.
type QueryDelegationRewardsRequest struct {
	// finality_provider_address defines the finality provider address of the
	// delegation.
	FinalityProviderAddress string `protobuf:"bytes,1,opt,name=finality_provider_address,json=finalityProviderAddress,proto3" json:"finality_provider_address,omitempty"`
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryDelegationRewardsRequest) Reset()         { *m = QueryDelegationRewardsRequest{} }
func (m *QueryDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{10}
}
func (m *QueryDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationRewardsRequest proto.InternalMessageInfo

// QueryDelegationRewardsResponse is the response type for the
// Query/DelegationRewards RPC method.
type QueryDelegationRewardsResponse struct {
	// rewards are the delegation reward coins
	// Can have multiple coin denoms
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *QueryDelegationRewardsResponse) Reset()         { *m = QueryDelegationRewardsResponse{} }
func (m *QueryDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{11}
}
func (m *QueryDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationRewardsResponse proto.InternalMessageInfo

// QueryFpCurrentRewardsRequest is the request type for the
// Query/FpCurrentRewards RPC method.
type QueryFpCurrentRewardsRequest struct {
	// finality_provider_address defines the finality provider address of the
	// delegation.
	FinalityProviderAddress string `protobuf:"bytes,1,opt,name=finality_provider_address,json=finalityProviderAddress,proto3" json:"finality_provider_address,omitempty"`
}

func (m *QueryFpCurrentRewardsRequest) Reset()         { *m = QueryFpCurrentRewardsRequest{} }
func (m *QueryFpCurrentRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFpCurrentRewardsRequest) ProtoMessage()    {}
func (*QueryFpCurrentRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{12}
}
func (m *QueryFpCurrentRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFpCurrentRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFpCurrentRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFpCurrentRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFpCurrentRewardsRequest.Merge(m, src)
}
func (m *QueryFpCurrentRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFpCurrentRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFpCurrentRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFpCurrentRewardsRequest proto.InternalMessageInfo

// QueryFpCurrentRewardsResponse is the response type for the
// Query/FpCurrentRewards RPC method.
type QueryFpCurrentRewardsResponse struct {
	// CurrentRewards is the current rewards that the finality provider have
	// to be distributed for his BTC stakers.
	CurrentRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=current_rewards,json=currentRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_rewards"`
	// Period is the current period that serves as a reference for
	// creating new historical rewards.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// TotalActiveSat is the total amount of active satoshi delegated
	// to this finality provider.
	TotalActiveSat cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_active_sat,json=totalActiveSat,proto3,customtype=cosmossdk.io/math.Int" json:"total_active_sat"`
}

func (m *QueryFpCurrentRewardsResponse) Reset()         { *m = QueryFpCurrentRewardsResponse{} }
func (m *QueryFpCurrentRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFpCurrentRewardsResponse) ProtoMessage()    {}
func (*QueryFpCurrentRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1a59cc0c7c44135, []int{13}
}
func (m *QueryFpCurrentRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFpCurrentRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFpCurrentRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFpCurrentRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFpCurrentRewardsResponse.Merge(m, src)
}
func (m *QueryFpCurrentRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFpCurrentRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFpCurrentRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFpCurrentRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.incentive.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.incentive.QueryParamsResponse")
	proto.RegisterType((*QueryRewardGaugesRequest)(nil), "babylon.incentive.QueryRewardGaugesRequest")
	proto.RegisterType((*RewardGaugesResponse)(nil), "babylon.incentive.RewardGaugesResponse")
	proto.RegisterType((*QueryRewardGaugesResponse)(nil), "babylon.incentive.QueryRewardGaugesResponse")
	proto.RegisterMapType((map[string]*RewardGaugesResponse)(nil), "babylon.incentive.QueryRewardGaugesResponse.RewardGaugesEntry")
	proto.RegisterType((*QueryBTCStakingGaugeRequest)(nil), "babylon.incentive.QueryBTCStakingGaugeRequest")
	proto.RegisterType((*BTCStakingGaugeResponse)(nil), "babylon.incentive.BTCStakingGaugeResponse")
	proto.RegisterType((*QueryBTCStakingGaugeResponse)(nil), "babylon.incentive.QueryBTCStakingGaugeResponse")
	proto.RegisterType((*QueryDelegatorWithdrawAddressRequest)(nil), "babylon.incentive.QueryDelegatorWithdrawAddressRequest")
	proto.RegisterType((*QueryDelegatorWithdrawAddressResponse)(nil), "babylon.incentive.QueryDelegatorWithdrawAddressResponse")
	proto.RegisterType((*QueryDelegationRewardsRequest)(nil), "babylon.incentive.QueryDelegationRewardsRequest")
	proto.RegisterType((*QueryDelegationRewardsResponse)(nil), "babylon.incentive.QueryDelegationRewardsResponse")
	proto.RegisterType((*QueryFpCurrentRewardsRequest)(nil), "babylon.incentive.QueryFpCurrentRewardsRequest")
	proto.RegisterType((*QueryFpCurrentRewardsResponse)(nil), "babylon.incentive.QueryFpCurrentRewardsResponse")
}

func init() { proto.RegisterFile("babylon/incentive/query.proto", fileDescriptor_e1a59cc0c7c44135) }

var fileDescriptor_e1a59cc0c7c44135 = []byte{
<<<<<<< HEAD
	// 885 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x18, 0xf5, 0xba, 0x4d, 0x02, 0x1f, 0x85, 0x26, 0x43, 0x44, 0x6d, 0xb7, 0xdd, 0xc0, 0x8a, 0x42,
	0x05, 0x64, 0xa7, 0x4e, 0x29, 0x2d, 0x95, 0x40, 0xe0, 0xb4, 0x42, 0xe2, 0x80, 0xc2, 0xb6, 0x12,
	0x12, 0x17, 0x33, 0xeb, 0x1d, 0xd6, 0xa3, 0x38, 0x3b, 0xee, 0xce, 0xd8, 0xc6, 0x18, 0x5f, 0x38,
	0x71, 0x04, 0xf1, 0x0f, 0xf4, 0xc0, 0x85, 0x9e, 0xf9, 0x1b, 0x50, 0x8f, 0x15, 0x5c, 0xe0, 0x02,
	0x28, 0xe1, 0x80, 0xb8, 0x70, 0xe2, 0x8e, 0x76, 0x66, 0x76, 0xb1, 0xbb, 0xbb, 0xb2, 0x23, 0x7e,
	0x9c, 0xb2, 0x33, 0xdf, 0xbc, 0x79, 0xef, 0xcd, 0xcc, 0xf7, 0x1c, 0x38, 0xef, 0x13, 0x7f, 0xdc,
	0xe3, 0x11, 0x66, 0x51, 0x87, 0x46, 0x92, 0x0d, 0x29, 0xbe, 0x33, 0xa0, 0xf1, 0xd8, 0xed, 0xc7,
	0x5c, 0x72, 0xb4, 0x61, 0xca, 0x6e, 0x56, 0x6e, 0x6c, 0x86, 0x3c, 0xe4, 0xaa, 0x8a, 0x93, 0x2f,
	0xbd, 0xb0, 0x71, 0x2e, 0xe4, 0x3c, 0xec, 0x51, 0x4c, 0xfa, 0x0c, 0x93, 0x28, 0xe2, 0x92, 0x48,
	0xc6, 0x23, 0x61, 0xaa, 0x76, 0x9e, 0xa5, 0x4f, 0x62, 0x72, 0x90, 0xd5, 0x3b, 0x5c, 0x1c, 0x70,
	0x81, 0x7d, 0x22, 0x28, 0x1e, 0x36, 0x7d, 0x2a, 0x49, 0x13, 0x77, 0x38, 0x8b, 0x4c, 0xbd, 0xae,
	0xeb, 0x6d, 0x4d, 0xab, 0x07, 0xba, 0xe4, 0x6c, 0x02, 0x7a, 0x37, 0x11, 0xbc, 0xa7, 0xf6, 0xf3,
	0xe8, 0x9d, 0x01, 0x15, 0xd2, 0x79, 0x07, 0x9e, 0x9c, 0x9b, 0x15, 0x7d, 0x1e, 0x09, 0x8a, 0xae,
	0xc2, 0xaa, 0xe6, 0xad, 0x59, 0x4f, 0x5b, 0x17, 0x1f, 0xdb, 0xa9, 0xbb, 0x39, 0x7f, 0xae, 0x86,
	0xb4, 0x4e, 0xde, 0xff, 0x69, 0xab, 0xe2, 0x99, 0xe5, 0xce, 0xcb, 0x50, 0x53, 0xfb, 0x79, 0x74,
	0x44, 0xe2, 0xe0, 0x2d, 0x32, 0x08, 0x69, 0xca, 0x85, 0x6a, 0xb0, 0x46, 0x82, 0x20, 0xa6, 0x42,
	0xef, 0xfa, 0xa8, 0x97, 0x0e, 0x9d, 0x3f, 0x2c, 0xd8, 0x9c, 0x47, 0x18, 0x1d, 0x04, 0x56, 0x12,
	0x77, 0x09, 0xe0, 0x84, 0x92, 0x61, 0x2c, 0x25, 0xfe, 0x5d, 0xe3, 0xdf, 0xdd, 0xe5, 0x2c, 0x6a,
	0x5d, 0x4a, 0x64, 0xdc, 0xfb, 0x79, 0xeb, 0x62, 0xc8, 0x64, 0x77, 0xe0, 0xbb, 0x1d, 0x7e, 0x60,
	0xfc, 0x9b, 0x3f, 0xdb, 0x22, 0xd8, 0xc7, 0x72, 0xdc, 0xa7, 0x42, 0x01, 0x84, 0xa7, 0x77, 0x46,
	0x12, 0x4e, 0x8f, 0x98, 0xec, 0x06, 0x31, 0x19, 0x45, 0x6d, 0x4d, 0x56, 0xfd, 0xf7, 0xc9, 0x9e,
	0xc8, 0x38, 0xd4, 0xd8, 0xf9, 0xdd, 0x82, 0x7a, 0xc1, 0x41, 0x19, 0xdb, 0x1d, 0x78, 0x3c, 0x56,
	0xf3, 0xed, 0x50, 0x15, 0x8c, 0xfd, 0xd7, 0x0b, 0x6e, 0xa1, 0x74, 0x13, 0x77, 0x76, 0xf2, 0x66,
	0x24, 0xe3, 0xb1, 0x77, 0x2a, 0x9e, 0x99, 0x6a, 0x74, 0x61, 0x23, 0xb7, 0x04, 0xad, 0xc3, 0x89,
	0x7d, 0x3a, 0x36, 0xf7, 0x93, 0x7c, 0xa2, 0xd7, 0x60, 0x65, 0x48, 0x7a, 0x03, 0x5a, 0xab, 0xaa,
	0x97, 0xf0, 0x7c, 0x81, 0x86, 0x22, 0x7a, 0x4f, 0xa3, 0xae, 0x57, 0xaf, 0x59, 0xce, 0x15, 0x38,
	0xab, 0x64, 0xb6, 0x6e, 0xef, 0xde, 0x92, 0x64, 0x9f, 0x45, 0xa1, 0x5a, 0x9b, 0xbe, 0x8b, 0xa7,
	0x60, 0xb5, 0x4b, 0x59, 0xd8, 0x95, 0x8a, 0xf6, 0xa4, 0x67, 0x46, 0xce, 0x27, 0x70, 0x26, 0x87,
	0xf8, 0xdf, 0xde, 0x85, 0xf3, 0x01, 0x9c, 0x2b, 0x16, 0x6d, 0x24, 0xbc, 0x01, 0x2b, 0xea, 0x72,
	0x4c, 0x87, 0xbc, 0x50, 0x70, 0x2e, 0x25, 0x50, 0x4f, 0x03, 0x9d, 0x11, 0x3c, 0xab, 0x18, 0x6e,
	0xd0, 0x1e, 0x0d, 0x89, 0xe4, 0xf1, 0x7b, 0xe6, 0x8d, 0xbc, 0xa9, 0xdb, 0x22, 0x3d, 0x9f, 0x9b,
	0xb0, 0x11, 0xa4, 0x4b, 0xda, 0x73, 0x1d, 0xd4, 0xaa, 0x7d, 0xf7, 0xcd, 0xf6, 0xa6, 0xf1, 0x6e,
	0x50, 0xb7, 0x64, 0xcc, 0xa2, 0xd0, 0x5b, 0xcf, 0x20, 0x66, 0xfe, 0xfa, 0x23, 0x9f, 0xdd, 0xdd,
	0xaa, 0xfc, 0x76, 0x77, 0xab, 0xe2, 0x0c, 0xe1, 0xc2, 0x02, 0x62, 0xe3, 0x71, 0x17, 0xd6, 0xd3,
	0x77, 0xbb, 0x34, 0x71, 0xd6, 0x4d, 0x79, 0xde, 0x6f, 0x2d, 0x38, 0x3f, 0x4b, 0xcc, 0x78, 0xa4,
	0x9f, 0x4e, 0x66, 0xf5, 0x36, 0xd4, 0x3f, 0x64, 0x11, 0xe9, 0x31, 0x39, 0x4e, 0x32, 0x6c, 0xc8,
	0x02, 0xba, 0xbc, 0xe5, 0x33, 0x29, 0x74, 0xcf, 0x20, 0x4d, 0xb9, 0xf8, 0x00, 0xab, 0xff, 0xe0,
	0x00, 0xbf, 0xb0, 0xc0, 0x2e, 0x33, 0x62, 0x8e, 0x8e, 0xc2, 0x9a, 0xee, 0xb6, 0xff, 0xe4, 0x8d,
	0xa6, 0x7b, 0xff, 0xad, 0x69, 0xe7, 0xde, 0x1a, 0xac, 0x28, 0x4d, 0xe8, 0x63, 0x58, 0xd5, 0xd9,
	0x8c, 0x2e, 0x94, 0x05, 0xc6, 0xdc, 0x8f, 0x40, 0xe3, 0xb9, 0x45, 0xcb, 0xb4, 0x27, 0xe7, 0x99,
	0x4f, 0xbf, 0xff, 0xf5, 0xcb, 0xea, 0x59, 0x54, 0xc7, 0x65, 0x3f, 0x53, 0xe8, 0x2b, 0x0b, 0x4e,
	0xcd, 0xc6, 0x01, 0x7a, 0x71, 0xb9, 0xcc, 0xd2, 0x42, 0x5e, 0x3a, 0x4e, 0xc0, 0x39, 0xaf, 0x2a,
	0x39, 0x97, 0x51, 0xb3, 0x40, 0x8e, 0xb9, 0x65, 0x3c, 0x31, 0x1f, 0x53, 0x3c, 0x1b, 0xa8, 0xe8,
	0x6b, 0x0b, 0x4e, 0x3f, 0xd4, 0x9d, 0xc8, 0x2d, 0x23, 0x2f, 0x8e, 0xad, 0x06, 0x5e, 0x7a, 0xbd,
	0xd1, 0x7b, 0x45, 0xe9, 0xc5, 0x68, 0xbb, 0x40, 0xaf, 0x2f, 0x3b, 0x6d, 0xa1, 0x41, 0x5a, 0x22,
	0x9e, 0xe8, 0x14, 0x9c, 0xa2, 0x1f, 0x2d, 0xa8, 0x95, 0x75, 0x2a, 0xba, 0x5a, 0x26, 0x62, 0x41,
	0xa8, 0x34, 0xae, 0x1d, 0x1f, 0x68, 0x6c, 0xbc, 0xad, 0x6c, 0xdc, 0x40, 0xad, 0x02, 0x1b, 0x59,
	0xcf, 0x08, 0x3c, 0xc9, 0xb5, 0xdc, 0x14, 0x3f, 0x1c, 0x26, 0xe8, 0x4f, 0x0b, 0x36, 0x72, 0x3d,
	0x84, 0x2e, 0x2d, 0xd0, 0x96, 0xcb, 0x8d, 0x46, 0xf3, 0x18, 0x08, 0x63, 0x63, 0xa2, 0x6c, 0x0c,
	0x90, 0x28, 0xb0, 0x91, 0xcb, 0x20, 0x81, 0x27, 0xa5, 0xb9, 0x34, 0x5d, 0xe4, 0x3a, 0xc8, 0x34,
	0xb4, 0x4d, 0xdb, 0xb6, 0xf6, 0xee, 0x1f, 0xda, 0xd6, 0x83, 0x43, 0xdb, 0xfa, 0xe5, 0xd0, 0xb6,
	0x3e, 0x3f, 0xb2, 0x2b, 0x0f, 0x8e, 0xec, 0xca, 0x0f, 0x47, 0x76, 0xe5, 0xfd, 0x57, 0x66, 0x32,
	0xc0, 0x08, 0xeb, 0x11, 0x5f, 0x6c, 0x33, 0x9e, 0xe9, 0x1c, 0xee, 0xe0, 0x8f, 0x66, 0xc4, 0xaa,
	0x5c, 0xf0, 0x57, 0xd5, 0x7f, 0x79, 0x97, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x25, 0x56,
	0xe2, 0xa8, 0x0a, 0x00, 0x00,
=======
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x3a, 0x3f, 0x5a, 0x1e, 0x21, 0x71, 0x86, 0x40, 0x6d, 0xb7, 0xb5, 0xcb, 0x8a, 0x42,
	0x44, 0xf1, 0x4e, 0xd2, 0x50, 0x5a, 0x2a, 0x81, 0xa8, 0xd3, 0x82, 0xca, 0x01, 0xa5, 0x9b, 0x22,
	0x04, 0x17, 0x33, 0xf6, 0x0e, 0xeb, 0x55, 0x9c, 0x1d, 0x77, 0x67, 0xec, 0x60, 0x4c, 0x38, 0x70,
	0xe2, 0x84, 0x40, 0xfc, 0x03, 0x3d, 0x70, 0x81, 0x73, 0xff, 0x06, 0xd4, 0x63, 0x54, 0x2e, 0xc0,
	0xa1, 0xa0, 0x84, 0x03, 0xe2, 0xc2, 0x89, 0x23, 0x12, 0xda, 0x99, 0xb1, 0x59, 0x67, 0x77, 0xb1,
	0x23, 0xda, 0x9e, 0xb2, 0x33, 0x6f, 0xde, 0x7c, 0xdf, 0xf7, 0xe6, 0xcd, 0x37, 0x31, 0x9c, 0xae,
	0x93, 0x7a, 0xaf, 0xc5, 0x7c, 0xec, 0xf9, 0x0d, 0xea, 0x0b, 0xaf, 0x4b, 0xf1, 0xad, 0x0e, 0x0d,
	0x7a, 0x56, 0x3b, 0x60, 0x82, 0xa1, 0x45, 0x1d, 0xb6, 0x86, 0xe1, 0xe2, 0x92, 0xcb, 0x5c, 0x26,
	0xa3, 0x38, 0xfc, 0x52, 0x0b, 0x8b, 0xa7, 0x5c, 0xc6, 0xdc, 0x16, 0xc5, 0xa4, 0xed, 0x61, 0xe2,
	0xfb, 0x4c, 0x10, 0xe1, 0x31, 0x9f, 0xeb, 0x68, 0x29, 0x8e, 0xd2, 0x26, 0x01, 0xd9, 0x1e, 0xc6,
	0x1b, 0x8c, 0x6f, 0x33, 0x8e, 0xeb, 0x84, 0x53, 0xdc, 0x5d, 0xad, 0x53, 0x41, 0x56, 0x71, 0x83,
	0x79, 0xbe, 0x8e, 0x17, 0x54, 0xbc, 0xa6, 0x60, 0xd5, 0x40, 0x85, 0xcc, 0x25, 0x40, 0x37, 0x42,
	0xc2, 0x1b, 0x72, 0x3f, 0x9b, 0xde, 0xea, 0x50, 0x2e, 0xcc, 0xb7, 0xe1, 0xc9, 0x91, 0x59, 0xde,
	0x66, 0x3e, 0xa7, 0xe8, 0x22, 0xcc, 0x2a, 0xdc, 0xbc, 0x71, 0xc6, 0x58, 0x7e, 0xfc, 0x7c, 0xc1,
	0x8a, 0xe9, 0xb3, 0x54, 0x4a, 0x75, 0xfa, 0xee, 0xfd, 0x72, 0xc6, 0xd6, 0xcb, 0xcd, 0x97, 0x20,
	0x2f, 0xf7, 0xb3, 0xe9, 0x0e, 0x09, 0x9c, 0x37, 0x49, 0xc7, 0xa5, 0x03, 0x2c, 0x94, 0x87, 0x63,
	0xc4, 0x71, 0x02, 0xca, 0xd5, 0xae, 0x8f, 0xd9, 0x83, 0xa1, 0xf9, 0xa7, 0x01, 0x4b, 0xa3, 0x19,
	0x9a, 0x07, 0x81, 0x99, 0x50, 0x5d, 0x98, 0x30, 0x25, 0x69, 0x68, 0x49, 0xa1, 0x7e, 0x4b, 0xeb,
	0xb7, 0xd6, 0x99, 0xe7, 0x57, 0x57, 0x42, 0x1a, 0xdf, 0xfd, 0x52, 0x5e, 0x76, 0x3d, 0xd1, 0xec,
	0xd4, 0xad, 0x06, 0xdb, 0xd6, 0xfa, 0xf5, 0x9f, 0x0a, 0x77, 0xb6, 0xb0, 0xe8, 0xb5, 0x29, 0x97,
	0x09, 0xdc, 0x56, 0x3b, 0x23, 0x01, 0x0b, 0x3b, 0x9e, 0x68, 0x3a, 0x01, 0xd9, 0xf1, 0x6b, 0x0a,
	0x2c, 0xfb, 0xe0, 0xc1, 0xe6, 0x87, 0x18, 0x72, 0x6c, 0xfe, 0x61, 0x40, 0x21, 0xa1, 0x50, 0x5a,
	0x76, 0x03, 0x9e, 0x08, 0xe4, 0x7c, 0xcd, 0x95, 0x01, 0x2d, 0xff, 0xb5, 0x84, 0x53, 0x48, 0xdd,
	0xc4, 0x8a, 0x4e, 0x5e, 0xf3, 0x45, 0xd0, 0xb3, 0xe7, 0x82, 0xc8, 0x54, 0xb1, 0x09, 0x8b, 0xb1,
	0x25, 0x28, 0x07, 0x53, 0x5b, 0xb4, 0xa7, 0xcf, 0x27, 0xfc, 0x44, 0xaf, 0xc2, 0x4c, 0x97, 0xb4,
	0x3a, 0x34, 0x9f, 0x95, 0x9d, 0xf0, 0x7c, 0x02, 0x87, 0x24, 0x78, 0x5b, 0x65, 0x5d, 0xce, 0x5e,
	0x32, 0xcc, 0x0b, 0x70, 0x52, 0xd2, 0xac, 0xde, 0x5c, 0xdf, 0x14, 0x64, 0xcb, 0xf3, 0x5d, 0xb9,
	0x76, 0xd0, 0x17, 0x4f, 0xc3, 0x6c, 0x93, 0x7a, 0x6e, 0x53, 0x48, 0xd8, 0x69, 0x5b, 0x8f, 0xcc,
	0x4f, 0xe0, 0x44, 0x2c, 0xe3, 0x91, 0xf5, 0x85, 0xf9, 0x01, 0x9c, 0x4a, 0x26, 0xad, 0x29, 0xbc,
	0x0e, 0x33, 0xf2, 0x70, 0xf4, 0x0d, 0x79, 0x21, 0xa1, 0x2e, 0x29, 0xa9, 0xb6, 0x4a, 0x34, 0x77,
	0xe0, 0x59, 0x89, 0x70, 0x95, 0xb6, 0xa8, 0x4b, 0x04, 0x0b, 0xde, 0xd5, 0x3d, 0x72, 0x45, 0x5d,
	0x8b, 0x41, 0x7d, 0xae, 0xc1, 0xa2, 0x33, 0x58, 0x52, 0x1b, 0xb9, 0x41, 0xd5, 0xfc, 0xbd, 0x3b,
	0x95, 0x25, 0xad, 0x5d, 0x67, 0x6d, 0x8a, 0xc0, 0xf3, 0x5d, 0x3b, 0x37, 0x4c, 0xd1, 0xf3, 0x97,
	0x8f, 0x7f, 0x7e, 0xbb, 0x9c, 0xf9, 0xfd, 0x76, 0x39, 0x63, 0x76, 0xe1, 0xec, 0x18, 0x60, 0xad,
	0x71, 0x1d, 0x72, 0x83, 0xbe, 0x9d, 0x18, 0x78, 0x78, 0x9b, 0xe2, 0xb8, 0xdf, 0x1b, 0x70, 0x3a,
	0x0a, 0xec, 0x31, 0x5f, 0xb5, 0xce, 0x50, 0xea, 0x4d, 0x28, 0x7c, 0xe8, 0xf9, 0xa4, 0xe5, 0x89,
	0x5e, 0xe8, 0x61, 0x5d, 0xcf, 0xa1, 0x93, 0x4b, 0x3e, 0x31, 0x48, 0xdd, 0xd0, 0x99, 0x3a, 0x9c,
	0x5c, 0xc0, 0xec, 0xff, 0x28, 0xe0, 0x57, 0x06, 0x94, 0xd2, 0x84, 0xe8, 0xd2, 0x51, 0x38, 0xa6,
	0x6e, 0xdb, 0x43, 0xe9, 0xd1, 0xc1, 0xde, 0x11, 0x4e, 0x9f, 0xea, 0x7e, 0x7d, 0xa3, 0xbd, 0xde,
	0x09, 0x02, 0xea, 0x8b, 0x47, 0x51, 0xda, 0x08, 0xfe, 0x17, 0x59, 0x7d, 0xb8, 0x71, 0x02, 0xba,
	0x24, 0x02, 0x16, 0x1a, 0x2a, 0x52, 0x7b, 0x88, 0xa5, 0x99, 0x6f, 0x8c, 0xa0, 0x87, 0xee, 0xd2,
	0xa6, 0x81, 0xc7, 0x1c, 0x79, 0xe2, 0xd3, 0xb6, 0x1e, 0xa1, 0x77, 0x20, 0x27, 0x98, 0x20, 0xad,
	0x1a, 0x69, 0x84, 0x97, 0xb5, 0xc6, 0x89, 0xc8, 0x4f, 0x9d, 0x31, 0x96, 0xe7, 0xaa, 0xe7, 0x42,
	0xcc, 0x9f, 0xef, 0x97, 0x9f, 0x52, 0x08, 0xdc, 0xd9, 0xb2, 0x3c, 0x86, 0xb7, 0x89, 0x68, 0x5a,
	0xd7, 0x7d, 0x71, 0xef, 0x4e, 0x05, 0x34, 0xdd, 0xeb, 0xbe, 0xb0, 0xe7, 0xe5, 0x26, 0x57, 0xe4,
	0x1e, 0x9b, 0x44, 0xfc, 0x5b, 0x90, 0xf3, 0x7f, 0x1f, 0x87, 0x19, 0x59, 0x10, 0xf4, 0x31, 0xcc,
	0xaa, 0xc7, 0x12, 0x9d, 0x4d, 0x73, 0xf0, 0x91, 0x57, 0xb9, 0xf8, 0xdc, 0xb8, 0x65, 0xaa, 0xa2,
	0xe6, 0x33, 0x9f, 0xfd, 0xf0, 0xdb, 0xd7, 0xd9, 0x93, 0xa8, 0x80, 0xd3, 0xfe, 0x6f, 0x40, 0xdf,
	0x18, 0x30, 0x17, 0xf5, 0x67, 0x74, 0x6e, 0xb2, 0x47, 0x44, 0x11, 0x79, 0xf1, 0x28, 0x2f, 0x8e,
	0xf9, 0x8a, 0xa4, 0xb3, 0x86, 0x56, 0x13, 0xe8, 0xe8, 0x4e, 0xc3, 0x7d, 0xfd, 0xb1, 0x8b, 0xa3,
	0x2f, 0x1c, 0xfa, 0xd6, 0x80, 0x85, 0x43, 0x76, 0x89, 0xac, 0x34, 0xf0, 0xe4, 0x77, 0xa4, 0x88,
	0x27, 0x5e, 0xaf, 0xf9, 0x5e, 0x90, 0x7c, 0x31, 0xaa, 0x24, 0xf0, 0xad, 0x8b, 0x46, 0x8d, 0xab,
	0x24, 0x45, 0x11, 0xf7, 0xd5, 0xb3, 0xb4, 0x8b, 0x7e, 0x32, 0x20, 0x9f, 0x66, 0x9d, 0xe8, 0x62,
	0x1a, 0x89, 0x31, 0x2e, 0x5f, 0xbc, 0x74, 0xf4, 0x44, 0x2d, 0xe3, 0x2d, 0x29, 0xe3, 0x2a, 0xaa,
	0x26, 0xc8, 0x18, 0x9a, 0x18, 0xc7, 0xfd, 0x98, 0x07, 0xee, 0xe2, 0xc3, 0xee, 0x8e, 0xfe, 0x32,
	0x60, 0x31, 0x66, 0x6a, 0x68, 0x65, 0x0c, 0xb7, 0x98, 0x91, 0x17, 0x57, 0x8f, 0x90, 0xa1, 0x65,
	0xf4, 0xa5, 0x8c, 0x0e, 0xe2, 0x09, 0x32, 0x62, 0xce, 0xc5, 0x71, 0x3f, 0xd5, 0xcd, 0x76, 0xc7,
	0xa9, 0x76, 0x86, 0x1c, 0x06, 0x46, 0x84, 0xf6, 0x0c, 0xc8, 0x1d, 0x36, 0x2e, 0x94, 0xda, 0x50,
	0x29, 0x1e, 0x5b, 0x5c, 0x99, 0x3c, 0x41, 0x8b, 0x7e, 0x4f, 0x8a, 0xde, 0x44, 0x37, 0x26, 0x12,
	0x5d, 0x3b, 0xe4, 0x9f, 0xff, 0x55, 0x84, 0xea, 0xc6, 0xdd, 0xfd, 0x92, 0xb1, 0xb7, 0x5f, 0x32,
	0x7e, 0xdd, 0x2f, 0x19, 0x5f, 0x1e, 0x94, 0x32, 0x7b, 0x07, 0xa5, 0xcc, 0x8f, 0x07, 0xa5, 0xcc,
	0xfb, 0x2f, 0x47, 0xcc, 0x54, 0xc3, 0xb6, 0x48, 0x9d, 0x57, 0x3c, 0x36, 0x64, 0xd1, 0x5d, 0xc3,
	0x1f, 0x45, 0xa8, 0x48, 0x83, 0xad, 0xcf, 0xca, 0x5f, 0x12, 0x6b, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x70, 0x27, 0x25, 0xc0, 0x0c, 0x0d, 0x00, 0x00,
>>>>>>> 4aa85a8 (chore: add incentives query fp current rewards (#1474))
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// RewardGauge queries the reward gauge of a given stakeholder address
	RewardGauges(ctx context.Context, in *QueryRewardGaugesRequest, opts ...grpc.CallOption) (*QueryRewardGaugesResponse, error)
	// BTCStakingGauge queries the BTC staking gauge of a given height
	BTCStakingGauge(ctx context.Context, in *QueryBTCStakingGaugeRequest, opts ...grpc.CallOption) (*QueryBTCStakingGaugeResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error)
	// DelegationRewards queries the delegation rewards of given finality provider
	// and delegator addresses
	DelegationRewards(ctx context.Context, in *QueryDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryDelegationRewardsResponse, error)
	// FpCurrentRewards queries the finality provider pool of rewards
	FpCurrentRewards(ctx context.Context, in *QueryFpCurrentRewardsRequest, opts ...grpc.CallOption) (*QueryFpCurrentRewardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.incentive.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardGauges(ctx context.Context, in *QueryRewardGaugesRequest, opts ...grpc.CallOption) (*QueryRewardGaugesResponse, error) {
	out := new(QueryRewardGaugesResponse)
	err := c.cc.Invoke(ctx, "/babylon.incentive.Query/RewardGauges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCStakingGauge(ctx context.Context, in *QueryBTCStakingGaugeRequest, opts ...grpc.CallOption) (*QueryBTCStakingGaugeResponse, error) {
	out := new(QueryBTCStakingGaugeResponse)
	err := c.cc.Invoke(ctx, "/babylon.incentive.Query/BTCStakingGauge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error) {
	out := new(QueryDelegatorWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/babylon.incentive.Query/DelegatorWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRewards(ctx context.Context, in *QueryDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryDelegationRewardsResponse, error) {
	out := new(QueryDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/babylon.incentive.Query/DelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FpCurrentRewards(ctx context.Context, in *QueryFpCurrentRewardsRequest, opts ...grpc.CallOption) (*QueryFpCurrentRewardsResponse, error) {
	out := new(QueryFpCurrentRewardsResponse)
	err := c.cc.Invoke(ctx, "/babylon.incentive.Query/FpCurrentRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// RewardGauge queries the reward gauge of a given stakeholder address
	RewardGauges(context.Context, *QueryRewardGaugesRequest) (*QueryRewardGaugesResponse, error)
	// BTCStakingGauge queries the BTC staking gauge of a given height
	BTCStakingGauge(context.Context, *QueryBTCStakingGaugeRequest) (*QueryBTCStakingGaugeResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(context.Context, *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error)
	// DelegationRewards queries the delegation rewards of given finality provider
	// and delegator addresses
	DelegationRewards(context.Context, *QueryDelegationRewardsRequest) (*QueryDelegationRewardsResponse, error)
	// FpCurrentRewards queries the finality provider pool of rewards
	FpCurrentRewards(context.Context, *QueryFpCurrentRewardsRequest) (*QueryFpCurrentRewardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RewardGauges(ctx context.Context, req *QueryRewardGaugesRequest) (*QueryRewardGaugesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardGauges not implemented")
}
func (*UnimplementedQueryServer) BTCStakingGauge(ctx context.Context, req *QueryBTCStakingGaugeRequest) (*QueryBTCStakingGaugeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCStakingGauge not implemented")
}
func (*UnimplementedQueryServer) DelegatorWithdrawAddress(ctx context.Context, req *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorWithdrawAddress not implemented")
}
func (*UnimplementedQueryServer) DelegationRewards(ctx context.Context, req *QueryDelegationRewardsRequest) (*QueryDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationRewards not implemented")
}
func (*UnimplementedQueryServer) FpCurrentRewards(ctx context.Context, req *QueryFpCurrentRewardsRequest) (*QueryFpCurrentRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FpCurrentRewards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.incentive.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardGauges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardGaugesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardGauges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.incentive.Query/RewardGauges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardGauges(ctx, req.(*QueryRewardGaugesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCStakingGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCStakingGaugeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCStakingGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.incentive.Query/BTCStakingGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCStakingGauge(ctx, req.(*QueryBTCStakingGaugeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.incentive.Query/DelegatorWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorWithdrawAddress(ctx, req.(*QueryDelegatorWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.incentive.Query/DelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRewards(ctx, req.(*QueryDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FpCurrentRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFpCurrentRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FpCurrentRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.incentive.Query/FpCurrentRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FpCurrentRewards(ctx, req.(*QueryFpCurrentRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.incentive.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RewardGauges",
			Handler:    _Query_RewardGauges_Handler,
		},
		{
			MethodName: "BTCStakingGauge",
			Handler:    _Query_BTCStakingGauge_Handler,
		},
		{
			MethodName: "DelegatorWithdrawAddress",
			Handler:    _Query_DelegatorWithdrawAddress_Handler,
		},
		{
			MethodName: "DelegationRewards",
			Handler:    _Query_DelegationRewards_Handler,
		},
		{
			MethodName: "FpCurrentRewards",
			Handler:    _Query_FpCurrentRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/incentive/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardGaugesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardGaugesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardGaugesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardGaugesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardGaugesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardGaugesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawnCoins) > 0 {
		for iNdEx := len(m.WithdrawnCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardGaugesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardGaugesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardGaugesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardGauges) > 0 {
		for k := range m.RewardGauges {
			v := m.RewardGauges[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCStakingGaugeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCStakingGaugeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCStakingGaugeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BTCStakingGaugeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCStakingGaugeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCStakingGaugeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCStakingGaugeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCStakingGaugeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCStakingGaugeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gauge != nil {
		{
			size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorWithdrawAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorWithdrawAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorWithdrawAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorWithdrawAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorWithdrawAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorWithdrawAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FinalityProviderAddress) > 0 {
		i -= len(m.FinalityProviderAddress)
		copy(dAtA[i:], m.FinalityProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FinalityProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFpCurrentRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFpCurrentRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFpCurrentRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalityProviderAddress) > 0 {
		i -= len(m.FinalityProviderAddress)
		copy(dAtA[i:], m.FinalityProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FinalityProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFpCurrentRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFpCurrentRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFpCurrentRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalActiveSat.Size()
		i -= size
		if _, err := m.TotalActiveSat.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardGaugesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RewardGaugesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.WithdrawnCoins) > 0 {
		for _, e := range m.WithdrawnCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRewardGaugesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardGauges) > 0 {
		for k, v := range m.RewardGauges {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryBTCStakingGaugeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *BTCStakingGaugeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBTCStakingGaugeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gauge != nil {
		l = m.Gauge.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorWithdrawAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorWithdrawAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FinalityProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFpCurrentRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FinalityProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFpCurrentRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	l = m.TotalActiveSat.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardGaugesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardGaugesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardGaugesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardGaugesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardGaugesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardGaugesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnCoins = append(m.WithdrawnCoins, types.Coin{})
			if err := m.WithdrawnCoins[len(m.WithdrawnCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardGaugesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardGaugesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardGaugesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardGauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardGauges == nil {
				m.RewardGauges = make(map[string]*RewardGaugesResponse)
			}
			var mapkey string
			var mapvalue *RewardGaugesResponse
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RewardGaugesResponse{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RewardGauges[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCStakingGaugeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCStakingGaugeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCStakingGaugeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCStakingGaugeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCStakingGaugeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCStakingGaugeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCStakingGaugeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCStakingGaugeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCStakingGaugeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gauge == nil {
				m.Gauge = &BTCStakingGaugeResponse{}
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorWithdrawAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorWithdrawAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFpCurrentRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFpCurrentRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFpCurrentRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalityProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFpCurrentRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFpCurrentRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFpCurrentRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.Coin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveSat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalActiveSat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
