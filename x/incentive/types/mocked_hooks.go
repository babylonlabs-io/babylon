// Code generated by MockGen. DO NOT EDIT.
// Source: x/incentive/types/hooks.go

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIncentiveHooks is a mock of IncentiveHooks interface.
type MockIncentiveHooks struct {
	ctrl     *gomock.Controller
	recorder *MockIncentiveHooksMockRecorder
}

// MockIncentiveHooksMockRecorder is the mock recorder for MockIncentiveHooks.
type MockIncentiveHooksMockRecorder struct {
	mock *MockIncentiveHooks
}

// NewMockIncentiveHooks creates a new mock instance.
func NewMockIncentiveHooks(ctrl *gomock.Controller) *MockIncentiveHooks {
	mock := &MockIncentiveHooks{ctrl: ctrl}
	mock.recorder = &MockIncentiveHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncentiveHooks) EXPECT() *MockIncentiveHooksMockRecorder {
	return m.recorder
}

// BeforeRewardWithdraw mocks base method.
func (m *MockIncentiveHooks) BeforeRewardWithdraw(ctx context.Context, sType StakeholderType, addr types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeRewardWithdraw", ctx, sType, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeRewardWithdraw indicates an expected call of BeforeRewardWithdraw.
func (mr *MockIncentiveHooksMockRecorder) BeforeRewardWithdraw(ctx, sType, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeRewardWithdraw", reflect.TypeOf((*MockIncentiveHooks)(nil).BeforeRewardWithdraw), ctx, sType, addr)
}
