// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/coostaking/v1/coostaking.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// CoostakingPortion is the portion of rewards that goes to Coostakers
	// NOTE: This portion of coostakers is taken after the incentive module
	// takes part of the fee_collector to give out to BTC stakers.
	CoostakingPortion cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=coostaking_portion,json=coostakingPortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"coostaking_portion"`
	// ScoreRatioBtcByBaby defines the amount of ubbn necessary for the
	// sats staked to count as score in the formula.
	// score: min(coostakers_sats_staked, (coostakers_ubbn_staked / score_ratio_btc_by_baby))
	ScoreRatioBtcByBaby cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=score_ratio_btc_by_baby,json=scoreRatioBtcByBaby,proto3,customtype=cosmossdk.io/math.Int" json:"score_ratio_btc_by_baby"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8972b6ecc9e1f897, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "babylon.coostaking.v1.Params")
}

func init() {
	proto.RegisterFile("babylon/coostaking/v1/coostaking.proto", fileDescriptor_8972b6ecc9e1f897)
}

var fileDescriptor_8972b6ecc9e1f897 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x1b, 0x0f, 0x03, 0x8b, 0x17, 0xab, 0xc3, 0x39, 0x21, 0x1b, 0x1e, 0x64, 0x20, 0x6b,
	0x18, 0x0a, 0xde, 0xc3, 0x2e, 0x03, 0x0f, 0x73, 0x47, 0x2f, 0x31, 0x89, 0xa5, 0x0b, 0x5b, 0xfb,
	0x1f, 0x4d, 0x1c, 0xe6, 0x5b, 0xf8, 0x61, 0xfc, 0x10, 0xbb, 0x08, 0xc3, 0x93, 0x78, 0x18, 0xd2,
	0x7e, 0x11, 0x69, 0x53, 0x59, 0xc1, 0x5b, 0x1e, 0xef, 0xe5, 0xf7, 0xf8, 0x3f, 0xff, 0x4a, 0x70,
	0x61, 0x97, 0x90, 0x12, 0x09, 0xa0, 0x0d, 0x5f, 0xa8, 0x34, 0x26, 0xeb, 0x51, 0x43, 0x85, 0xab,
	0x0c, 0x0c, 0x04, 0xed, 0x3a, 0x17, 0x36, 0x9c, 0xf5, 0xa8, 0x7b, 0x1a, 0x43, 0x0c, 0x55, 0x82,
	0x94, 0x2f, 0x17, 0xee, 0x9e, 0x4b, 0xd0, 0x09, 0x68, 0xe6, 0x0c, 0x27, 0x9c, 0x75, 0xf9, 0x81,
	0xfc, 0xd6, 0x94, 0x67, 0x3c, 0xd1, 0xc1, 0x93, 0x1f, 0xec, 0x61, 0x6c, 0x05, 0x99, 0x51, 0x90,
	0x76, 0x50, 0x1f, 0x0d, 0x0e, 0xe9, 0x68, 0xb3, 0xeb, 0x79, 0xdf, 0xbb, 0xde, 0x85, 0xfb, 0xac,
	0x9f, 0x17, 0xa1, 0x02, 0x92, 0x70, 0x33, 0x0f, 0xef, 0xa3, 0x98, 0x4b, 0x3b, 0x8e, 0xe4, 0xe7,
	0xfb, 0xd0, 0xaf, 0xd9, 0xe3, 0x48, 0xce, 0x8e, 0xf7, 0xb0, 0xa9, 0x63, 0x05, 0xdc, 0x3f, 0xd3,
	0x12, 0xb2, 0x88, 0x65, 0xdc, 0x28, 0x60, 0xc2, 0x48, 0x26, 0x2c, 0x2b, 0x2f, 0xe9, 0x1c, 0xf4,
	0xd1, 0xe0, 0x88, 0x5e, 0xd7, 0x35, 0xed, 0xff, 0x35, 0x93, 0xd4, 0x34, 0x0a, 0x26, 0xa9, 0x99,
	0x9d, 0x54, 0xac, 0x59, 0x89, 0xa2, 0x46, 0x52, 0x4b, 0xb9, 0xb0, 0xf4, 0x61, 0x93, 0x63, 0xb4,
	0xcd, 0x31, 0xfa, 0xc9, 0x31, 0x7a, 0x2b, 0xb0, 0xb7, 0x2d, 0xb0, 0xf7, 0x55, 0x60, 0xef, 0xf1,
	0x2e, 0x56, 0x66, 0xfe, 0x22, 0x42, 0x09, 0x09, 0xa9, 0xc7, 0x5b, 0x72, 0xa1, 0x87, 0x0a, 0xfe,
	0x24, 0x59, 0xdf, 0x92, 0xd7, 0xe6, 0xf0, 0xc6, 0xae, 0x22, 0x2d, 0x5a, 0xd5, 0x52, 0x37, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xce, 0x4a, 0x27, 0x46, 0x9b, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ScoreRatioBtcByBaby.Size()
		i -= size
		if _, err := m.ScoreRatioBtcByBaby.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCoostaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CoostakingPortion.Size()
		i -= size
		if _, err := m.CoostakingPortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCoostaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCoostaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoostaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CoostakingPortion.Size()
	n += 1 + l + sovCoostaking(uint64(l))
	l = m.ScoreRatioBtcByBaby.Size()
	n += 1 + l + sovCoostaking(uint64(l))
	return n
}

func sovCoostaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoostaking(x uint64) (n int) {
	return sovCoostaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoostaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoostakingPortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoostaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoostakingPortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreRatioBtcByBaby", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoostaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoostaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoostaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScoreRatioBtcByBaby.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoostaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoostaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoostaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoostaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoostaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoostaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoostaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoostaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoostaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoostaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoostaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoostaking = fmt.Errorf("proto: unexpected end of group")
)
