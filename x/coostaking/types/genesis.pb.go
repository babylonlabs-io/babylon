// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/coostaking/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the coostaking module's genesis state.
type GenesisState struct {
	// params the current params of the state.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// CurrentRewards are the current rewards of coostakers pool.
	CurrentRewards CurrentRewardsEntry `protobuf:"bytes,2,opt,name=current_rewards,json=currentRewards,proto3" json:"current_rewards"`
	// HistoricalRewards are the historical rewards of the coostakers for one period.
	HistoricalRewards []HistoricalRewardsEntry `protobuf:"bytes,3,rep,name=historical_rewards,json=historicalRewards,proto3" json:"historical_rewards"`
	// CoostakerRewardsTracker are the coostaker rewards tracker stored by coostaker addresses.
	CoostakersRewardsTracker []CoostakerRewardsTrackerEntry `protobuf:"bytes,4,rep,name=coostakers_rewards_tracker,json=coostakersRewardsTracker,proto3" json:"coostakers_rewards_tracker"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f3cdaed17bf55fd, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCurrentRewards() CurrentRewardsEntry {
	if m != nil {
		return m.CurrentRewards
	}
	return CurrentRewardsEntry{}
}

func (m *GenesisState) GetHistoricalRewards() []HistoricalRewardsEntry {
	if m != nil {
		return m.HistoricalRewards
	}
	return nil
}

func (m *GenesisState) GetCoostakersRewardsTracker() []CoostakerRewardsTrackerEntry {
	if m != nil {
		return m.CoostakersRewardsTracker
	}
	return nil
}

// CurrentRewardsEntry represents the chain current rewards.
type CurrentRewardsEntry struct {
	// Rewards the coostaker rewards
	Rewards *CurrentRewards `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *CurrentRewardsEntry) Reset()         { *m = CurrentRewardsEntry{} }
func (m *CurrentRewardsEntry) String() string { return proto.CompactTextString(m) }
func (*CurrentRewardsEntry) ProtoMessage()    {}
func (*CurrentRewardsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f3cdaed17bf55fd, []int{1}
}
func (m *CurrentRewardsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentRewardsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentRewardsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentRewardsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentRewardsEntry.Merge(m, src)
}
func (m *CurrentRewardsEntry) XXX_Size() int {
	return m.Size()
}
func (m *CurrentRewardsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentRewardsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentRewardsEntry proto.InternalMessageInfo

func (m *CurrentRewardsEntry) GetRewards() *CurrentRewards {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// HistoricalRewardsEntry represents the pool of
// historical rewards by period.
type HistoricalRewardsEntry struct {
	// Period of the historical reward
	Period uint64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	// Rewards the period historical rewards
	Rewards *HistoricalRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *HistoricalRewardsEntry) Reset()         { *m = HistoricalRewardsEntry{} }
func (m *HistoricalRewardsEntry) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewardsEntry) ProtoMessage()    {}
func (*HistoricalRewardsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f3cdaed17bf55fd, []int{2}
}
func (m *HistoricalRewardsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewardsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewardsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewardsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewardsEntry.Merge(m, src)
}
func (m *HistoricalRewardsEntry) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewardsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewardsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewardsEntry proto.InternalMessageInfo

func (m *HistoricalRewardsEntry) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *HistoricalRewardsEntry) GetRewards() *HistoricalRewards {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// CoostakerRewardsTrackerEntry represents a coostacker rewards
// tracker entry based on the coostaker address
type CoostakerRewardsTrackerEntry struct {
	// CoostakerAddress babylon address of the coostaker
	CoostakerAddress string `protobuf:"bytes,1,opt,name=coostaker_address,json=coostakerAddress,proto3" json:"coostaker_address,omitempty"`
	// Tracker is coostaker reward tracker information.
	Tracker *CoostakerRewardsTracker `protobuf:"bytes,2,opt,name=tracker,proto3" json:"tracker,omitempty"`
}

func (m *CoostakerRewardsTrackerEntry) Reset()         { *m = CoostakerRewardsTrackerEntry{} }
func (m *CoostakerRewardsTrackerEntry) String() string { return proto.CompactTextString(m) }
func (*CoostakerRewardsTrackerEntry) ProtoMessage()    {}
func (*CoostakerRewardsTrackerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f3cdaed17bf55fd, []int{3}
}
func (m *CoostakerRewardsTrackerEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoostakerRewardsTrackerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoostakerRewardsTrackerEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoostakerRewardsTrackerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoostakerRewardsTrackerEntry.Merge(m, src)
}
func (m *CoostakerRewardsTrackerEntry) XXX_Size() int {
	return m.Size()
}
func (m *CoostakerRewardsTrackerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CoostakerRewardsTrackerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CoostakerRewardsTrackerEntry proto.InternalMessageInfo

func (m *CoostakerRewardsTrackerEntry) GetCoostakerAddress() string {
	if m != nil {
		return m.CoostakerAddress
	}
	return ""
}

func (m *CoostakerRewardsTrackerEntry) GetTracker() *CoostakerRewardsTracker {
	if m != nil {
		return m.Tracker
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "babylon.coostaking.v1.GenesisState")
	proto.RegisterType((*CurrentRewardsEntry)(nil), "babylon.coostaking.v1.CurrentRewardsEntry")
	proto.RegisterType((*HistoricalRewardsEntry)(nil), "babylon.coostaking.v1.HistoricalRewardsEntry")
	proto.RegisterType((*CoostakerRewardsTrackerEntry)(nil), "babylon.coostaking.v1.CoostakerRewardsTrackerEntry")
}

func init() {
	proto.RegisterFile("babylon/coostaking/v1/genesis.proto", fileDescriptor_0f3cdaed17bf55fd)
}

var fileDescriptor_0f3cdaed17bf55fd = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x4f, 0x6c, 0xe9, 0xe2, 0xac, 0xa8, 0x3b, 0xae, 0x4b, 0x0c, 0x1a, 0x97, 0x8a, 0x52, 0x84,
	0x26, 0xec, 0x56, 0xf0, 0xe0, 0x41, 0x8c, 0x14, 0x7b, 0xd4, 0x54, 0x04, 0xbd, 0x84, 0x49, 0x32,
	0xa4, 0x43, 0xdb, 0x4c, 0x98, 0x99, 0xb6, 0xf6, 0xec, 0x17, 0xf0, 0x9b, 0x78, 0xf1, 0x43, 0xf4,
	0x58, 0x3c, 0x79, 0x12, 0x69, 0xbf, 0x88, 0x98, 0x99, 0x24, 0xad, 0x24, 0xd2, 0xbd, 0xf5, 0xf5,
	0xfd, 0xfe, 0xbc, 0xf7, 0x7b, 0x19, 0xf0, 0x28, 0x40, 0xc1, 0x72, 0x42, 0x13, 0x27, 0xa4, 0x94,
	0x0b, 0x34, 0x26, 0x49, 0xec, 0xcc, 0x2f, 0x9c, 0x18, 0x27, 0x98, 0x13, 0x6e, 0xa7, 0x8c, 0x0a,
	0x0a, 0xef, 0x2a, 0x90, 0x5d, 0x82, 0xec, 0xf9, 0x85, 0x79, 0x1a, 0xd3, 0x98, 0x66, 0x08, 0xe7,
	0xef, 0x2f, 0x09, 0x36, 0x9f, 0x54, 0x2b, 0xee, 0x50, 0x25, 0xae, 0xc6, 0x99, 0xe1, 0x05, 0x62,
	0x91, 0x72, 0x36, 0xef, 0x85, 0x94, 0x4f, 0x29, 0xf7, 0xa5, 0x8b, 0x2c, 0x64, 0xab, 0xfd, 0xa5,
	0x01, 0x6e, 0xbc, 0x91, 0x63, 0x0e, 0x05, 0x12, 0x18, 0xbe, 0x00, 0xad, 0x14, 0x31, 0x34, 0xe5,
	0x86, 0x7e, 0xae, 0x77, 0x8e, 0x2f, 0x1f, 0xd8, 0x95, 0x63, 0xdb, 0x6f, 0x33, 0x90, 0xdb, 0x5c,
	0xfd, 0x7a, 0xa8, 0x79, 0x8a, 0x02, 0x3f, 0x82, 0x5b, 0xe1, 0x8c, 0x31, 0x9c, 0x08, 0x5f, 0x4d,
	0x60, 0x5c, 0xcb, 0x54, 0x9e, 0xd6, 0xa8, 0xbc, 0x96, 0x68, 0x4f, 0x82, 0xfb, 0x89, 0x60, 0x4b,
	0x25, 0x79, 0x33, 0xdc, 0x6b, 0xc1, 0x00, 0xc0, 0x11, 0xe1, 0x82, 0x32, 0x12, 0xa2, 0x49, 0xa1,
	0xde, 0x38, 0x6f, 0x74, 0x8e, 0x2f, 0xbb, 0x35, 0xea, 0x83, 0x82, 0x50, 0x61, 0x70, 0x32, 0xfa,
	0xb7, 0x0b, 0x17, 0xc0, 0x54, 0x02, 0x98, 0xf1, 0xdc, 0xc3, 0x17, 0x0c, 0x85, 0x63, 0xcc, 0x8c,
	0x66, 0xe6, 0xd5, 0xab, 0xdb, 0x24, 0x27, 0x2a, 0xb1, 0xf7, 0x92, 0xb5, 0xeb, 0x68, 0x94, 0xe2,
	0xfb, 0xa0, 0xf6, 0x07, 0x70, 0xa7, 0x22, 0x09, 0xf8, 0x12, 0x1c, 0xe5, 0x8b, 0xca, 0x63, 0x3c,
	0x3e, 0x28, 0x46, 0x2f, 0x67, 0xb5, 0x05, 0x38, 0xab, 0xce, 0x00, 0x9e, 0x81, 0x56, 0x8a, 0x19,
	0xa1, 0x51, 0xa6, 0xdc, 0xf4, 0x54, 0x05, 0xdd, 0xd2, 0x52, 0x5e, 0xae, 0x73, 0x68, 0xb6, 0xa5,
	0xeb, 0x37, 0x1d, 0xdc, 0xff, 0x5f, 0x1c, 0xb0, 0x0f, 0x4e, 0x8a, 0x28, 0x7c, 0x14, 0x45, 0x0c,
	0x73, 0xb9, 0xe1, 0x75, 0xd7, 0xf8, 0xf1, 0xbd, 0x7b, 0xaa, 0xbe, 0xd0, 0x57, 0xb2, 0x33, 0x14,
	0x8c, 0x24, 0xb1, 0x77, 0xbb, 0xa0, 0xa8, 0xff, 0xe1, 0x00, 0x1c, 0xe5, 0xb7, 0x91, 0xb3, 0xda,
	0x57, 0xbb, 0x8d, 0x97, 0xd3, 0xdd, 0x77, 0xab, 0x8d, 0xa5, 0xaf, 0x37, 0x96, 0xfe, 0x7b, 0x63,
	0xe9, 0x5f, 0xb7, 0x96, 0xb6, 0xde, 0x5a, 0xda, 0xcf, 0xad, 0xa5, 0x7d, 0x7a, 0x1e, 0x13, 0x31,
	0x9a, 0x05, 0x76, 0x48, 0xa7, 0x8e, 0x12, 0x9f, 0xa0, 0x80, 0x77, 0x09, 0xcd, 0x4b, 0x67, 0xfe,
	0xcc, 0xf9, 0xbc, 0xfb, 0xfc, 0xc4, 0x32, 0xc5, 0x3c, 0x68, 0x65, 0xef, 0xab, 0xf7, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xd3, 0x32, 0x37, 0x7b, 0x1b, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoostakersRewardsTracker) > 0 {
		for iNdEx := len(m.CoostakersRewardsTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoostakersRewardsTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HistoricalRewards) > 0 {
		for iNdEx := len(m.HistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.CurrentRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CurrentRewardsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentRewardsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentRewardsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalRewardsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewardsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewardsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoostakerRewardsTrackerEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoostakerRewardsTrackerEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoostakerRewardsTrackerEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tracker != nil {
		{
			size, err := m.Tracker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoostakerAddress) > 0 {
		i -= len(m.CoostakerAddress)
		copy(dAtA[i:], m.CoostakerAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CoostakerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CurrentRewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.HistoricalRewards) > 0 {
		for _, e := range m.HistoricalRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CoostakersRewardsTracker) > 0 {
		for _, e := range m.CoostakersRewardsTracker {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *CurrentRewardsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *HistoricalRewardsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *CoostakerRewardsTrackerEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoostakerAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Tracker != nil {
		l = m.Tracker.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoricalRewards = append(m.HistoricalRewards, HistoricalRewardsEntry{})
			if err := m.HistoricalRewards[len(m.HistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoostakersRewardsTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoostakersRewardsTracker = append(m.CoostakersRewardsTracker, CoostakerRewardsTrackerEntry{})
			if err := m.CoostakersRewardsTracker[len(m.CoostakersRewardsTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentRewardsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentRewardsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentRewardsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &CurrentRewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRewardsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewardsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewardsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &HistoricalRewards{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoostakerRewardsTrackerEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoostakerRewardsTrackerEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoostakerRewardsTrackerEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoostakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoostakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracker == nil {
				m.Tracker = &CoostakerRewardsTracker{}
			}
			if err := m.Tracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
