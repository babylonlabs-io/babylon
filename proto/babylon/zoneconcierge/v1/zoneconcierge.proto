syntax = "proto3";
package babylon.zoneconcierge.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "tendermint/crypto/proof.proto";
import "babylon/btccheckpoint/v1/btccheckpoint.proto";
import "babylon/checkpointing/v1/bls_key.proto";
import "babylon/btclightclient/v1/btclightclient.proto";

option go_package = "github.com/babylonlabs-io/babylon/v4/x/zoneconcierge/types";

// IndexedHeader is the metadata of a BSN header
message IndexedHeader {
  // consumer_id is the unique ID of the consumer
  string consumer_id = 1;
  // hash is the hash of this header
  bytes hash = 2;
  // height is the height of this header on the BSN's ledger.
  // (hash, height) jointly provide the position of the header on the BSN ledger
  uint64 height = 3;
  // time is the timestamp of this header on the BSN's ledger.
  // It is needed for a BSN to unbond all mature validators/delegations before
  // this timestamp, when this header is BTC-finalised
  google.protobuf.Timestamp time = 4 [ (gogoproto.stdtime) = true ];
  // babylon_header_hash is the hash of the babylon block that includes this BSN
  // header
  bytes babylon_header_hash = 5;
  // babylon_header_height is the height of the babylon block that includes this
  // BSN header
  uint64 babylon_header_height = 6;
  // epoch is the epoch number of this header on Babylon ledger
  uint64 babylon_epoch = 7;
  // babylon_tx_hash is the hash of the tx that includes this header
  // (babylon_block_height, babylon_tx_hash) jointly provides the position of
  // the header on Babylon ledger
  bytes babylon_tx_hash = 8;
}


// IndexedHeaderWithProof is an indexed header with a proof that the header is
// included in the epoch
message IndexedHeaderWithProof {
  IndexedHeader header = 1;
  // proof is an inclusion proof that the header
  // is committed to the `app_hash` of the sealer header of header.babylon_epoch
  tendermint.crypto.ProofOps proof = 2;
}

// ProofEpochSealed is the proof that an epoch is sealed by the sealer header,
// i.e., the 2nd header of the next epoch With the access of metadata
// - Metadata of this epoch, which includes the sealer header
// - Raw checkpoint of this epoch
// The verifier can perform the following verification rules:
// - The raw checkpoint's `app_hash` is same as in the sealer header
// - More than 2/3 (in voting power) validators in the validator set of this
// epoch have signed `app_hash` of the sealer header
// - The epoch metadata is committed to the `app_hash` of the sealer header
// - The validator set is committed to the `app_hash` of the sealer header
message ProofEpochSealed {
  // validator_set is the validator set of the sealed epoch
  // This validator set has generated a BLS multisig on `app_hash` of
  // the sealer header
  repeated babylon.checkpointing.v1.ValidatorWithBlsKey validator_set = 1;
  // proof_epoch_info is the Merkle proof that the epoch's metadata is committed
  // to `app_hash` of the sealer header
  tendermint.crypto.ProofOps proof_epoch_info = 2;
  // proof_epoch_info is the Merkle proof that the epoch's validator set is
  // committed to `app_hash` of the sealer header
  tendermint.crypto.ProofOps proof_epoch_val_set = 3;
}

// ProofFinalizedHeader is a set of proofs that attest a header is
// BTC-finalised
message ProofFinalizedHeader {
  /*
    The following fields include proofs that attest the header is
    BTC-finalised
  */
  // proof_epoch_sealed is the proof that the epoch is sealed
  babylon.zoneconcierge.v1.ProofEpochSealed proof_epoch_sealed = 1;
  // proof_epoch_submitted is the proof that the epoch's checkpoint is included
  // in BTC ledger It is the two TransactionInfo in the best (i.e., earliest)
  // checkpoint submission
  repeated babylon.btccheckpoint.v1.TransactionInfo proof_epoch_submitted = 2;
  // proof_consumer_header_in_epoch is the proof that the consumer header is included in the epoch
  tendermint.crypto.ProofOps proof_consumer_header_in_epoch = 3;
}

// Btc light client chain segment grown during last finalized epoch
message BTCChainSegment {
  repeated babylon.btclightclient.v1.BTCHeaderInfo btc_headers = 1;
}

// BSNBTCState stores per-BSN BTC synchronization state
message BSNBTCState {
  // last_sent_segment is the last segment of BTC headers sent to this BSN
  // This is used to determine the next headers to send and handle reorgs
  BTCChainSegment last_sent_segment = 1;
}
