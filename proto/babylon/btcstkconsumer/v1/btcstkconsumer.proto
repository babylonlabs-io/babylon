syntax = "proto3";
package babylon.btcstkconsumer.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/babylonlabs-io/babylon/v3/x/btcstkconsumer/types";

// ConsumerType defines the type of consumer chain
enum ConsumerType {
  // COSMOS represents a Cosmos SDK chain consumer
  COSMOS = 0;
  // ROLLUP represents a rollup chain consumer
  ROLLUP = 1;
}

// ConsumerRegister is the registration information of a consumer
message ConsumerRegister {
  // consumer_id is the ID of the consumer
  // - for Cosmos SDK chains, the consumer ID will be the IBC client ID
  // - for rollup chains, the consumer ID will be the chain ID of the rollup
  //   chain
  string consumer_id = 1;
  // consumer_name is the name of the consumer
  string consumer_name = 2;
  // consumer_description is a description for the consumer (can be empty)
  string consumer_description = 3;
  // consumer_metadata is necessary metadata of the consumer, and the data
  // depends on the type of integration
  oneof consumer_metadata {
    CosmosConsumerMetadata cosmos_consumer_metadata = 4;
    RollupConsumerMetadata rollup_consumer_metadata = 5;
  };
  // babylon_rewards_commission is the commission rate that Babylon takes from rewards
  // distributed to finality providers for this BSN consumer
  string babylon_rewards_commission = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// CosmosConsumerMetadata is the metadata for the Cosmos integration
message CosmosConsumerMetadata {
  // channel_id defines the IBC channel ID for the consumer chain
  string channel_id = 1;
}

// RollupConsumerMetadata is the metadata for the rollup integration
message RollupConsumerMetadata {
  // finality_contract_address is the address of the finality contract for
  // the rollup integration
  string finality_contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
