syntax = "proto3";
package babylon.finality.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/finality/types";

// Params defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // max_active_finality_providers is the maximum number of active finality providers in the BTC staking protocol
  uint32 max_active_finality_providers = 1;
  // signed_blocks_window defines the size of the sliding window for tracking finality provider liveness
  int64 signed_blocks_window  = 2;
  // finality_sig_timeout defines how much time (in terms of blocks) finality providers have to cast a finality
  // vote before being judged as missing their voting turn on the given block
  int64 finality_sig_timeout = 3;
  // min_signed_per_window defines the minimum number of blocks that a finality provider is required to sign
  // within the sliding window to avoid being jailed
  bytes min_signed_per_window = 4 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  // min_pub_rand is the minimum number of public randomness each
  // message should commit
  uint64 min_pub_rand = 5;
  // jail_duration is the minimum period of time that a finality provider remains jailed
  google.protobuf.Duration jail_duration = 6
  [(gogoproto.nullable) = false, (amino.dont_omitempty) = true, (gogoproto.stdduration) = true];
  // finality_activation_height is the babylon block height which the finality module will
  // start to accept finality voting and the minimum allowed value for the public randomness
  // commit start height.
  uint64 finality_activation_height = 7;
}
