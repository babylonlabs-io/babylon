syntax = "proto3";
package babylon.incentive;

import "gogoproto/gogo.proto";
import "babylon/incentive/params.proto";
import "babylon/incentive/incentive.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/incentive/types";

// GenesisState defines the incentive module's genesis state.
message GenesisState {
  // params the current params of the state.
  Params params = 1 [ (gogoproto.nullable) = false ];
  // BTC staking gauge on every height
  repeated BTCStakingGaugeEntry btc_staking_gauges = 2
      [ (gogoproto.nullable) = false ];
  // RewardGauges the reward gauge for each BTC staker and finality provider
  repeated RewardGaugeEntry reward_gauges = 3 [ (gogoproto.nullable) = false ];
  // Withdraw addresses of the delegators
  repeated WithdrawAddressEntry withdraw_addresses = 4
      [ (gogoproto.nullable) = false ];
}

// BTCStakingGaugeEntry represents a gauge for BTC staking rewards at a specific
// height.
message BTCStakingGaugeEntry {
  // Block height at which this gauge is set
  uint64 height = 1;
  // The gauge object storing rewards info
  Gauge gauge = 2;
}

// RewardGaugeEntry represents a reward gauge for a specific stakeholder.
message RewardGaugeEntry {
  // Type of stakeholder
  StakeholderType stakeholder_type = 1;
  // Address of the stakeholder
  string address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // The reward gauge object
  RewardGauge reward_gauge = 3;
}

// WithdrawAddressEntry holds the record of a withdraw address belonging to a
// delegator address.
message WithdrawAddressEntry {
  // Address of the delegator
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Withdraw address
  string withdraw_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// StakeholderType represents the different types of stakeholders.
enum StakeholderType {
  option (gogoproto.goproto_enum_prefix) = false;
  // Finality provider stakeholder type
  FINALITY_PROVIDER = 0;
  // BTC delegation stakeholder type
  BTC_DELEGATION = 1;
}