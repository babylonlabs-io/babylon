syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "babylon/btcstaking/v1/btcstaking.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/btcstaking/types";

// EventFinalityProviderCreated is the event emitted when a finality provider is created
message EventFinalityProviderCreated {
  // btc_pk_hex is the hex string of Bitcoin secp256k1 PK of this finality provider
  string btc_pk_hex = 1 [(amino.dont_omitempty) = true];
  // addr is the babylon address to receive commission from delegations.
  string addr = 2 [(amino.dont_omitempty) = true];
  // commission defines the commission rate of the finality provider in decimals.
  string commission = 3 [(amino.dont_omitempty) = true];
  // moniker defines a human-readable name for the finality provider.
  string moniker = 4;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 5;
  // website defines an optional website link.
  string website = 6;
  // security_contact defines an optional email for security contact.
  string security_contact = 7;
  // details define other optional details.
  string details = 8;
}

// EventFinalityProviderEdited is the event emitted when a finality provider is edited
message EventFinalityProviderEdited {
  // btc_pk_hex is the hex string of Bitcoin secp256k1 PK of this finality provider
  string btc_pk_hex = 1 [(amino.dont_omitempty) = true];
  // commission defines the commission rate of the finality provider in decimals.
  string commission = 2 [(amino.dont_omitempty) = true];
  // moniker defines a human-readable name for the finality provider.
  string moniker = 3;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 4;
  // website defines an optional website link.
  string website = 5;
  // security_contact defines an optional email for security contact.
  string security_contact = 6;
  // details define other optional details.
  string details = 7;
}

// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
// updated. There are the following possible state transitions:
// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
// - pending -> active, which happens upon `MsgAddCovenantSigs`
// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
message EventBTCDelegationStateUpdate {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // new_state is the new state of this BTC delegation
  BTCDelegationStatus new_state = 2;
}

// EventSelectiveSlashing is the event emitted when an adversarial
// finality provider selectively slashes a BTC delegation. This will
// result in slashing of all BTC delegations under this finality provider.
message EventSelectiveSlashing {
  // evidence is the evidence of selective slashing
  SelectiveSlashingEvidence evidence = 1;
}

// EventPowerDistUpdate is an event that affects voting power distribution
// of BTC staking protocol
message EventPowerDistUpdate {
  // EventSlashedFinalityProvider defines an event that a finality provider
  // is slashed
  // TODO: unify with existing slashing events
  message EventSlashedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // EventJailedFinalityProvider defines an event that a finality provider
  // is jailed after being detected sluggish
  message EventJailedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // EventUnjailedFinalityProvider defines an event that a jailed finality provider
  // is unjailed after the jailing period is passed
  message EventUnjailedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // ev is the event that affects voting power distribution
  oneof ev {
    // slashed_fp means a finality provider is slashed
    EventSlashedFinalityProvider slashed_fp = 1;
    // jailed_fp means a finality provider is jailed
    EventJailedFinalityProvider jailed_fp = 2;
    // unjailed_fp means a jailed finality provider is unjailed
    EventUnjailedFinalityProvider unjailed_fp = 3;
    // btc_del_state_update means a BTC delegation's state is updated
    EventBTCDelegationStateUpdate btc_del_state_update = 4;
  }
}

// A finality provider starts with status INACTIVE once registered.
// Possible status transitions are when:
// 1. it has accumulated sufficient delegations and has
// timestamped public randomness:
// INACTIVE -> ACTIVE
// 2. it is jailed due to downtime:
// ACTIVE -> JAILED
// 3. it is slashed due to double-sign:
// ACTIVE -> SLASHED
// 4. it is unjailed after a jailing period:
// JAILED -> INACTIVE/ACTIVE (depending on (1))
// 5. it does not have sufficient delegations or does not
// have timestamped public randomness:
// ACTIVE -> INACTIVE.
// Note that it is impossible for a SLASHED finality provider to
// transition to other status
message EventFinalityProviderStatusChange {
  // btc_pk is the BTC public key of the finality provider
  string btc_pk = 1 [(amino.dont_omitempty) = true];
  // new_state is the status that the finality provider
  // is transitioned to, following FinalityProviderStatus
  string new_state = 2 [(amino.dont_omitempty) = true];
}

// FinalityProviderStatus is the status of a finality provider.
enum FinalityProviderStatus {
  // FINALITY_PROVIDER_STATUS_INACTIVE defines a finality provider that does not have sufficient
  // delegations or does not have timestamped public randomness.
  FINALITY_PROVIDER_STATUS_INACTIVE = 0;
  // FINALITY_PROVIDER_STATUS_ACTIVE defines a finality provider that have sufficient delegations
  // and have timestamped public randomness.
  FINALITY_PROVIDER_STATUS_ACTIVE = 1;
  // FINALITY_PROVIDER_STATUS_JAILED defines a finality provider that is jailed due to downtime
  FINALITY_PROVIDER_STATUS_JAILED = 2;
  // FINALITY_PROVIDER_STATUS_SLASHED defines a finality provider that is slashed due to double-sign
  FINALITY_PROVIDER_STATUS_SLASHED = 3;
}

// EventBTCDelegationCreated is the event emitted when a BTC delegation is created
// on the Babylon chain
message EventBTCDelegationCreated {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // staking_output_pk_script is the hex encoded PK script of the staking output
  string staking_output_pk_script = 2 [(amino.dont_omitempty) = true];
  // staking_output_index is the index of the staking output in the staking tx
  string staking_output_index = 3 [(amino.dont_omitempty) = true];
  // version of the params used to validate the delegation
  string params_version = 4 [(amino.dont_omitempty) = true];
  // finality_provider_btc_pks_hex is the list of hex str of Bitcoin secp256k1 PK of
  // the finality providers that this BTC delegation delegates to
  // the PK follows encoding in BIP-340 spec
  repeated string finality_provider_btc_pks_hex = 5 [(amino.dont_omitempty) = true];
  // staker_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the staker that
  // creates this BTC delegation the PK follows encoding in BIP-340 spec
  string staker_btc_pk_hex = 6 [(amino.dont_omitempty) = true];
  // staking_time is the timelock of the staking tx specified in the BTC script
  string staking_time = 7 [(amino.dont_omitempty) = true];
  // staking_amount is the total amount of BTC stake in this delegation
  // quantified in satoshi
  string staking_amount = 8 [(amino.dont_omitempty) = true];
  // unbonding_time is the time is timelock on unbonding tx chosen by the staker
  string unbonding_time = 9 [(amino.dont_omitempty) = true];
  // unbonding_tx is hex encoded bytes of the unsigned unbonding tx
  string unbonding_tx = 10 [(amino.dont_omitempty) = true];
  // new_state of the BTC delegation
  string new_state = 11 [(amino.dont_omitempty) = true];
}

// EventCovenantSignatureReceived is the event emitted when a covenant committee
// sends valid covenant signatures for a BTC delegation
message EventCovenantSignatureReceived{
  // staking_tx_hash is the hash of the staking identifing the BTC delegation
  // that this covenant signature is for
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // covenant_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the
  // covnenat committee that send the signature
  string covenant_btc_pk_hex = 2 [(amino.dont_omitempty) = true];
  // covenant_unbonding_signature_hex is the hex str of the BIP340 Schnorr
  // signature of the covenant committee on the unbonding tx
  string covenant_unbonding_signature_hex = 3 [(amino.dont_omitempty) = true];
}

// EventCovenantQuorumReached is the event emitted quorum of covenant committee
// is reached for a BTC delegation
message EventCovenantQuorumReached {
  // staking_tx_hash is the hash of the staking identifing the BTC delegation
  // that this covenant signature is for
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // new_state of the BTC delegation
  string new_state = 2 [(amino.dont_omitempty) = true];
}

// EventBTCDelegationInclusionProofReceived is the event emitted when a BTC delegation
// inclusion proof is received
message EventBTCDelegationInclusionProofReceived {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // start_height is the start BTC height of the BTC delegation
  // it is the start BTC height of the timelock
  string start_height = 2 [(amino.dont_omitempty) = true];
  // end_height is the end height of the BTC delegation
  // it is calculated by end_height = start_height + staking_time
  string end_height = 3 [(amino.dont_omitempty) = true];
  // new_state of the BTC delegation
  string new_state = 4 [(amino.dont_omitempty) = true];
}

// EventBTCDelgationUnbondedEarly is the event emitted when a BTC delegation
// is unbonded by staker sending unbonding tx to BTC
message EventBTCDelgationUnbondedEarly {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // start_height is the start BTC height of the early unbonding
  string start_height = 2 [(amino.dont_omitempty) = true];
  // new_state of the BTC delegation
  string new_state = 3 [(amino.dont_omitempty) = true];
}

// EventBTCDelegationExpired is the event emitted when a BTC delegation
// is unbonded by expiration of the staking tx timelock
message EventBTCDelegationExpired {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // new_state of the BTC delegation
  string new_state = 2 [(amino.dont_omitempty) = true];
}

// EventUnexpectedUnbondingTx is the event emitted when an unbonding tx is
// is different that the one registered in the BTC delegation.
message EventUnexpectedUnbondingTx {
  // staking_tx_hash uniquely identifies a BTC delegation being unbonded
  string staking_tx_hash = 1 [(amino.dont_omitempty) = true];
  // spend_stake_tx_hash has of the transactin spending staking output
  string spend_stake_tx_hash = 2 [(amino.dont_omitempty) = true];
  // spend_stake_tx_header_hash is the hash of the header of the block that
  // includes the spend_stake_tx
  string spend_stake_tx_header_hash = 3 [(amino.dont_omitempty) = true];
  // spend_stake_tx_block_index is the spend_stake_tx index in the block
  uint32 spend_stake_tx_block_index = 4 [(amino.dont_omitempty) = true];
}
