syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "babylon/btcstaking/v1/btcstaking.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/btcstaking/types";

// EventFinalityProviderCreated is the event emitted when a finality provider is created
message EventFinalityProviderCreated {
  // btc_pk is the Bitcoin secp256k1 PK of this finality provider
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  // addr is the address to receive commission from delegations.
  string addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // commission defines the commission rate of the finality provider.
  string commission = 3 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
  // description defines the description terms for the finality provider.
  cosmos.staking.v1beta1.Description description = 4;
}

// EventFinalityProviderEdited is the event emitted when a finality provider is edited
message EventFinalityProviderEdited {
  // btc_pk is the Bitcoin secp256k1 PK of this finality provider
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  // commission defines the commission rate of the finality provider.
  string commission = 2 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
  // description defines the description terms for the finality provider.
  cosmos.staking.v1beta1.Description description = 3;
}

// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
// updated. There are the following possible state transitions:
// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
// - pending -> active, which happens upon `MsgAddCovenantSigs`
// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
message EventBTCDelegationStateUpdate {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // new_state is the new state of this BTC delegation
  BTCDelegationStatus new_state = 2;
}

// EventSelectiveSlashing is the event emitted when an adversarial
// finality provider selectively slashes a BTC delegation. This will
// result in slashing of all BTC delegations under this finality provider.
message EventSelectiveSlashing {
  // evidence is the evidence of selective slashing
  SelectiveSlashingEvidence evidence = 1;
}

// EventPowerDistUpdate is an event that affects voting power distribution
// of BTC staking protocol
message EventPowerDistUpdate {
  // EventSlashedFinalityProvider defines an event that a finality provider
  // is slashed
  // TODO: unify with existing slashing events
  message EventSlashedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // EventJailedFinalityProvider defines an event that a finality provider
  // is jailed after being detected sluggish
  message EventJailedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // EventUnjailedFinalityProvider defines an event that a jailed finality provider
  // is unjailed after the jailing period is passed
  message EventUnjailedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // ev is the event that affects voting power distribution
  oneof ev {
    // slashed_fp means a finality provider is slashed
    EventSlashedFinalityProvider slashed_fp = 1;
    // jailed_fp means a finality provider is jailed
    EventJailedFinalityProvider jailed_fp = 2;
    // unjailed_fp means a jailed finality provider is unjailed
    EventUnjailedFinalityProvider unjailed_fp = 3;
    // btc_del_state_update means a BTC delegation's state is updated
    EventBTCDelegationStateUpdate btc_del_state_update = 4;
  }
}

message EventFinalityProviderStatusChange {
  // btc_pk is the BTC public key of the finality provider
  string btc_pk = 1;
  // new_status is the new status that the finality provider
  // is transitioned to
  FinalityProviderStatus new_status = 2;
}

// FinalityProviderStatus is the status of a finality provider.
// A finality provider starts with status INACTIVE once registered.
// Possible status transitions are when:
// 1. it has accumulated sufficient delegations and has
// timestamped public randomness:
// INACTIVE -> ACTIVE
// 2. it is jailed due to downtime:
// ACTIVE -> JAILED
// 3. it is slashed due to double-sign:
// ACTIVE -> SLASHED
// 4. it is unjailed after a jailing period:
// JAILED -> INACTIVE/ACTIVE (depending on (1))
// 5. it does not have sufficient delegations or does not
// have timestamped public randomness:
// ACTIVE -> INACTIVE.
// Note that it is impossible for a SLASHED finality provider to
// transition to other status
enum FinalityProviderStatus {
  // STATUS_INACTIVE defines a finality provider that does not have sufficient
  // delegations or does not have timestamped public randomness.
  STATUS_INACTIVE = 0;
  // STATUS_ACTIVE defines a finality provider that have sufficient delegations
  // and have timestamped public randomness.
  STATUS_ACTIVE = 1;
  // STATUS_JAILED defines a finality provider that is jailed due to downtime
  STATUS_JAILED = 2;
  // STATUS_SLASHED defines a finality provider that is slashed due to double-sign
  STATUS_SLASHED = 3;
}
