syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "babylon/btcstaking/v1/btcstaking.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/btcstaking/types";

// EventNewFinalityProvider is the event emitted when a finality provider is created
message EventNewFinalityProvider { FinalityProvider fp = 1; }

// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
// updated. There are the following possible state transitions:
// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
// - pending -> active, which happens upon `MsgAddCovenantSigs`
// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
message EventBTCDelegationStateUpdate {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // new_state is the new state of this BTC delegation
  BTCDelegationStatus new_state = 2;
}

// EventSelectiveSlashing is the event emitted when an adversarial
// finality provider selectively slashes a BTC delegation. This will
// result in slashing of all BTC delegations under this finality provider.
message EventSelectiveSlashing {
  // evidence is the evidence of selective slashing
  SelectiveSlashingEvidence evidence = 1;
}

// EventPowerDistUpdate is an event that affects voting power distribution
// of BTC staking protocol
message EventPowerDistUpdate {
  // EventSlashedFinalityProvider defines an event that a finality provider
  // is slashed
  // TODO: unify with existing slashing events
  message EventSlashedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // EventJailedFinalityProvider defines an event that a finality provider
  // is jailed after being detected sluggish
  message EventJailedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // EventUnjailedFinalityProvider defines an event that a jailed finality provider
  // is unjailed after the jailing period is passed
  message EventUnjailedFinalityProvider {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  }

  // ev is the event that affects voting power distribution
  oneof ev {
    // slashed_fp means a finality provider is slashed
    EventSlashedFinalityProvider slashed_fp = 1;
    // jailed_fp means a finality provider is jailed
    EventJailedFinalityProvider jailed_fp = 2;
    // unjailed_fp means a jailed finality provider is unjailed
    EventUnjailedFinalityProvider unjailed_fp = 3;
    // btc_del_state_update means a BTC delegation's state is updated
    EventBTCDelegationStateUpdate btc_del_state_update = 4;
  }
}

// EventBTCDelegationCreated is the event emitted when a BTC delegation is created
// on the Babylon chain
message EventBTCDelegationCreated {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // version of the params used to validate the delegation
  uint32 params_version = 2;
  // finality_provider_btc_pks_hex is the list of hex str of Bitcoin secp256k1 PK of
  // the finality providers that this BTC delegation delegates to
  // the PK follows encoding in BIP-340 spec
  repeated string finality_provider_btc_pks_hex = 3;
  // staker_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the staker that
  // creates this BTC delegation the PK follows encoding in BIP-340 spec
  string staker_btc_pk_hex = 4;
  // staking_time is the timelock of the staking tx specified in the BTC script
  uint32 staking_time = 5;
  // staking_amount is the total amount of BTC stake in this delegation
  // quantified in satoshi
  uint64 staking_amount = 6;
  // unbonding_time is the time is timelock on unbonding tx chosen by the staker
  uint32 unbonding_time = 7;
  // unbonding_tx is hex encoded bytes of the unsigned unbonding tx
  string unbonding_tx = 8;
  // state of the BTC delegation
  BTCDelegationStatus state = 9;
}

// EventCovenantSignatureRecevied is the event emitted when a covenant committee
// sends valid covenant signatures for a BTC delegation
message EventCovenantSignatureRecevied{
  // staking_tx_hash is the hash of the staking identifing the BTC delegation
  // that this covenant signature is for
  string staking_tx_hash = 1;
  // covenant_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the
  // covnenat committee that send the signature
  string covenant_btc_pk_hex = 2;
  // covenant_unbonding_signature_hex is the hex str of the BIP340 Schnorr
  // signature of the covenant committee on the unbonding tx
  string covenant_unbonding_signature_hex = 3;
}

// EventCovenantQuroumReached is the event emitted quorum of covenant committee
// is reached for a BTC delegation
message EventCovenantQuroumReached {
  // staking_tx_hash is the hash of the staking identifing the BTC delegation
  // that this covenant signature is for
  string staking_tx_hash = 1;
  // state of the BTC delegation
  BTCDelegationStatus state = 2;
}

// EventBTCDelegationInclusionProofReceived is the event emitted when a BTC delegation
// inclusion proof is received
message EventBTCDelegationInclusionProofReceived {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // start_height is the start BTC height of the BTC delegation
  // it is the start BTC height of the timelock
  uint64 start_height = 2;
  // end_height is the end height of the BTC delegation
  // it is calculated by end_height = start_height + staking_time
  uint64 end_height = 3;
  // state of the BTC delegation
  BTCDelegationStatus state = 4;
}

// EventBTCDelgationUnbondedEarly is the event emitted when a BTC delegation
// is unbonded by staker sending unbonding tx to BTC
message EventBTCDelgationUnbondedEarly {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // state of the BTC delegation
  BTCDelegationStatus state = 2;
}

// EventBTCDelegationExpired is the event emitted when a BTC delegation
// is unbonded by expiration of the staking tx timelock
message EventBTCDelegationExpired {
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 1;
  // state of the BTC delegation
  BTCDelegationStatus state = 2;
}
