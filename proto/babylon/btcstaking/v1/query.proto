syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btcstaking/v1/params.proto";
import "babylon/btcstaking/v1/btcstaking.proto";
import "babylon/btcstaking/v1/pop.proto";

option go_package = "github.com/babylonlabs-io/babylon/x/btcstaking/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/params";
  }
  // ParamsByVersion queries the parameters of the module for a specific version of past params.
  rpc ParamsByVersion(QueryParamsByVersionRequest) returns (QueryParamsByVersionResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/params/{version}";
  }

  // FinalityProviders queries all finality providers
  rpc FinalityProviders(QueryFinalityProvidersRequest) returns (QueryFinalityProvidersResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/finality_providers";
  }

  // FinalityProvider info about one finality provider
  rpc FinalityProvider(QueryFinalityProviderRequest) returns (QueryFinalityProviderResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/finality_providers/{fp_btc_pk_hex}/finality_provider";
  }

  // BTCDelegations queries all BTC delegations under a given status
  rpc BTCDelegations(QueryBTCDelegationsRequest) returns (QueryBTCDelegationsResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/btc_delegations/{status}";
  }

  // FinalityProviderDelegations queries all BTC delegations of the given finality provider
  rpc FinalityProviderDelegations(QueryFinalityProviderDelegationsRequest) returns (QueryFinalityProviderDelegationsResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/finality_providers/{fp_btc_pk_hex}/delegations";
  }

  // BTCDelegation retrieves delegation by corresponding staking tx hash
  rpc BTCDelegation(QueryBTCDelegationRequest) returns (QueryBTCDelegationResponse) {
    option (google.api.http).get = "/babylon/btcstaking/v1/btc_delegation/{staking_tx_hash_hex}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsByVersionRequest {
  uint32 version = 1;
}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsByVersionResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryFinalityProvidersRequest is the request type for the
// Query/FinalityProviders RPC method.
message QueryFinalityProvidersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryFinalityProvidersResponse is the response type for the
// Query/FinalityProviders RPC method.
message QueryFinalityProvidersResponse {
  // finality_providers contains all the finality providers
  repeated FinalityProviderResponse finality_providers = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// QueryFinalityProviderRequest requests information about a finality provider
message QueryFinalityProviderRequest {
  // fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
  string fp_btc_pk_hex = 1;
}

// QueryFinalityProviderResponse contains information about a finality provider
message QueryFinalityProviderResponse {
  // finality_provider contains the FinalityProvider
  FinalityProviderResponse finality_provider = 1;
}

// QueryBTCDelegationsRequest is the request type for the
// Query/BTCDelegations RPC method.
message QueryBTCDelegationsRequest {
  // status is the queried status for BTC delegations
  BTCDelegationStatus status = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBTCDelegationsResponse is the response type for the
// Query/BTCDelegations RPC method.
message QueryBTCDelegationsResponse {
  // btc_delegations contains all the queried BTC delegations under the given status
  repeated BTCDelegationResponse btc_delegations = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFinalityProviderDelegationsRequest is the request type for the
// Query/FinalityProviderDelegations RPC method.
message QueryFinalityProviderDelegationsRequest {
  // fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality providerthat
  // this BTC delegation delegates to
  // the PK follows encoding in BIP-340 spec
  string fp_btc_pk_hex = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryFinalityProviderDelegationsResponse is the response type for the
// Query/FinalityProviderDelegations RPC method.
message QueryFinalityProviderDelegationsResponse {
  // btc_delegator_delegations contains all the queried BTC delegations.
  repeated BTCDelegatorDelegationsResponse btc_delegator_delegations = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBTCDelegationRequest is the request type to retrieve a BTC delegation by
// staking tx hash
message QueryBTCDelegationRequest {
  // Hash of staking transaction in btc format
  string staking_tx_hash_hex = 1;
}

// QueryBTCDelegationResponse is response type matching QueryBTCDelegationRequest
// and containing BTC delegation information
message QueryBTCDelegationResponse {
  // BTCDelegation represents the client needed information of an BTCDelegation.
  BTCDelegationResponse btc_delegation = 1;
}

// BTCDelegationResponse is the client needed information from a BTCDelegation with the current status based on parameters.
message BTCDelegationResponse {
  // staker_addr is the address to receive rewards from BTC delegation.
  string staker_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 2 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  // fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
  // this BTC delegation delegates to
  repeated bytes fp_btc_pk_list = 3 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  // staking_time is the number of blocks for which the delegation is locked on BTC chain
  uint32 staking_time = 4;
  // start_height is the start BTC height of the BTC delegation
  // it is the start BTC height of the timelock
  uint32 start_height = 5;
  // end_height is the end height of the BTC delegation
  // it is the end BTC height of the timelock - w
  uint32 end_height = 6;
  // total_sat is the total amount of BTC stakes in this delegation
  // quantified in satoshi
  uint64 total_sat = 7;
  // staking_tx_hex is the hex string of staking tx
  string staking_tx_hex = 8;
  // slashing_tx_hex is the hex string of slashing tx
  string slashing_tx_hex = 9;
  // delegator_slash_sig_hex is the signature on the slashing tx
  // by the delegator (i.e., SK corresponding to btc_pk) as string hex.
  // It will be a part of the witness for the staking tx output.
  string delegator_slash_sig_hex = 10;
  // covenant_sigs is a list of adaptor signatures on the slashing tx
  // by each covenant member
  // It will be a part of the witness for the staking tx output.
  repeated CovenantAdaptorSignatures covenant_sigs = 11;
  // staking_output_idx is the index of the staking output in the staking tx
  uint32 staking_output_idx = 12;
  // whether this delegation is active
  bool active = 13;
  // descriptive status of current delegation.
  string status_desc = 14;
  // unbonding_time used in unbonding output timelock path and in slashing transactions
  // change outputs
  uint32 unbonding_time = 15;
  // undelegation_response is the undelegation info of this delegation.
  BTCUndelegationResponse undelegation_response = 16;
  // params version used to validate delegation
  uint32 params_version = 17;
}

// DelegatorUnbondingInfoResponse provides all necessary info about transaction
// which spent the staking output
message DelegatorUnbondingInfoResponse {
  // spend_stake_tx_hex is the transaction which spent the staking output. It is
  // filled only if the spend_stake_tx_hex is different than the unbonding_tx_hex
  string spend_stake_tx_hex = 1;
}

// BTCUndelegationResponse provides all necessary info about the undeleagation
message BTCUndelegationResponse {
  // unbonding_tx is the transaction which will transfer the funds from staking
  // output to unbonding output. Unbonding output will usually have lower timelock
  // than staking output. The unbonding tx as string hex.
  string unbonding_tx_hex = 1;
  // covenant_unbonding_sig_list is the list of signatures on the unbonding tx
  // by covenant members
  repeated SignatureInfo covenant_unbonding_sig_list = 2;
  // slashingTxHex is the hex string of slashing tx
  string slashing_tx_hex = 3;
  // delegator_slashing_sig is the signature on the slashing tx
  // by the delegator (i.e., SK corresponding to btc_pk).
  // It will be a part of the witness for the unbonding tx output.
  // The delegator slashing sig as string hex.
  string delegator_slashing_sig_hex = 4;
  // covenant_slashing_sigs is a list of adaptor signatures on the
  // unbonding slashing tx by each covenant member
  // It will be a part of the witness for the staking tx output.
  repeated CovenantAdaptorSignatures covenant_slashing_sigs = 5;
  // btc_undelegation_info contains all necessary info about the transaction
  // which spent the staking output
  DelegatorUnbondingInfoResponse delegator_unbonding_info_response = 6;
}

// BTCDelegatorDelegationsResponse is a collection of BTC delegations responses from the same delegator.
message BTCDelegatorDelegationsResponse {
  repeated BTCDelegationResponse dels = 1;
}

// FinalityProviderResponse defines a finality provider with voting power information.
message FinalityProviderResponse {
  // description defines the description terms for the finality provider.
  cosmos.staking.v1beta1.Description description = 1;
  // commission defines the commission rate of the finality provider.
  string commission = 2 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
  // addr is the address to receive commission from delegations.
  string addr = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // btc_pk is the Bitcoin secp256k1 PK of this finality provider
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonlabs-io/babylon/types.BIP340PubKey" ];
  // pop is the proof of possession of the BTC_PK by the fp addr.
  // Essentially is the signature where the BTC SK sigs the fp addr.
  ProofOfPossessionBTC pop = 5;
  // slashed_babylon_height indicates the Babylon height when
  // the finality provider is slashed.
  // if it's 0 then the finality provider is not slashed
  uint64 slashed_babylon_height = 6;
  // slashed_btc_height indicates the BTC height when
  // the finality provider is slashed.
  // if it's 0 then the finality provider is not slashed
  uint32 slashed_btc_height = 7;
  // height is the queried Babylon height
  uint64 height = 8;
  // jailed defines whether the finality provider is jailed
  bool jailed = 9;
}
