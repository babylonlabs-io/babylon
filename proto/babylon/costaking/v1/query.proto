syntax = "proto3";
package babylon.costaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "babylon/costaking/v1/costaking.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/babylonlabs-io/babylon/v4/x/costaking/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/costaking/v1/params";
  }
  // CostakerRewardsTracker queries the costaker reward tracker.
  rpc CostakerRewardsTracker(QueryCostakerRewardsTrackerRequest)
      returns (QueryCostakerRewardsTrackerResponse) {
    option (google.api.http).get =
        "/babylon/costaking/v1/costakers/{costaker_address}/rewards_tracker";
  }
  // HistoricalRewards queries the historical rewards structure per period for
  // costaking single pool.
  rpc HistoricalRewards(QueryHistoricalRewardsRequest)
      returns (QueryHistoricalRewardsResponse) {
    option (google.api.http).get =
        "/babylon/costaking/v1/historical_rewards/{period}";
  }
  // CurrentRewards queries the current rewards structure for costaking single
  // pool.
  rpc CurrentRewards(QueryCurrentRewardsRequest)
      returns (QueryCurrentRewardsResponse) {
    option (google.api.http).get = "/babylon/costaking/v1/current_rewards";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // Params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryCostakerRewardsTrackerRequest is the request type for the
// Query/CostakerRewardsTracker RPC method.
message QueryCostakerRewardsTrackerRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // costakerAddress defines the delegator address to query for.
  string costaker_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryCostakerRewardsTrackerResponse is the response type for the
// Query/CostakerRewardsTracker RPC method.
message QueryCostakerRewardsTrackerResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // StartPeriodCumulativeReward the starting period the costaker
  // made his last withdraw of costaking rewards or modified his active staking
  // amount of satoshis or baby.
  uint64 start_period_cumulative_reward = 1;
  // ActiveSatoshis is the total amount of active satoshi delegated
  // from this costaker babylon address.
  bytes active_satoshis = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // ActiveBaby is the total amount of active baby delegated
  // from this costaker babylon address.
  bytes active_baby = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // TotalScore is the total amount of calculated score
  // of this costaker.
  bytes total_score = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// QueryCurrentRewardsRequest is request type for the Query/CurrentRewards RPC
// method.
message QueryCurrentRewardsRequest {}

// QueryCurrentRewardsResponse is response type for the Query/CurrentRewards RPC
// method.
message QueryCurrentRewardsResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Rewards is the current rewards for the single pool of rewards for all the
  // costakers for the whole chain. If some action happens of satoshi or baby
  // staked or is unbonded or withdraw of the rewards available, this current
  // period is sent to an HistoricalRewards and a new period is created and
  // the rewards property is zerod out.
  // Note: This rewards have increased simulated decimals (10^20) to increase
  // precision when calculating the rewards per score and protect against
  // math overflow issues. The decimals are removed prior to sending out
  // to the incentives gauge.
  repeated cosmos.base.v1beta1.Coin rewards = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // Period stores the current period that serves as a reference for
  // creating new historical rewards and correlate with
  // CostakerRewardsTracker StartPeriodCumulativeReward.
  uint64 period = 2;
  // TotalScore is the total amount of score calulated over
  // all the stakers score in the chain.
  bytes total_score = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// QueryHistoricalRewardsRequest is request type for the Query/HistoricalRewards
// RPC method.
message QueryHistoricalRewardsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Period is the historical period which the HistoricalRewards was stored.
  uint64 period = 1;
}

// QueryHistoricalRewardsResponse is response type for the
// Query/HistoricalRewards RPC method.
message QueryHistoricalRewardsResponse {
  // CumulativeRewardsPerScore is the cumulative rewards of that period.
  // This coins will aways increase the value, never reduced, it always
  // accumulates and when the cumulative rewards will be used to distribute
  // rewards, 2 periods will be loaded, calculate the difference and multiplied
  // by the total score amount of each staker
  repeated cosmos.base.v1beta1.Coin cumulative_rewards_per_score = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
